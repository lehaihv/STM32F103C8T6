
Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080067d8  080067d8  000167d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bec  08006bec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006bec  08006bec  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bec  08006bec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bec  08006bec  00016bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bf0  08006bf0  00016bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001dc  08006dd0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08006dd0  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aeda  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee9  00000000  00000000  0002b0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018de6  00000000  00000000  0002e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1d3  00000000  00000000  000474b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7b7  00000000  00000000  00054689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2e40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000432c  00000000  00000000  000e2e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080067c0 	.word	0x080067c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080067c0 	.word	0x080067c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000f88:	201e      	movs	r0, #30
 8000f8a:	f000 fddd 	bl	8001b48 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	481c      	ldr	r0, [pc, #112]	; (8001008 <lcd_init+0x84>)
 8000f96:	f001 fc8f 	bl	80028b8 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	4819      	ldr	r0, [pc, #100]	; (8001008 <lcd_init+0x84>)
 8000fa2:	f001 fc89 	bl	80028b8 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fac:	4816      	ldr	r0, [pc, #88]	; (8001008 <lcd_init+0x84>)
 8000fae:	f001 fc83 	bl	80028b8 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <lcd_init+0x84>)
 8000fba:	f001 fc7d 	bl	80028b8 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <lcd_init+0x84>)
 8000fc6:	f001 fc77 	bl	80028b8 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <lcd_init+0x84>)
 8000fd2:	f001 fc71 	bl	80028b8 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fdc:	480a      	ldr	r0, [pc, #40]	; (8001008 <lcd_init+0x84>)
 8000fde:	f001 fc6b 	bl	80028b8 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8000fe2:	2128      	movs	r1, #40	; 0x28
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 f811 	bl	800100c <lcd_write>
	lcd_write(0,0x0c);
 8000fea:	210c      	movs	r1, #12
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 f80d 	bl	800100c <lcd_write>
	lcd_write(0,0x06);
 8000ff2:	2106      	movs	r1, #6
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f809 	bl	800100c <lcd_write>
	lcd_write(0,0x01);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f805 	bl	800100c <lcd_write>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40010c00 	.word	0x40010c00

0800100c <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 800101c:	2002      	movs	r0, #2
 800101e:	f000 fd93 	bl	8001b48 <HAL_Delay>
	if(type)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <lcd_write+0x2a>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102e:	485a      	ldr	r0, [pc, #360]	; (8001198 <lcd_write+0x18c>)
 8001030:	f001 fc42 	bl	80028b8 <HAL_GPIO_WritePin>
 8001034:	e005      	b.n	8001042 <lcd_write+0x36>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800103c:	4856      	ldr	r0, [pc, #344]	; (8001198 <lcd_write+0x18c>)
 800103e:	f001 fc3b 	bl	80028b8 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8001042:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001046:	2b00      	cmp	r3, #0
 8001048:	da06      	bge.n	8001058 <lcd_write+0x4c>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001050:	4851      	ldr	r0, [pc, #324]	; (8001198 <lcd_write+0x18c>)
 8001052:	f001 fc31 	bl	80028b8 <HAL_GPIO_WritePin>
 8001056:	e005      	b.n	8001064 <lcd_write+0x58>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	484e      	ldr	r0, [pc, #312]	; (8001198 <lcd_write+0x18c>)
 8001060:	f001 fc2a 	bl	80028b8 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <lcd_write+0x70>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	4848      	ldr	r0, [pc, #288]	; (8001198 <lcd_write+0x18c>)
 8001076:	f001 fc1f 	bl	80028b8 <HAL_GPIO_WritePin>
 800107a:	e005      	b.n	8001088 <lcd_write+0x7c>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001082:	4845      	ldr	r0, [pc, #276]	; (8001198 <lcd_write+0x18c>)
 8001084:	f001 fc18 	bl	80028b8 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	2b00      	cmp	r3, #0
 8001090:	d006      	beq.n	80010a0 <lcd_write+0x94>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001098:	483f      	ldr	r0, [pc, #252]	; (8001198 <lcd_write+0x18c>)
 800109a:	f001 fc0d 	bl	80028b8 <HAL_GPIO_WritePin>
 800109e:	e005      	b.n	80010ac <lcd_write+0xa0>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a6:	483c      	ldr	r0, [pc, #240]	; (8001198 <lcd_write+0x18c>)
 80010a8:	f001 fc06 	bl	80028b8 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <lcd_write+0xb8>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 80010b6:	2201      	movs	r2, #1
 80010b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010bc:	4836      	ldr	r0, [pc, #216]	; (8001198 <lcd_write+0x18c>)
 80010be:	f001 fbfb 	bl	80028b8 <HAL_GPIO_WritePin>
 80010c2:	e005      	b.n	80010d0 <lcd_write+0xc4>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ca:	4833      	ldr	r0, [pc, #204]	; (8001198 <lcd_write+0x18c>)
 80010cc:	f001 fbf4 	bl	80028b8 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d6:	4830      	ldr	r0, [pc, #192]	; (8001198 <lcd_write+0x18c>)
 80010d8:	f001 fbee 	bl	80028b8 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <lcd_write+0x18c>)
 80010e4:	f001 fbe8 	bl	80028b8 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <lcd_write+0xf4>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f8:	4827      	ldr	r0, [pc, #156]	; (8001198 <lcd_write+0x18c>)
 80010fa:	f001 fbdd 	bl	80028b8 <HAL_GPIO_WritePin>
 80010fe:	e005      	b.n	800110c <lcd_write+0x100>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001106:	4824      	ldr	r0, [pc, #144]	; (8001198 <lcd_write+0x18c>)
 8001108:	f001 fbd6 	bl	80028b8 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <lcd_write+0x118>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	481e      	ldr	r0, [pc, #120]	; (8001198 <lcd_write+0x18c>)
 800111e:	f001 fbcb 	bl	80028b8 <HAL_GPIO_WritePin>
 8001122:	e005      	b.n	8001130 <lcd_write+0x124>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <lcd_write+0x18c>)
 800112c:	f001 fbc4 	bl	80028b8 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <lcd_write+0x13c>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001140:	4815      	ldr	r0, [pc, #84]	; (8001198 <lcd_write+0x18c>)
 8001142:	f001 fbb9 	bl	80028b8 <HAL_GPIO_WritePin>
 8001146:	e005      	b.n	8001154 <lcd_write+0x148>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114e:	4812      	ldr	r0, [pc, #72]	; (8001198 <lcd_write+0x18c>)
 8001150:	f001 fbb2 	bl	80028b8 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <lcd_write+0x160>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <lcd_write+0x18c>)
 8001166:	f001 fba7 	bl	80028b8 <HAL_GPIO_WritePin>
 800116a:	e005      	b.n	8001178 <lcd_write+0x16c>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <lcd_write+0x18c>)
 8001174:	f001 fba0 	bl	80028b8 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <lcd_write+0x18c>)
 8001180:	f001 fb9a 	bl	80028b8 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <lcd_write+0x18c>)
 800118c:	f001 fb94 	bl	80028b8 <HAL_GPIO_WritePin>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010c00 	.word	0x40010c00

0800119c <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	603a      	str	r2, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	460b      	mov	r3, r1
 80011aa:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d836      	bhi.n	8001220 <lcd_puts+0x84>
 80011b2:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <lcd_puts+0x1c>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011d9 	.word	0x080011d9
 80011c0:	080011e9 	.word	0x080011e9
 80011c4:	080011f9 	.word	0x080011f9
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	3b80      	subs	r3, #128	; 0x80
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff ff1b 	bl	800100c <lcd_write>
			break;
 80011d6:	e017      	b.n	8001208 <lcd_puts+0x6c>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	3b40      	subs	r3, #64	; 0x40
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff ff13 	bl	800100c <lcd_write>
			break;
 80011e6:	e00f      	b.n	8001208 <lcd_puts+0x6c>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	3b70      	subs	r3, #112	; 0x70
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ff0b 	bl	800100c <lcd_write>
			break;
 80011f6:	e007      	b.n	8001208 <lcd_puts+0x6c>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	3b30      	subs	r3, #48	; 0x30
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff03 	bl	800100c <lcd_write>
			break;
 8001206:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8001208:	e00a      	b.n	8001220 <lcd_puts+0x84>
	{
		lcd_write(1,*string);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	f993 3000 	ldrsb.w	r3, [r3]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fef9 	bl	800100c <lcd_write>
		string++;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	603b      	str	r3, [r7, #0]
	while(*string)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f993 3000 	ldrsb.w	r3, [r3]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ef      	bne.n	800120a <lcd_puts+0x6e>
	}
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001238:	f000 fc24 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f888 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f000 f9b8 	bl	80015b4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001244:	f000 f968 	bl	8001518 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001248:	f000 f918 	bl	800147c <MX_TIM2_Init>
  MX_ADC1_Init();
 800124c:	f000 f8d8 	bl	8001400 <MX_ADC1_Init>
  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim3);

  //ADC
  //HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_ADC_Start_IT(&hadc1);
 8001250:	4833      	ldr	r0, [pc, #204]	; (8001320 <main+0xec>)
 8001252:	f000 fd75 	bl	8001d40 <HAL_ADC_Start_IT>
  SSD1306_GotoXY (8,0);
  SSD1306_Puts ("Hello!", &Font_11x18, 1);
  SSD1306_UpdateScreen();*/

  //LCD 16x2
  lcd_init();
 8001256:	f7ff fe95 	bl	8000f84 <lcd_init>
  lcd_puts (0,0,(int8_t*)"ADC: ");
 800125a:	4a32      	ldr	r2, [pc, #200]	; (8001324 <main+0xf0>)
 800125c:	2100      	movs	r1, #0
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff9c 	bl	800119c <lcd_puts>
  lcd_puts (1,0,(int8_t*)"Volts: ");
 8001264:	4a30      	ldr	r2, [pc, #192]	; (8001328 <main+0xf4>)
 8001266:	2100      	movs	r1, #0
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff ff97 	bl	800119c <lcd_puts>

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
	  //HAL_Delay(100);
	  HAL_ADC_Start_IT(&hadc1);
 800126e:	482c      	ldr	r0, [pc, #176]	; (8001320 <main+0xec>)
 8001270:	f000 fd66 	bl	8001d40 <HAL_ADC_Start_IT>
	  sprintf(msg, "%d", value_adc);
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <main+0xf8>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	492d      	ldr	r1, [pc, #180]	; (8001330 <main+0xfc>)
 800127c:	482d      	ldr	r0, [pc, #180]	; (8001334 <main+0x100>)
 800127e:	f003 f825 	bl	80042cc <siprintf>
	  lcd_puts(0,4, (int8_t*)msg ); ///
 8001282:	4a2c      	ldr	r2, [pc, #176]	; (8001334 <main+0x100>)
 8001284:	2104      	movs	r1, #4
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ff88 	bl	800119c <lcd_puts>
	  volts = ((float)value_adc)*330/4095;
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <main+0xf8>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fcaf 	bl	8000bf4 <__aeabi_ui2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4927      	ldr	r1, [pc, #156]	; (8001338 <main+0x104>)
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fd02 	bl	8000ca4 <__aeabi_fmul>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4926      	ldr	r1, [pc, #152]	; (800133c <main+0x108>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fdb1 	bl	8000e0c <__aeabi_fdiv>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <main+0x10c>)
 80012b0:	601a      	str	r2, [r3, #0]
	  //sprintf(msg1, "%d", (uint16_t)(volts));
	  //lcd_puts(1,6, (int8_t*)msg1);

	  //sprintf(msg1, "%d", (uint16_t)(volts));
	  sprintf(msg1, "%d", (uint16_t)(volts)/100);
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <main+0x10c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fe44 	bl	8000f44 <__aeabi_f2uiz>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4a20      	ldr	r2, [pc, #128]	; (8001344 <main+0x110>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	4918      	ldr	r1, [pc, #96]	; (8001330 <main+0xfc>)
 80012ce:	481e      	ldr	r0, [pc, #120]	; (8001348 <main+0x114>)
 80012d0:	f002 fffc 	bl	80042cc <siprintf>
	  lcd_puts(1,6, (int8_t*)msg1);
 80012d4:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <main+0x114>)
 80012d6:	2106      	movs	r1, #6
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff ff5f 	bl	800119c <lcd_puts>
	  lcd_puts(1,7, (int8_t*)".");
 80012de:	4a1b      	ldr	r2, [pc, #108]	; (800134c <main+0x118>)
 80012e0:	2107      	movs	r1, #7
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff ff5a 	bl	800119c <lcd_puts>
	  sprintf(msg1, "%d", (uint16_t)(volts)%100);
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <main+0x10c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe29 	bl	8000f44 <__aeabi_f2uiz>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <main+0x110>)
 80012f8:	fba2 1203 	umull	r1, r2, r2, r3
 80012fc:	0952      	lsrs	r2, r2, #5
 80012fe:	2164      	movs	r1, #100	; 0x64
 8001300:	fb01 f202 	mul.w	r2, r1, r2
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	b29b      	uxth	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4909      	ldr	r1, [pc, #36]	; (8001330 <main+0xfc>)
 800130c:	480e      	ldr	r0, [pc, #56]	; (8001348 <main+0x114>)
 800130e:	f002 ffdd 	bl	80042cc <siprintf>
	  lcd_puts(1,8, (int8_t*)msg1);
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <main+0x114>)
 8001314:	2108      	movs	r1, #8
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff ff40 	bl	800119c <lcd_puts>
	  HAL_ADC_Start_IT(&hadc1);
 800131c:	e7a7      	b.n	800126e <main+0x3a>
 800131e:	bf00      	nop
 8001320:	200001f8 	.word	0x200001f8
 8001324:	080067d8 	.word	0x080067d8
 8001328:	080067e0 	.word	0x080067e0
 800132c:	200002b8 	.word	0x200002b8
 8001330:	080067e8 	.word	0x080067e8
 8001334:	200002c0 	.word	0x200002c0
 8001338:	43a50000 	.word	0x43a50000
 800133c:	457ff000 	.word	0x457ff000
 8001340:	200002bc 	.word	0x200002bc
 8001344:	51eb851f 	.word	0x51eb851f
 8001348:	200002c8 	.word	0x200002c8
 800134c:	080067ec 	.word	0x080067ec

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	; 0x50
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fb4c 	bl	80039fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001380:	2302      	movs	r3, #2
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001384:	2301      	movs	r3, #1
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001388:	2310      	movs	r3, #16
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001390:	2300      	movs	r3, #0
 8001392:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001394:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001398:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 fabc 	bl	800291c <HAL_RCC_OscConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80013aa:	f000 f98d 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ae:	230f      	movs	r3, #15
 80013b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fd28 	bl	8002e20 <HAL_RCC_ClockConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013d6:	f000 f977 	bl	80016c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013da:	2302      	movs	r3, #2
 80013dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80013de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fe80 	bl	80030ec <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013f2:	f000 f969 	bl	80016c8 <Error_Handler>
  }
}
 80013f6:	bf00      	nop
 80013f8:	3750      	adds	r7, #80	; 0x50
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MX_ADC1_Init+0x74>)
 8001412:	4a19      	ldr	r2, [pc, #100]	; (8001478 <MX_ADC1_Init+0x78>)
 8001414:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_ADC1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_ADC1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_ADC1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_ADC1_Init+0x74>)
 800142a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800142e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <MX_ADC1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_ADC1_Init+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_ADC1_Init+0x74>)
 800143e:	f000 fba7 	bl	8001b90 <HAL_ADC_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001448:	f000 f93e 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800144c:	2302      	movs	r3, #2
 800144e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001450:	2301      	movs	r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_ADC1_Init+0x74>)
 800145e:	f000 fdfd 	bl	800205c <HAL_ADC_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001468:	f000 f92e 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200001f8 	.word	0x200001f8
 8001478:	40012400 	.word	0x40012400

0800147c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	463b      	mov	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <MX_TIM2_Init+0x98>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <MX_TIM2_Init+0x98>)
 80014a2:	f240 321f 	movw	r2, #799	; 0x31f
 80014a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_TIM2_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000-1;
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <MX_TIM2_Init+0x98>)
 80014b0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80014b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_TIM2_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_TIM2_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <MX_TIM2_Init+0x98>)
 80014c4:	f001 fec8 	bl	8003258 <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014ce:	f000 f8fb 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <MX_TIM2_Init+0x98>)
 80014e0:	f002 f811 	bl	8003506 <HAL_TIM_ConfigClockSource>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014ea:	f000 f8ed 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <MX_TIM2_Init+0x98>)
 80014fc:	f002 f9e4 	bl	80038c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001506:	f000 f8df 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000228 	.word	0x20000228

08001518 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_TIM3_Init+0x94>)
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <MX_TIM3_Init+0x98>)
 8001538:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <MX_TIM3_Init+0x94>)
 800153c:	f240 321f 	movw	r2, #799	; 0x31f
 8001540:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_TIM3_Init+0x94>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_TIM3_Init+0x94>)
 800154a:	f242 720f 	movw	r2, #9999	; 0x270f
 800154e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_TIM3_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_TIM3_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800155c:	4813      	ldr	r0, [pc, #76]	; (80015ac <MX_TIM3_Init+0x94>)
 800155e:	f001 fe7b 	bl	8003258 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001568:	f000 f8ae 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4619      	mov	r1, r3
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <MX_TIM3_Init+0x94>)
 800157a:	f001 ffc4 	bl	8003506 <HAL_TIM_ConfigClockSource>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001584:	f000 f8a0 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_TIM3_Init+0x94>)
 8001596:	f002 f997 	bl	80038c8 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015a0:	f000 f892 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000270 	.word	0x20000270
 80015b0:	40000400 	.word	0x40000400

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_GPIO_Init+0xa0>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a21      	ldr	r2, [pc, #132]	; (8001654 <MX_GPIO_Init+0xa0>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_GPIO_Init+0xa0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_GPIO_Init+0xa0>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <MX_GPIO_Init+0xa0>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_GPIO_Init+0xa0>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_10, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f240 4101 	movw	r1, #1025	; 0x401
 80015fe:	4816      	ldr	r0, [pc, #88]	; (8001658 <MX_GPIO_Init+0xa4>)
 8001600:	f001 f95a 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800160a:	4814      	ldr	r0, [pc, #80]	; (800165c <MX_GPIO_Init+0xa8>)
 800160c:	f001 f954 	bl	80028b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8001610:	f240 4301 	movw	r3, #1025	; 0x401
 8001614:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2302      	movs	r3, #2
 8001620:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4619      	mov	r1, r3
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <MX_GPIO_Init+0xa4>)
 800162a:	f000 ffc1 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800162e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001632:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2302      	movs	r3, #2
 800163e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	4619      	mov	r1, r3
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_GPIO_Init+0xa8>)
 8001648:	f000 ffb2 	bl	80025b0 <HAL_GPIO_Init>

}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	40010800 	.word	0x40010800
 800165c:	40010c00 	.word	0x40010c00

08001660 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//Timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim3)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d105      	bne.n	800167c <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8001670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001676:	f001 f937 	bl	80028e8 <HAL_GPIO_TogglePin>
  }
  else if (htim == &htim2)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
  }
}
 800167a:	e007      	b.n	800168c <HAL_TIM_PeriodElapsedCallback+0x2c>
  else if (htim == &htim2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d103      	bne.n	800168c <HAL_TIM_PeriodElapsedCallback+0x2c>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001684:	2101      	movs	r1, #1
 8001686:	4804      	ldr	r0, [pc, #16]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001688:	f001 f92e 	bl	80028e8 <HAL_GPIO_TogglePin>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000270 	.word	0x20000270
 8001698:	40010800 	.word	0x40010800
 800169c:	20000228 	.word	0x20000228

080016a0 <HAL_ADC_ConvCpltCallback>:

//ADC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	value_adc = HAL_ADC_GetValue(&hadc1);
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_ADC_ConvCpltCallback+0x20>)
 80016aa:	f000 fbff 	bl	8001eac <HAL_ADC_GetValue>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_ADC_ConvCpltCallback+0x24>)
 80016b4:	801a      	strh	r2, [r3, #0]
	//value_adc++;
	//value_adc = 2047;

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200001f8 	.word	0x200001f8
 80016c4:	200002b8 	.word	0x200002b8

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_MspInit+0x40>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <HAL_MspInit+0x40>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_MspInit+0x40>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_MspInit+0x40>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a07      	ldr	r2, [pc, #28]	; (8001714 <HAL_MspInit+0x40>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_MspInit+0x40>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_ADC_MspInit+0x7c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d129      	bne.n	800178c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_ADC_MspInit+0x80>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a16      	ldr	r2, [pc, #88]	; (8001798 <HAL_ADC_MspInit+0x80>)
 800173e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_ADC_MspInit+0x80>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_ADC_MspInit+0x80>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_ADC_MspInit+0x80>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_ADC_MspInit+0x80>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001768:	2304      	movs	r3, #4
 800176a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176c:	2303      	movs	r3, #3
 800176e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	4809      	ldr	r0, [pc, #36]	; (800179c <HAL_ADC_MspInit+0x84>)
 8001778:	f000 ff1a 	bl	80025b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2012      	movs	r0, #18
 8001782:	f000 fede 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001786:	2012      	movs	r0, #18
 8001788:	f000 fef7 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40012400 	.word	0x40012400
 8001798:	40021000 	.word	0x40021000
 800179c:	40010800 	.word	0x40010800

080017a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b0:	d114      	bne.n	80017dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	61d3      	str	r3, [r2, #28]
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	201c      	movs	r0, #28
 80017d0:	f000 feb7 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017d4:	201c      	movs	r0, #28
 80017d6:	f000 fed0 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017da:	e018      	b.n	800180e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_TIM_Base_MspInit+0x7c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d113      	bne.n	800180e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_TIM_Base_MspInit+0x78>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	201d      	movs	r0, #29
 8001804:	f000 fe9d 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001808:	201d      	movs	r0, #29
 800180a:	f000 feb6 	bl	800257a <HAL_NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	40000400 	.word	0x40000400

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler+0x4>

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001866:	f000 f953 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <ADC1_2_IRQHandler+0x10>)
 8001876:	f000 fb25 	bl	8001ec4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200001f8 	.word	0x200001f8

08001884 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <TIM2_IRQHandler+0x10>)
 800188a:	f001 fd34 	bl	80032f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000228 	.word	0x20000228

08001898 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM3_IRQHandler+0x10>)
 800189e:	f001 fd2a 	bl	80032f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000270 	.word	0x20000270

080018ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <_kill>:

int _kill(int pid, int sig)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c4:	f002 f870 	bl	80039a8 <__errno>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2216      	movs	r2, #22
 80018cc:	601a      	str	r2, [r3, #0]
  return -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_exit>:

void _exit (int status)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e2:	f04f 31ff 	mov.w	r1, #4294967295
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffe7 	bl	80018ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ec:	e7fe      	b.n	80018ec <_exit+0x12>

080018ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e00a      	b.n	8001916 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001900:	f3af 8000 	nop.w
 8001904:	4601      	mov	r1, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	60ba      	str	r2, [r7, #8]
 800190c:	b2ca      	uxtb	r2, r1
 800190e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	dbf0      	blt.n	8001900 <_read+0x12>
  }

  return len;
 800191e:	687b      	ldr	r3, [r7, #4]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e009      	b.n	800194e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	60ba      	str	r2, [r7, #8]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	429a      	cmp	r2, r3
 8001954:	dbf1      	blt.n	800193a <_write+0x12>
  }
  return len;
 8001956:	687b      	ldr	r3, [r7, #4]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_close>:

int _close(int file)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001986:	605a      	str	r2, [r3, #4]
  return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <_isatty>:

int _isatty(int file)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <_sbrk+0x5c>)
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <_sbrk+0x60>)
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_sbrk+0x64>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <_sbrk+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f0:	f001 ffda 	bl	80039a8 <__errno>
 80019f4:	4603      	mov	r3, r0
 80019f6:	220c      	movs	r2, #12
 80019f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e009      	b.n	8001a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <_sbrk+0x64>)
 8001a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20005000 	.word	0x20005000
 8001a20:	00000400 	.word	0x00000400
 8001a24:	200002d0 	.word	0x200002d0
 8001a28:	200002e8 	.word	0x200002e8

08001a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <Reset_Handler>:
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <LoopFillZerobss+0x12>)
 8001a3a:	490d      	ldr	r1, [pc, #52]	; (8001a70 <LoopFillZerobss+0x16>)
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <LoopFillZerobss+0x1a>)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:
 8001a42:	58d4      	ldr	r4, [r2, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:
 8001a48:	18c4      	adds	r4, r0, r3
 8001a4a:	428c      	cmp	r4, r1
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <LoopFillZerobss+0x1e>)
 8001a50:	4c0a      	ldr	r4, [pc, #40]	; (8001a7c <LoopFillZerobss+0x22>)
 8001a52:	2300      	movs	r3, #0
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:
 8001a5a:	42a2      	cmp	r2, r4
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>
 8001a5e:	f7ff ffe5 	bl	8001a2c <SystemInit>
 8001a62:	f001 ffa7 	bl	80039b4 <__libc_init_array>
 8001a66:	f7ff fbe5 	bl	8001234 <main>
 8001a6a:	4770      	bx	lr
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	200001dc 	.word	0x200001dc
 8001a74:	08006bf4 	.word	0x08006bf4
 8001a78:	200001dc 	.word	0x200001dc
 8001a7c:	200002e8 	.word	0x200002e8

08001a80 <CAN1_RX1_IRQHandler>:
 8001a80:	e7fe      	b.n	8001a80 <CAN1_RX1_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x28>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x28>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 fd49 	bl	800252c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	200f      	movs	r0, #15
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fe18 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fd61 	bl	8002596 <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f000 fd29 	bl	8002542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_IncTick+0x1c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_IncTick+0x20>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <HAL_IncTick+0x20>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	200002d4 	.word	0x200002d4

08001b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b02      	ldr	r3, [pc, #8]	; (8001b44 <HAL_GetTick+0x10>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	200002d4 	.word	0x200002d4

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff fff0 	bl	8001b34 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d005      	beq.n	8001b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_Delay+0x44>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b6e:	bf00      	nop
 8001b70:	f7ff ffe0 	bl	8001b34 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d8f7      	bhi.n	8001b70 <HAL_Delay+0x28>
  {
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008

08001b90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0be      	b.n	8001d30 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fda2 	bl	8001718 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fb93 	bl	8002300 <ADC_ConversionStop_Disable>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 8099 	bne.w	8001d1e <HAL_ADC_Init+0x18e>
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 8095 	bne.w	8001d1e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bfc:	f023 0302 	bic.w	r3, r3, #2
 8001c00:	f043 0202 	orr.w	r2, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c10:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7b1b      	ldrb	r3, [r3, #12]
 8001c16:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c18:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c28:	d003      	beq.n	8001c32 <HAL_ADC_Init+0xa2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d102      	bne.n	8001c38 <HAL_ADC_Init+0xa8>
 8001c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c36:	e000      	b.n	8001c3a <HAL_ADC_Init+0xaa>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7d1b      	ldrb	r3, [r3, #20]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d119      	bne.n	8001c7c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7b1b      	ldrb	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	035a      	lsls	r2, r3, #13
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	e00b      	b.n	8001c7c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f043 0201 	orr.w	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <HAL_ADC_Init+0x1a8>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cac:	d003      	beq.n	8001cb6 <HAL_ADC_Init+0x126>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d104      	bne.n	8001cc0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	051b      	lsls	r3, r3, #20
 8001cbe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_ADC_Init+0x1ac>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d10b      	bne.n	8001cfc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	f023 0303 	bic.w	r3, r3, #3
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cfa:	e018      	b.n	8001d2e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	f023 0312 	bic.w	r3, r3, #18
 8001d04:	f043 0210 	orr.w	r2, r3, #16
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d1c:	e007      	b.n	8001d2e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	f043 0210 	orr.w	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	ffe1f7fd 	.word	0xffe1f7fd
 8001d3c:	ff1f0efe 	.word	0xff1f0efe

08001d40 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_Start_IT+0x1a>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e0a0      	b.n	8001e9c <HAL_ADC_Start_IT+0x15c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa72 	bl	800224c <ADC_Enable>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 808f 	bne.w	8001e92 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a45      	ldr	r2, [pc, #276]	; (8001ea4 <HAL_ADC_Start_IT+0x164>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d105      	bne.n	8001d9e <HAL_ADC_Start_IT+0x5e>
 8001d92:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <HAL_ADC_Start_IT+0x168>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d115      	bne.n	8001dca <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d026      	beq.n	8001e06 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dc8:	e01d      	b.n	8001e06 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a33      	ldr	r2, [pc, #204]	; (8001ea8 <HAL_ADC_Start_IT+0x168>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d004      	beq.n	8001dea <HAL_ADC_Start_IT+0xaa>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <HAL_ADC_Start_IT+0x164>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d10d      	bne.n	8001e06 <HAL_ADC_Start_IT+0xc6>
 8001dea:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <HAL_ADC_Start_IT+0x168>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	f023 0206 	bic.w	r2, r3, #6
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e1e:	e002      	b.n	8001e26 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0202 	mvn.w	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e52:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e56:	d113      	bne.n	8001e80 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e5c:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_ADC_Start_IT+0x164>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d105      	bne.n	8001e6e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_ADC_Start_IT+0x168>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d108      	bne.n	8001e80 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	e00c      	b.n	8001e9a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e003      	b.n	8001e9a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40012800 	.word	0x40012800
 8001ea8:	40012400 	.word	0x40012400

08001eac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d140      	bne.n	8001f5c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d139      	bne.n	8001f5c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f0e:	d11d      	bne.n	8001f4c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d119      	bne.n	8001f4c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0220 	bic.w	r2, r2, #32
 8001f26:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fba7 	bl	80016a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f06f 0212 	mvn.w	r2, #18
 8001f5a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f66:	2b80      	cmp	r3, #128	; 0x80
 8001f68:	d14f      	bne.n	800200a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d148      	bne.n	800200a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f9a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001f9e:	d012      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d125      	bne.n	8001ffa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fb8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fbc:	d11d      	bne.n	8001ffa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d119      	bne.n	8001ffa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d105      	bne.n	8001ffa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f9c1 	bl	8002382 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 020c 	mvn.w	r2, #12
 8002008:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	d114      	bne.n	8002042 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d10d      	bne.n	8002042 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f809 	bl	800204a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0201 	mvn.w	r2, #1
 8002040:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x20>
 8002078:	2302      	movs	r3, #2
 800207a:	e0dc      	b.n	8002236 <HAL_ADC_ConfigChannel+0x1da>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b06      	cmp	r3, #6
 800208a:	d81c      	bhi.n	80020c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	3b05      	subs	r3, #5
 800209e:	221f      	movs	r2, #31
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	4019      	ands	r1, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b05      	subs	r3, #5
 80020b8:	fa00 f203 	lsl.w	r2, r0, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	635a      	str	r2, [r3, #52]	; 0x34
 80020c4:	e03c      	b.n	8002140 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d81c      	bhi.n	8002108 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	3b23      	subs	r3, #35	; 0x23
 80020e0:	221f      	movs	r2, #31
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	4019      	ands	r1, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b23      	subs	r3, #35	; 0x23
 80020fa:	fa00 f203 	lsl.w	r2, r0, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
 8002106:	e01b      	b.n	8002140 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b41      	subs	r3, #65	; 0x41
 800211a:	221f      	movs	r2, #31
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	4019      	ands	r1, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b41      	subs	r3, #65	; 0x41
 8002134:	fa00 f203 	lsl.w	r2, r0, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b09      	cmp	r3, #9
 8002146:	d91c      	bls.n	8002182 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68d9      	ldr	r1, [r3, #12]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	3b1e      	subs	r3, #30
 800215a:	2207      	movs	r2, #7
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	4019      	ands	r1, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6898      	ldr	r0, [r3, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	3b1e      	subs	r3, #30
 8002174:	fa00 f203 	lsl.w	r2, r0, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	e019      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6919      	ldr	r1, [r3, #16]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	2207      	movs	r2, #7
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	4019      	ands	r1, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6898      	ldr	r0, [r3, #8]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	fa00 f203 	lsl.w	r2, r0, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d003      	beq.n	80021c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021c2:	2b11      	cmp	r3, #17
 80021c4:	d132      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_ADC_ConfigChannel+0x1e4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d125      	bne.n	800221c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d126      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d11a      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HAL_ADC_ConfigChannel+0x1e8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a13      	ldr	r2, [pc, #76]	; (8002248 <HAL_ADC_ConfigChannel+0x1ec>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9a      	lsrs	r2, r3, #18
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800220c:	e002      	b.n	8002214 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3b01      	subs	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f9      	bne.n	800220e <HAL_ADC_ConfigChannel+0x1b2>
 800221a:	e007      	b.n	800222c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40012400 	.word	0x40012400
 8002244:	20000000 	.word	0x20000000
 8002248:	431bde83 	.word	0x431bde83

0800224c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d040      	beq.n	80022ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <ADC_Enable+0xac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <ADC_Enable+0xb0>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	0c9b      	lsrs	r3, r3, #18
 8002286:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002288:	e002      	b.n	8002290 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3b01      	subs	r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f9      	bne.n	800228a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002296:	f7ff fc4d 	bl	8001b34 <HAL_GetTick>
 800229a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800229c:	e01f      	b.n	80022de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800229e:	f7ff fc49 	bl	8001b34 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d918      	bls.n	80022de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d011      	beq.n	80022de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	f043 0210 	orr.w	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e007      	b.n	80022ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d1d8      	bne.n	800229e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000000 	.word	0x20000000
 80022fc:	431bde83 	.word	0x431bde83

08002300 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d12e      	bne.n	8002378 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800232a:	f7ff fc03 	bl	8001b34 <HAL_GetTick>
 800232e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002330:	e01b      	b.n	800236a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002332:	f7ff fbff 	bl	8001b34 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d914      	bls.n	800236a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b01      	cmp	r3, #1
 800234c:	d10d      	bne.n	800236a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	f043 0210 	orr.w	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e007      	b.n	800237a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d0dc      	beq.n	8002332 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b0:	4013      	ands	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c6:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	60d3      	str	r3, [r2, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <__NVIC_GetPriorityGrouping+0x18>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	f003 0307 	and.w	r3, r3, #7
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	2b00      	cmp	r3, #0
 8002408:	db0b      	blt.n	8002422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f003 021f 	and.w	r2, r3, #31
 8002410:	4906      	ldr	r1, [pc, #24]	; (800242c <__NVIC_EnableIRQ+0x34>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	2001      	movs	r0, #1
 800241a:	fa00 f202 	lsl.w	r2, r0, r2
 800241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	; (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
         );
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f8:	d301      	bcc.n	80024fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00f      	b.n	800251e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <SysTick_Config+0x40>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002506:	210f      	movs	r1, #15
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f7ff ff90 	bl	8002430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <SysTick_Config+0x40>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <SysTick_Config+0x40>)
 8002518:	2207      	movs	r2, #7
 800251a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff2d 	bl	8002394 <__NVIC_SetPriorityGrouping>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002554:	f7ff ff42 	bl	80023dc <__NVIC_GetPriorityGrouping>
 8002558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff90 	bl	8002484 <NVIC_EncodePriority>
 8002564:	4602      	mov	r2, r0
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff5f 	bl	8002430 <__NVIC_SetPriority>
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff35 	bl	80023f8 <__NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ffa2 	bl	80024e8 <SysTick_Config>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b08b      	sub	sp, #44	; 0x2c
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c2:	e169      	b.n	8002898 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025c4:	2201      	movs	r2, #1
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	429a      	cmp	r2, r3
 80025de:	f040 8158 	bne.w	8002892 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a9a      	ldr	r2, [pc, #616]	; (8002850 <HAL_GPIO_Init+0x2a0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d05e      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
 80025ec:	4a98      	ldr	r2, [pc, #608]	; (8002850 <HAL_GPIO_Init+0x2a0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d875      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 80025f2:	4a98      	ldr	r2, [pc, #608]	; (8002854 <HAL_GPIO_Init+0x2a4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d058      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
 80025f8:	4a96      	ldr	r2, [pc, #600]	; (8002854 <HAL_GPIO_Init+0x2a4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d86f      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 80025fe:	4a96      	ldr	r2, [pc, #600]	; (8002858 <HAL_GPIO_Init+0x2a8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d052      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
 8002604:	4a94      	ldr	r2, [pc, #592]	; (8002858 <HAL_GPIO_Init+0x2a8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d869      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 800260a:	4a94      	ldr	r2, [pc, #592]	; (800285c <HAL_GPIO_Init+0x2ac>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d04c      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
 8002610:	4a92      	ldr	r2, [pc, #584]	; (800285c <HAL_GPIO_Init+0x2ac>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d863      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 8002616:	4a92      	ldr	r2, [pc, #584]	; (8002860 <HAL_GPIO_Init+0x2b0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d046      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
 800261c:	4a90      	ldr	r2, [pc, #576]	; (8002860 <HAL_GPIO_Init+0x2b0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d85d      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 8002622:	2b12      	cmp	r3, #18
 8002624:	d82a      	bhi.n	800267c <HAL_GPIO_Init+0xcc>
 8002626:	2b12      	cmp	r3, #18
 8002628:	d859      	bhi.n	80026de <HAL_GPIO_Init+0x12e>
 800262a:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <HAL_GPIO_Init+0x80>)
 800262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002630:	080026ab 	.word	0x080026ab
 8002634:	08002685 	.word	0x08002685
 8002638:	08002697 	.word	0x08002697
 800263c:	080026d9 	.word	0x080026d9
 8002640:	080026df 	.word	0x080026df
 8002644:	080026df 	.word	0x080026df
 8002648:	080026df 	.word	0x080026df
 800264c:	080026df 	.word	0x080026df
 8002650:	080026df 	.word	0x080026df
 8002654:	080026df 	.word	0x080026df
 8002658:	080026df 	.word	0x080026df
 800265c:	080026df 	.word	0x080026df
 8002660:	080026df 	.word	0x080026df
 8002664:	080026df 	.word	0x080026df
 8002668:	080026df 	.word	0x080026df
 800266c:	080026df 	.word	0x080026df
 8002670:	080026df 	.word	0x080026df
 8002674:	0800268d 	.word	0x0800268d
 8002678:	080026a1 	.word	0x080026a1
 800267c:	4a79      	ldr	r2, [pc, #484]	; (8002864 <HAL_GPIO_Init+0x2b4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002682:	e02c      	b.n	80026de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	623b      	str	r3, [r7, #32]
          break;
 800268a:	e029      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	3304      	adds	r3, #4
 8002692:	623b      	str	r3, [r7, #32]
          break;
 8002694:	e024      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	3308      	adds	r3, #8
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e01f      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	330c      	adds	r3, #12
 80026a6:	623b      	str	r3, [r7, #32]
          break;
 80026a8:	e01a      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d102      	bne.n	80026b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026b2:	2304      	movs	r3, #4
 80026b4:	623b      	str	r3, [r7, #32]
          break;
 80026b6:	e013      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026c0:	2308      	movs	r3, #8
 80026c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	611a      	str	r2, [r3, #16]
          break;
 80026ca:	e009      	b.n	80026e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026cc:	2308      	movs	r3, #8
 80026ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	615a      	str	r2, [r3, #20]
          break;
 80026d6:	e003      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
          break;
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x130>
          break;
 80026de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2bff      	cmp	r3, #255	; 0xff
 80026e4:	d801      	bhi.n	80026ea <HAL_GPIO_Init+0x13a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	e001      	b.n	80026ee <HAL_GPIO_Init+0x13e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2bff      	cmp	r3, #255	; 0xff
 80026f4:	d802      	bhi.n	80026fc <HAL_GPIO_Init+0x14c>
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	e002      	b.n	8002702 <HAL_GPIO_Init+0x152>
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	3b08      	subs	r3, #8
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	210f      	movs	r1, #15
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	6a39      	ldr	r1, [r7, #32]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	431a      	orrs	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80b1 	beq.w	8002892 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002730:	4b4d      	ldr	r3, [pc, #308]	; (8002868 <HAL_GPIO_Init+0x2b8>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <HAL_GPIO_Init+0x2b8>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6193      	str	r3, [r2, #24]
 800273c:	4b4a      	ldr	r3, [pc, #296]	; (8002868 <HAL_GPIO_Init+0x2b8>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002748:	4a48      	ldr	r2, [pc, #288]	; (800286c <HAL_GPIO_Init+0x2bc>)
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4013      	ands	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a40      	ldr	r2, [pc, #256]	; (8002870 <HAL_GPIO_Init+0x2c0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_GPIO_Init+0x1ec>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3f      	ldr	r2, [pc, #252]	; (8002874 <HAL_GPIO_Init+0x2c4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00d      	beq.n	8002798 <HAL_GPIO_Init+0x1e8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a3e      	ldr	r2, [pc, #248]	; (8002878 <HAL_GPIO_Init+0x2c8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d007      	beq.n	8002794 <HAL_GPIO_Init+0x1e4>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a3d      	ldr	r2, [pc, #244]	; (800287c <HAL_GPIO_Init+0x2cc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_GPIO_Init+0x1e0>
 800278c:	2303      	movs	r3, #3
 800278e:	e006      	b.n	800279e <HAL_GPIO_Init+0x1ee>
 8002790:	2304      	movs	r3, #4
 8002792:	e004      	b.n	800279e <HAL_GPIO_Init+0x1ee>
 8002794:	2302      	movs	r3, #2
 8002796:	e002      	b.n	800279e <HAL_GPIO_Init+0x1ee>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_GPIO_Init+0x1ee>
 800279c:	2300      	movs	r3, #0
 800279e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a0:	f002 0203 	and.w	r2, r2, #3
 80027a4:	0092      	lsls	r2, r2, #2
 80027a6:	4093      	lsls	r3, r2
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ae:	492f      	ldr	r1, [pc, #188]	; (800286c <HAL_GPIO_Init+0x2bc>)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	492c      	ldr	r1, [pc, #176]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027d6:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	43db      	mvns	r3, r3
 80027de:	4928      	ldr	r1, [pc, #160]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027f0:	4b23      	ldr	r3, [pc, #140]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4922      	ldr	r1, [pc, #136]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	43db      	mvns	r3, r3
 8002806:	491e      	ldr	r1, [pc, #120]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 8002808:	4013      	ands	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d006      	beq.n	8002826 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	4918      	ldr	r1, [pc, #96]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002826:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	43db      	mvns	r3, r3
 800282e:	4914      	ldr	r1, [pc, #80]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 8002830:	4013      	ands	r3, r2
 8002832:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d021      	beq.n	8002884 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_GPIO_Init+0x2d0>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	60cb      	str	r3, [r1, #12]
 800284c:	e021      	b.n	8002892 <HAL_GPIO_Init+0x2e2>
 800284e:	bf00      	nop
 8002850:	10320000 	.word	0x10320000
 8002854:	10310000 	.word	0x10310000
 8002858:	10220000 	.word	0x10220000
 800285c:	10210000 	.word	0x10210000
 8002860:	10120000 	.word	0x10120000
 8002864:	10110000 	.word	0x10110000
 8002868:	40021000 	.word	0x40021000
 800286c:	40010000 	.word	0x40010000
 8002870:	40010800 	.word	0x40010800
 8002874:	40010c00 	.word	0x40010c00
 8002878:	40011000 	.word	0x40011000
 800287c:	40011400 	.word	0x40011400
 8002880:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_GPIO_Init+0x304>)
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	43db      	mvns	r3, r3
 800288c:	4909      	ldr	r1, [pc, #36]	; (80028b4 <HAL_GPIO_Init+0x304>)
 800288e:	4013      	ands	r3, r2
 8002890:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	3301      	adds	r3, #1
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f47f ae8e 	bne.w	80025c4 <HAL_GPIO_Init+0x14>
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	372c      	adds	r7, #44	; 0x2c
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40010400 	.word	0x40010400

080028b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c8:	787b      	ldrb	r3, [r7, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028d4:	e003      	b.n	80028de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	041a      	lsls	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	041a      	lsls	r2, r3, #16
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43d9      	mvns	r1, r3
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	400b      	ands	r3, r1
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	611a      	str	r2, [r3, #16]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
	...

0800291c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e272      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8087 	beq.w	8002a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800293c:	4b92      	ldr	r3, [pc, #584]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b04      	cmp	r3, #4
 8002946:	d00c      	beq.n	8002962 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002948:	4b8f      	ldr	r3, [pc, #572]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d112      	bne.n	800297a <HAL_RCC_OscConfig+0x5e>
 8002954:	4b8c      	ldr	r3, [pc, #560]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002960:	d10b      	bne.n	800297a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002962:	4b89      	ldr	r3, [pc, #548]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d06c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x12c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d168      	bne.n	8002a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e24c      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x76>
 8002984:	4b80      	ldr	r3, [pc, #512]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7f      	ldr	r2, [pc, #508]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e02e      	b.n	80029f0 <HAL_RCC_OscConfig+0xd4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x98>
 800299a:	4b7b      	ldr	r3, [pc, #492]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a7a      	ldr	r2, [pc, #488]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b78      	ldr	r3, [pc, #480]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a77      	ldr	r2, [pc, #476]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xd4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0xbc>
 80029be:	4b72      	ldr	r3, [pc, #456]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a71      	ldr	r2, [pc, #452]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b6f      	ldr	r3, [pc, #444]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6e      	ldr	r2, [pc, #440]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xd4>
 80029d8:	4b6b      	ldr	r3, [pc, #428]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6a      	ldr	r2, [pc, #424]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b68      	ldr	r3, [pc, #416]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a67      	ldr	r2, [pc, #412]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7ff f89c 	bl	8001b34 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7ff f898 	bl	8001b34 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e200      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xe4>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff f888 	bl	8001b34 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff f884 	bl	8001b34 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1ec      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x10c>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d063      	beq.n	8002b1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a56:	4b4c      	ldr	r3, [pc, #304]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a62:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x18c>
 8002a6e:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x176>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1c0      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4939      	ldr	r1, [pc, #228]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e03a      	b.n	8002b1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCC_OscConfig+0x270>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7ff f83d 	bl	8001b34 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abe:	f7ff f839 	bl	8001b34 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1a1      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4927      	ldr	r1, [pc, #156]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e015      	b.n	8002b1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <HAL_RCC_OscConfig+0x270>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff f81c 	bl	8001b34 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b00:	f7ff f818 	bl	8001b34 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e180      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d03a      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d019      	beq.n	8002b66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <HAL_RCC_OscConfig+0x274>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b38:	f7fe fffc 	bl	8001b34 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe fff8 	bl	8001b34 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e160      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f000 faa6 	bl	80030b0 <RCC_Delay>
 8002b64:	e01c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_RCC_OscConfig+0x274>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7fe ffe2 	bl	8001b34 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b72:	e00f      	b.n	8002b94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fe ffde 	bl	8001b34 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d908      	bls.n	8002b94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e146      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	42420000 	.word	0x42420000
 8002b90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	4b92      	ldr	r3, [pc, #584]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e9      	bne.n	8002b74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80a6 	beq.w	8002cfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb2:	4b8b      	ldr	r3, [pc, #556]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	4b88      	ldr	r3, [pc, #544]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4a87      	ldr	r2, [pc, #540]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	61d3      	str	r3, [r2, #28]
 8002bca:	4b85      	ldr	r3, [pc, #532]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	4b82      	ldr	r3, [pc, #520]	; (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d118      	bne.n	8002c18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be6:	4b7f      	ldr	r3, [pc, #508]	; (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7e      	ldr	r2, [pc, #504]	; (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe ff9f 	bl	8001b34 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfa:	f7fe ff9b 	bl	8001b34 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b64      	cmp	r3, #100	; 0x64
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e103      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x312>
 8002c20:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4a6e      	ldr	r2, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6213      	str	r3, [r2, #32]
 8002c2c:	e02d      	b.n	8002c8a <HAL_RCC_OscConfig+0x36e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x334>
 8002c36:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a69      	ldr	r2, [pc, #420]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6213      	str	r3, [r2, #32]
 8002c42:	4b67      	ldr	r3, [pc, #412]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a66      	ldr	r2, [pc, #408]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	6213      	str	r3, [r2, #32]
 8002c4e:	e01c      	b.n	8002c8a <HAL_RCC_OscConfig+0x36e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d10c      	bne.n	8002c72 <HAL_RCC_OscConfig+0x356>
 8002c58:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4a60      	ldr	r2, [pc, #384]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	6213      	str	r3, [r2, #32]
 8002c64:	4b5e      	ldr	r3, [pc, #376]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a5d      	ldr	r2, [pc, #372]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	e00b      	b.n	8002c8a <HAL_RCC_OscConfig+0x36e>
 8002c72:	4b5b      	ldr	r3, [pc, #364]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4a5a      	ldr	r2, [pc, #360]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6213      	str	r3, [r2, #32]
 8002c7e:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a57      	ldr	r2, [pc, #348]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d015      	beq.n	8002cbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7fe ff4f 	bl	8001b34 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe ff4b 	bl	8001b34 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0b1      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ee      	beq.n	8002c9a <HAL_RCC_OscConfig+0x37e>
 8002cbc:	e014      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7fe ff39 	bl	8001b34 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe ff35 	bl	8001b34 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e09b      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cdc:	4b40      	ldr	r3, [pc, #256]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ee      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cee:	4b3c      	ldr	r3, [pc, #240]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4a3b      	ldr	r2, [pc, #236]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8087 	beq.w	8002e12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d04:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d061      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d146      	bne.n	8002da6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d18:	4b33      	ldr	r3, [pc, #204]	; (8002de8 <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe ff09 	bl	8001b34 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d26:	f7fe ff05 	bl	8001b34 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e06d      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4921      	ldr	r1, [pc, #132]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d60:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a19      	ldr	r1, [r3, #32]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	430b      	orrs	r3, r1
 8002d72:	491b      	ldr	r1, [pc, #108]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fed9 	bl	8001b34 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d86:	f7fe fed5 	bl	8001b34 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e03d      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x46a>
 8002da4:	e035      	b.n	8002e12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe fec2 	bl	8001b34 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fe febe 	bl	8001b34 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e026      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x498>
 8002dd2:	e01e      	b.n	8002e12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e019      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
 8002de8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_OscConfig+0x500>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000

08002e20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0d0      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d910      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 0207 	bic.w	r2, r3, #7
 8002e4a:	4965      	ldr	r1, [pc, #404]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b8      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	494d      	ldr	r1, [pc, #308]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d040      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d115      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e073      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06b      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efe:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4936      	ldr	r1, [pc, #216]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f10:	f7fe fe10 	bl	8001b34 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7fe fe0c 	bl	8001b34 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e053      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 020c 	and.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d210      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 0207 	bic.w	r2, r3, #7
 8002f56:	4922      	ldr	r1, [pc, #136]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e032      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4916      	ldr	r1, [pc, #88]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	490e      	ldr	r1, [pc, #56]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fae:	f000 f821 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	490a      	ldr	r1, [pc, #40]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc0:	5ccb      	ldrb	r3, [r1, r3]
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <HAL_RCC_ClockConfig+0x1cc>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fd6e 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	08006800 	.word	0x08006800
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	b490      	push	{r4, r7}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ffa:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ffc:	1d3c      	adds	r4, r7, #4
 8002ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003004:	f240 2301 	movw	r3, #513	; 0x201
 8003008:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800301e:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b04      	cmp	r3, #4
 800302c:	d002      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x40>
 800302e:	2b08      	cmp	r3, #8
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x46>
 8003032:	e02b      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003034:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003036:	623b      	str	r3, [r7, #32]
      break;
 8003038:	e02b      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	0c9b      	lsrs	r3, r3, #18
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3328      	adds	r3, #40	; 0x28
 8003044:	443b      	add	r3, r7
 8003046:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800304a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d012      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003056:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	0c5b      	lsrs	r3, r3, #17
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	3328      	adds	r3, #40	; 0x28
 8003062:	443b      	add	r3, r7
 8003064:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003068:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800306e:	fb03 f202 	mul.w	r2, r3, r2
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	e004      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003080:	fb02 f303 	mul.w	r3, r2, r3
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	623b      	str	r3, [r7, #32]
      break;
 800308a:	e002      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800308e:	623b      	str	r3, [r7, #32]
      break;
 8003090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003092:	6a3b      	ldr	r3, [r7, #32]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bc90      	pop	{r4, r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	080067f0 	.word	0x080067f0
 80030a4:	40021000 	.word	0x40021000
 80030a8:	007a1200 	.word	0x007a1200
 80030ac:	003d0900 	.word	0x003d0900

080030b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <RCC_Delay+0x34>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <RCC_Delay+0x38>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0a5b      	lsrs	r3, r3, #9
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030cc:	bf00      	nop
  }
  while (Delay --);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1e5a      	subs	r2, r3, #1
 80030d2:	60fa      	str	r2, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f9      	bne.n	80030cc <RCC_Delay+0x1c>
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	20000000 	.word	0x20000000
 80030e8:	10624dd3 	.word	0x10624dd3

080030ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d07d      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003108:	2300      	movs	r3, #0
 800310a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310c:	4b4f      	ldr	r3, [pc, #316]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10d      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003118:	4b4c      	ldr	r3, [pc, #304]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	4a4b      	ldr	r2, [pc, #300]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	61d3      	str	r3, [r2, #28]
 8003124:	4b49      	ldr	r3, [pc, #292]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d118      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a42      	ldr	r2, [pc, #264]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314c:	f7fe fcf2 	bl	8001b34 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003152:	e008      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003154:	f7fe fcee 	bl	8001b34 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e06d      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d02e      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d027      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003190:	4b2e      	ldr	r3, [pc, #184]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003198:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800319a:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031a6:	4a29      	ldr	r2, [pc, #164]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d014      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b6:	f7fe fcbd 	bl	8001b34 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7fe fcb9 	bl	8001b34 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e036      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ee      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4917      	ldr	r1, [pc, #92]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	4a13      	ldr	r2, [pc, #76]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003202:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	490b      	ldr	r1, [pc, #44]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4904      	ldr	r1, [pc, #16]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
 8003254:	42420440 	.word	0x42420440

08003258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e041      	b.n	80032ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fa8e 	bl	80017a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f000 fa1e 	bl	80036d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d122      	bne.n	8003352 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d11b      	bne.n	8003352 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0202 	mvn.w	r2, #2
 8003322:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f9b1 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 800333e:	e005      	b.n	800334c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f9a4 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f9b3 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d122      	bne.n	80033a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d11b      	bne.n	80033a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f06f 0204 	mvn.w	r2, #4
 8003376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f987 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8003392:	e005      	b.n	80033a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f97a 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f989 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d122      	bne.n	80033fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11b      	bne.n	80033fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f06f 0208 	mvn.w	r2, #8
 80033ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2204      	movs	r2, #4
 80033d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f95d 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 80033e6:	e005      	b.n	80033f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f950 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f95f 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b10      	cmp	r3, #16
 8003406:	d122      	bne.n	800344e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b10      	cmp	r3, #16
 8003414:	d11b      	bne.n	800344e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f06f 0210 	mvn.w	r2, #16
 800341e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2208      	movs	r2, #8
 8003424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f933 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 800343a:	e005      	b.n	8003448 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f926 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f935 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10e      	bne.n	800347a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f06f 0201 	mvn.w	r2, #1
 8003472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fe f8f3 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d10e      	bne.n	80034a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d107      	bne.n	80034a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800349e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa78 	bl	8003996 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d10e      	bne.n	80034d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d107      	bne.n	80034d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f8f9 	bl	80036c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d10e      	bne.n	80034fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d107      	bne.n	80034fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f06f 0220 	mvn.w	r2, #32
 80034f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa43 	bl	8003984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_TIM_ConfigClockSource+0x18>
 800351a:	2302      	movs	r3, #2
 800351c:	e0b3      	b.n	8003686 <HAL_TIM_ConfigClockSource+0x180>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800353c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003544:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003556:	d03e      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0xd0>
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355c:	f200 8087 	bhi.w	800366e <HAL_TIM_ConfigClockSource+0x168>
 8003560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003564:	f000 8085 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x16c>
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d87f      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x168>
 800356e:	2b70      	cmp	r3, #112	; 0x70
 8003570:	d01a      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0xa2>
 8003572:	2b70      	cmp	r3, #112	; 0x70
 8003574:	d87b      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x168>
 8003576:	2b60      	cmp	r3, #96	; 0x60
 8003578:	d050      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x116>
 800357a:	2b60      	cmp	r3, #96	; 0x60
 800357c:	d877      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x168>
 800357e:	2b50      	cmp	r3, #80	; 0x50
 8003580:	d03c      	beq.n	80035fc <HAL_TIM_ConfigClockSource+0xf6>
 8003582:	2b50      	cmp	r3, #80	; 0x50
 8003584:	d873      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x168>
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d058      	beq.n	800363c <HAL_TIM_ConfigClockSource+0x136>
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d86f      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x168>
 800358e:	2b30      	cmp	r3, #48	; 0x30
 8003590:	d064      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x156>
 8003592:	2b30      	cmp	r3, #48	; 0x30
 8003594:	d86b      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x168>
 8003596:	2b20      	cmp	r3, #32
 8003598:	d060      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x156>
 800359a:	2b20      	cmp	r3, #32
 800359c:	d867      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x168>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d05c      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x156>
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d05a      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035a6:	e062      	b.n	800366e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f000 f967 	bl	800388a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	609a      	str	r2, [r3, #8]
      break;
 80035d4:	e04e      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6899      	ldr	r1, [r3, #8]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f000 f950 	bl	800388a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f8:	609a      	str	r2, [r3, #8]
      break;
 80035fa:	e03b      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	461a      	mov	r2, r3
 800360a:	f000 f8c7 	bl	800379c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2150      	movs	r1, #80	; 0x50
 8003614:	4618      	mov	r0, r3
 8003616:	f000 f91e 	bl	8003856 <TIM_ITRx_SetConfig>
      break;
 800361a:	e02b      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	461a      	mov	r2, r3
 800362a:	f000 f8e5 	bl	80037f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2160      	movs	r1, #96	; 0x60
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f90e 	bl	8003856 <TIM_ITRx_SetConfig>
      break;
 800363a:	e01b      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	461a      	mov	r2, r3
 800364a:	f000 f8a7 	bl	800379c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2140      	movs	r1, #64	; 0x40
 8003654:	4618      	mov	r0, r3
 8003656:	f000 f8fe 	bl	8003856 <TIM_ITRx_SetConfig>
      break;
 800365a:	e00b      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f000 f8f5 	bl	8003856 <TIM_ITRx_SetConfig>
        break;
 800366c:	e002      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
	...

080036d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a29      	ldr	r2, [pc, #164]	; (8003790 <TIM_Base_SetConfig+0xb8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00b      	beq.n	8003708 <TIM_Base_SetConfig+0x30>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f6:	d007      	beq.n	8003708 <TIM_Base_SetConfig+0x30>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a26      	ldr	r2, [pc, #152]	; (8003794 <TIM_Base_SetConfig+0xbc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d003      	beq.n	8003708 <TIM_Base_SetConfig+0x30>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a25      	ldr	r2, [pc, #148]	; (8003798 <TIM_Base_SetConfig+0xc0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d108      	bne.n	800371a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <TIM_Base_SetConfig+0xb8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <TIM_Base_SetConfig+0x62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003728:	d007      	beq.n	800373a <TIM_Base_SetConfig+0x62>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <TIM_Base_SetConfig+0xbc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_Base_SetConfig+0x62>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a18      	ldr	r2, [pc, #96]	; (8003798 <TIM_Base_SetConfig+0xc0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d108      	bne.n	800374c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a07      	ldr	r2, [pc, #28]	; (8003790 <TIM_Base_SetConfig+0xb8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d103      	bne.n	8003780 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	615a      	str	r2, [r3, #20]
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800

0800379c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f023 0201 	bic.w	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f023 030a 	bic.w	r3, r3, #10
 80037d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f023 0210 	bic.w	r2, r3, #16
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003822:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	031b      	lsls	r3, r3, #12
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	621a      	str	r2, [r3, #32]
}
 800384c:	bf00      	nop
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003856:	b480      	push	{r7}
 8003858:	b085      	sub	sp, #20
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	f043 0307 	orr.w	r3, r3, #7
 8003878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	609a      	str	r2, [r3, #8]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800388a:	b480      	push	{r7}
 800388c:	b087      	sub	sp, #28
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	021a      	lsls	r2, r3, #8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	609a      	str	r2, [r3, #8]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038dc:	2302      	movs	r3, #2
 80038de:	e046      	b.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a16      	ldr	r2, [pc, #88]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d009      	beq.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a12      	ldr	r2, [pc, #72]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a10      	ldr	r2, [pc, #64]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10c      	bne.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4313      	orrs	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800

08003984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <__errno>:
 80039a8:	4b01      	ldr	r3, [pc, #4]	; (80039b0 <__errno+0x8>)
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	2000000c 	.word	0x2000000c

080039b4 <__libc_init_array>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	2600      	movs	r6, #0
 80039b8:	4d0c      	ldr	r5, [pc, #48]	; (80039ec <__libc_init_array+0x38>)
 80039ba:	4c0d      	ldr	r4, [pc, #52]	; (80039f0 <__libc_init_array+0x3c>)
 80039bc:	1b64      	subs	r4, r4, r5
 80039be:	10a4      	asrs	r4, r4, #2
 80039c0:	42a6      	cmp	r6, r4
 80039c2:	d109      	bne.n	80039d8 <__libc_init_array+0x24>
 80039c4:	f002 fefc 	bl	80067c0 <_init>
 80039c8:	2600      	movs	r6, #0
 80039ca:	4d0a      	ldr	r5, [pc, #40]	; (80039f4 <__libc_init_array+0x40>)
 80039cc:	4c0a      	ldr	r4, [pc, #40]	; (80039f8 <__libc_init_array+0x44>)
 80039ce:	1b64      	subs	r4, r4, r5
 80039d0:	10a4      	asrs	r4, r4, #2
 80039d2:	42a6      	cmp	r6, r4
 80039d4:	d105      	bne.n	80039e2 <__libc_init_array+0x2e>
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039dc:	4798      	blx	r3
 80039de:	3601      	adds	r6, #1
 80039e0:	e7ee      	b.n	80039c0 <__libc_init_array+0xc>
 80039e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e6:	4798      	blx	r3
 80039e8:	3601      	adds	r6, #1
 80039ea:	e7f2      	b.n	80039d2 <__libc_init_array+0x1e>
 80039ec:	08006bec 	.word	0x08006bec
 80039f0:	08006bec 	.word	0x08006bec
 80039f4:	08006bec 	.word	0x08006bec
 80039f8:	08006bf0 	.word	0x08006bf0

080039fc <memset>:
 80039fc:	4603      	mov	r3, r0
 80039fe:	4402      	add	r2, r0
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d100      	bne.n	8003a06 <memset+0xa>
 8003a04:	4770      	bx	lr
 8003a06:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0a:	e7f9      	b.n	8003a00 <memset+0x4>

08003a0c <__cvt>:
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a12:	461f      	mov	r7, r3
 8003a14:	bfbb      	ittet	lt
 8003a16:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003a1a:	461f      	movlt	r7, r3
 8003a1c:	2300      	movge	r3, #0
 8003a1e:	232d      	movlt	r3, #45	; 0x2d
 8003a20:	b088      	sub	sp, #32
 8003a22:	4614      	mov	r4, r2
 8003a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003a26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003a28:	7013      	strb	r3, [r2, #0]
 8003a2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a2c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003a30:	f023 0820 	bic.w	r8, r3, #32
 8003a34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a38:	d005      	beq.n	8003a46 <__cvt+0x3a>
 8003a3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a3e:	d100      	bne.n	8003a42 <__cvt+0x36>
 8003a40:	3501      	adds	r5, #1
 8003a42:	2302      	movs	r3, #2
 8003a44:	e000      	b.n	8003a48 <__cvt+0x3c>
 8003a46:	2303      	movs	r3, #3
 8003a48:	aa07      	add	r2, sp, #28
 8003a4a:	9204      	str	r2, [sp, #16]
 8003a4c:	aa06      	add	r2, sp, #24
 8003a4e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a52:	e9cd 3500 	strd	r3, r5, [sp]
 8003a56:	4622      	mov	r2, r4
 8003a58:	463b      	mov	r3, r7
 8003a5a:	f000 fce5 	bl	8004428 <_dtoa_r>
 8003a5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a62:	4606      	mov	r6, r0
 8003a64:	d102      	bne.n	8003a6c <__cvt+0x60>
 8003a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a68:	07db      	lsls	r3, r3, #31
 8003a6a:	d522      	bpl.n	8003ab2 <__cvt+0xa6>
 8003a6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a70:	eb06 0905 	add.w	r9, r6, r5
 8003a74:	d110      	bne.n	8003a98 <__cvt+0x8c>
 8003a76:	7833      	ldrb	r3, [r6, #0]
 8003a78:	2b30      	cmp	r3, #48	; 0x30
 8003a7a:	d10a      	bne.n	8003a92 <__cvt+0x86>
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2300      	movs	r3, #0
 8003a80:	4620      	mov	r0, r4
 8003a82:	4639      	mov	r1, r7
 8003a84:	f7fc ff90 	bl	80009a8 <__aeabi_dcmpeq>
 8003a88:	b918      	cbnz	r0, 8003a92 <__cvt+0x86>
 8003a8a:	f1c5 0501 	rsb	r5, r5, #1
 8003a8e:	f8ca 5000 	str.w	r5, [sl]
 8003a92:	f8da 3000 	ldr.w	r3, [sl]
 8003a96:	4499      	add	r9, r3
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	4639      	mov	r1, r7
 8003aa0:	f7fc ff82 	bl	80009a8 <__aeabi_dcmpeq>
 8003aa4:	b108      	cbz	r0, 8003aaa <__cvt+0x9e>
 8003aa6:	f8cd 901c 	str.w	r9, [sp, #28]
 8003aaa:	2230      	movs	r2, #48	; 0x30
 8003aac:	9b07      	ldr	r3, [sp, #28]
 8003aae:	454b      	cmp	r3, r9
 8003ab0:	d307      	bcc.n	8003ac2 <__cvt+0xb6>
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	9b07      	ldr	r3, [sp, #28]
 8003ab6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003ab8:	1b9b      	subs	r3, r3, r6
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	b008      	add	sp, #32
 8003abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac2:	1c59      	adds	r1, r3, #1
 8003ac4:	9107      	str	r1, [sp, #28]
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	e7f0      	b.n	8003aac <__cvt+0xa0>

08003aca <__exponent>:
 8003aca:	4603      	mov	r3, r0
 8003acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ace:	2900      	cmp	r1, #0
 8003ad0:	f803 2b02 	strb.w	r2, [r3], #2
 8003ad4:	bfb6      	itet	lt
 8003ad6:	222d      	movlt	r2, #45	; 0x2d
 8003ad8:	222b      	movge	r2, #43	; 0x2b
 8003ada:	4249      	neglt	r1, r1
 8003adc:	2909      	cmp	r1, #9
 8003ade:	7042      	strb	r2, [r0, #1]
 8003ae0:	dd2b      	ble.n	8003b3a <__exponent+0x70>
 8003ae2:	f10d 0407 	add.w	r4, sp, #7
 8003ae6:	46a4      	mov	ip, r4
 8003ae8:	270a      	movs	r7, #10
 8003aea:	fb91 f6f7 	sdiv	r6, r1, r7
 8003aee:	460a      	mov	r2, r1
 8003af0:	46a6      	mov	lr, r4
 8003af2:	fb07 1516 	mls	r5, r7, r6, r1
 8003af6:	2a63      	cmp	r2, #99	; 0x63
 8003af8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003afc:	4631      	mov	r1, r6
 8003afe:	f104 34ff 	add.w	r4, r4, #4294967295
 8003b02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003b06:	dcf0      	bgt.n	8003aea <__exponent+0x20>
 8003b08:	3130      	adds	r1, #48	; 0x30
 8003b0a:	f1ae 0502 	sub.w	r5, lr, #2
 8003b0e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003b12:	4629      	mov	r1, r5
 8003b14:	1c44      	adds	r4, r0, #1
 8003b16:	4561      	cmp	r1, ip
 8003b18:	d30a      	bcc.n	8003b30 <__exponent+0x66>
 8003b1a:	f10d 0209 	add.w	r2, sp, #9
 8003b1e:	eba2 020e 	sub.w	r2, r2, lr
 8003b22:	4565      	cmp	r5, ip
 8003b24:	bf88      	it	hi
 8003b26:	2200      	movhi	r2, #0
 8003b28:	4413      	add	r3, r2
 8003b2a:	1a18      	subs	r0, r3, r0
 8003b2c:	b003      	add	sp, #12
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b34:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003b38:	e7ed      	b.n	8003b16 <__exponent+0x4c>
 8003b3a:	2330      	movs	r3, #48	; 0x30
 8003b3c:	3130      	adds	r1, #48	; 0x30
 8003b3e:	7083      	strb	r3, [r0, #2]
 8003b40:	70c1      	strb	r1, [r0, #3]
 8003b42:	1d03      	adds	r3, r0, #4
 8003b44:	e7f1      	b.n	8003b2a <__exponent+0x60>
	...

08003b48 <_printf_float>:
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	b091      	sub	sp, #68	; 0x44
 8003b4e:	460c      	mov	r4, r1
 8003b50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003b54:	4616      	mov	r6, r2
 8003b56:	461f      	mov	r7, r3
 8003b58:	4605      	mov	r5, r0
 8003b5a:	f001 fa53 	bl	8005004 <_localeconv_r>
 8003b5e:	6803      	ldr	r3, [r0, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	9309      	str	r3, [sp, #36]	; 0x24
 8003b64:	f7fc faf4 	bl	8000150 <strlen>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	930e      	str	r3, [sp, #56]	; 0x38
 8003b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b70:	900a      	str	r0, [sp, #40]	; 0x28
 8003b72:	3307      	adds	r3, #7
 8003b74:	f023 0307 	bic.w	r3, r3, #7
 8003b78:	f103 0208 	add.w	r2, r3, #8
 8003b7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003b80:	f8d4 b000 	ldr.w	fp, [r4]
 8003b84:	f8c8 2000 	str.w	r2, [r8]
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003b90:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003b94:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	4b9c      	ldr	r3, [pc, #624]	; (8003e14 <_printf_float+0x2cc>)
 8003ba2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ba4:	f7fc ff32 	bl	8000a0c <__aeabi_dcmpun>
 8003ba8:	bb70      	cbnz	r0, 8003c08 <_printf_float+0xc0>
 8003baa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bae:	4640      	mov	r0, r8
 8003bb0:	4b98      	ldr	r3, [pc, #608]	; (8003e14 <_printf_float+0x2cc>)
 8003bb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bb4:	f7fc ff0c 	bl	80009d0 <__aeabi_dcmple>
 8003bb8:	bb30      	cbnz	r0, 8003c08 <_printf_float+0xc0>
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	4651      	mov	r1, sl
 8003bc2:	f7fc fefb 	bl	80009bc <__aeabi_dcmplt>
 8003bc6:	b110      	cbz	r0, 8003bce <_printf_float+0x86>
 8003bc8:	232d      	movs	r3, #45	; 0x2d
 8003bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bce:	4b92      	ldr	r3, [pc, #584]	; (8003e18 <_printf_float+0x2d0>)
 8003bd0:	4892      	ldr	r0, [pc, #584]	; (8003e1c <_printf_float+0x2d4>)
 8003bd2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003bd6:	bf94      	ite	ls
 8003bd8:	4698      	movls	r8, r3
 8003bda:	4680      	movhi	r8, r0
 8003bdc:	2303      	movs	r3, #3
 8003bde:	f04f 0a00 	mov.w	sl, #0
 8003be2:	6123      	str	r3, [r4, #16]
 8003be4:	f02b 0304 	bic.w	r3, fp, #4
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	4633      	mov	r3, r6
 8003bec:	4621      	mov	r1, r4
 8003bee:	4628      	mov	r0, r5
 8003bf0:	9700      	str	r7, [sp, #0]
 8003bf2:	aa0f      	add	r2, sp, #60	; 0x3c
 8003bf4:	f000 f9d4 	bl	8003fa0 <_printf_common>
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	f040 8090 	bne.w	8003d1e <_printf_float+0x1d6>
 8003bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003c02:	b011      	add	sp, #68	; 0x44
 8003c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c08:	4642      	mov	r2, r8
 8003c0a:	4653      	mov	r3, sl
 8003c0c:	4640      	mov	r0, r8
 8003c0e:	4651      	mov	r1, sl
 8003c10:	f7fc fefc 	bl	8000a0c <__aeabi_dcmpun>
 8003c14:	b148      	cbz	r0, 8003c2a <_printf_float+0xe2>
 8003c16:	f1ba 0f00 	cmp.w	sl, #0
 8003c1a:	bfb8      	it	lt
 8003c1c:	232d      	movlt	r3, #45	; 0x2d
 8003c1e:	4880      	ldr	r0, [pc, #512]	; (8003e20 <_printf_float+0x2d8>)
 8003c20:	bfb8      	it	lt
 8003c22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c26:	4b7f      	ldr	r3, [pc, #508]	; (8003e24 <_printf_float+0x2dc>)
 8003c28:	e7d3      	b.n	8003bd2 <_printf_float+0x8a>
 8003c2a:	6863      	ldr	r3, [r4, #4]
 8003c2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	d142      	bne.n	8003cba <_printf_float+0x172>
 8003c34:	2306      	movs	r3, #6
 8003c36:	6063      	str	r3, [r4, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	9206      	str	r2, [sp, #24]
 8003c3c:	aa0e      	add	r2, sp, #56	; 0x38
 8003c3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003c42:	aa0d      	add	r2, sp, #52	; 0x34
 8003c44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003c48:	9203      	str	r2, [sp, #12]
 8003c4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003c4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c52:	6023      	str	r3, [r4, #0]
 8003c54:	6863      	ldr	r3, [r4, #4]
 8003c56:	4642      	mov	r2, r8
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	4653      	mov	r3, sl
 8003c5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c60:	f7ff fed4 	bl	8003a0c <__cvt>
 8003c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c66:	4680      	mov	r8, r0
 8003c68:	2947      	cmp	r1, #71	; 0x47
 8003c6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c6c:	d108      	bne.n	8003c80 <_printf_float+0x138>
 8003c6e:	1cc8      	adds	r0, r1, #3
 8003c70:	db02      	blt.n	8003c78 <_printf_float+0x130>
 8003c72:	6863      	ldr	r3, [r4, #4]
 8003c74:	4299      	cmp	r1, r3
 8003c76:	dd40      	ble.n	8003cfa <_printf_float+0x1b2>
 8003c78:	f1a9 0902 	sub.w	r9, r9, #2
 8003c7c:	fa5f f989 	uxtb.w	r9, r9
 8003c80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c84:	d81f      	bhi.n	8003cc6 <_printf_float+0x17e>
 8003c86:	464a      	mov	r2, r9
 8003c88:	3901      	subs	r1, #1
 8003c8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003c8e:	910d      	str	r1, [sp, #52]	; 0x34
 8003c90:	f7ff ff1b 	bl	8003aca <__exponent>
 8003c94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c96:	4682      	mov	sl, r0
 8003c98:	1813      	adds	r3, r2, r0
 8003c9a:	2a01      	cmp	r2, #1
 8003c9c:	6123      	str	r3, [r4, #16]
 8003c9e:	dc02      	bgt.n	8003ca6 <_printf_float+0x15e>
 8003ca0:	6822      	ldr	r2, [r4, #0]
 8003ca2:	07d2      	lsls	r2, r2, #31
 8003ca4:	d501      	bpl.n	8003caa <_printf_float+0x162>
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	6123      	str	r3, [r4, #16]
 8003caa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d09b      	beq.n	8003bea <_printf_float+0xa2>
 8003cb2:	232d      	movs	r3, #45	; 0x2d
 8003cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb8:	e797      	b.n	8003bea <_printf_float+0xa2>
 8003cba:	2947      	cmp	r1, #71	; 0x47
 8003cbc:	d1bc      	bne.n	8003c38 <_printf_float+0xf0>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1ba      	bne.n	8003c38 <_printf_float+0xf0>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e7b7      	b.n	8003c36 <_printf_float+0xee>
 8003cc6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003cca:	d118      	bne.n	8003cfe <_printf_float+0x1b6>
 8003ccc:	2900      	cmp	r1, #0
 8003cce:	6863      	ldr	r3, [r4, #4]
 8003cd0:	dd0b      	ble.n	8003cea <_printf_float+0x1a2>
 8003cd2:	6121      	str	r1, [r4, #16]
 8003cd4:	b913      	cbnz	r3, 8003cdc <_printf_float+0x194>
 8003cd6:	6822      	ldr	r2, [r4, #0]
 8003cd8:	07d0      	lsls	r0, r2, #31
 8003cda:	d502      	bpl.n	8003ce2 <_printf_float+0x19a>
 8003cdc:	3301      	adds	r3, #1
 8003cde:	440b      	add	r3, r1
 8003ce0:	6123      	str	r3, [r4, #16]
 8003ce2:	f04f 0a00 	mov.w	sl, #0
 8003ce6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ce8:	e7df      	b.n	8003caa <_printf_float+0x162>
 8003cea:	b913      	cbnz	r3, 8003cf2 <_printf_float+0x1aa>
 8003cec:	6822      	ldr	r2, [r4, #0]
 8003cee:	07d2      	lsls	r2, r2, #31
 8003cf0:	d501      	bpl.n	8003cf6 <_printf_float+0x1ae>
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	e7f4      	b.n	8003ce0 <_printf_float+0x198>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e7f2      	b.n	8003ce0 <_printf_float+0x198>
 8003cfa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d00:	4299      	cmp	r1, r3
 8003d02:	db05      	blt.n	8003d10 <_printf_float+0x1c8>
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	6121      	str	r1, [r4, #16]
 8003d08:	07d8      	lsls	r0, r3, #31
 8003d0a:	d5ea      	bpl.n	8003ce2 <_printf_float+0x19a>
 8003d0c:	1c4b      	adds	r3, r1, #1
 8003d0e:	e7e7      	b.n	8003ce0 <_printf_float+0x198>
 8003d10:	2900      	cmp	r1, #0
 8003d12:	bfcc      	ite	gt
 8003d14:	2201      	movgt	r2, #1
 8003d16:	f1c1 0202 	rsble	r2, r1, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	e7e0      	b.n	8003ce0 <_printf_float+0x198>
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	055a      	lsls	r2, r3, #21
 8003d22:	d407      	bmi.n	8003d34 <_printf_float+0x1ec>
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	4642      	mov	r2, r8
 8003d28:	4631      	mov	r1, r6
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	47b8      	blx	r7
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d12b      	bne.n	8003d8a <_printf_float+0x242>
 8003d32:	e764      	b.n	8003bfe <_printf_float+0xb6>
 8003d34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d38:	f240 80dd 	bls.w	8003ef6 <_printf_float+0x3ae>
 8003d3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d40:	2200      	movs	r2, #0
 8003d42:	2300      	movs	r3, #0
 8003d44:	f7fc fe30 	bl	80009a8 <__aeabi_dcmpeq>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d033      	beq.n	8003db4 <_printf_float+0x26c>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4631      	mov	r1, r6
 8003d50:	4628      	mov	r0, r5
 8003d52:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <_printf_float+0x2e0>)
 8003d54:	47b8      	blx	r7
 8003d56:	3001      	adds	r0, #1
 8003d58:	f43f af51 	beq.w	8003bfe <_printf_float+0xb6>
 8003d5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d60:	429a      	cmp	r2, r3
 8003d62:	db02      	blt.n	8003d6a <_printf_float+0x222>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	07d8      	lsls	r0, r3, #31
 8003d68:	d50f      	bpl.n	8003d8a <_printf_float+0x242>
 8003d6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4628      	mov	r0, r5
 8003d72:	47b8      	blx	r7
 8003d74:	3001      	adds	r0, #1
 8003d76:	f43f af42 	beq.w	8003bfe <_printf_float+0xb6>
 8003d7a:	f04f 0800 	mov.w	r8, #0
 8003d7e:	f104 091a 	add.w	r9, r4, #26
 8003d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d84:	3b01      	subs	r3, #1
 8003d86:	4543      	cmp	r3, r8
 8003d88:	dc09      	bgt.n	8003d9e <_printf_float+0x256>
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	079b      	lsls	r3, r3, #30
 8003d8e:	f100 8102 	bmi.w	8003f96 <_printf_float+0x44e>
 8003d92:	68e0      	ldr	r0, [r4, #12]
 8003d94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d96:	4298      	cmp	r0, r3
 8003d98:	bfb8      	it	lt
 8003d9a:	4618      	movlt	r0, r3
 8003d9c:	e731      	b.n	8003c02 <_printf_float+0xba>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	464a      	mov	r2, r9
 8003da2:	4631      	mov	r1, r6
 8003da4:	4628      	mov	r0, r5
 8003da6:	47b8      	blx	r7
 8003da8:	3001      	adds	r0, #1
 8003daa:	f43f af28 	beq.w	8003bfe <_printf_float+0xb6>
 8003dae:	f108 0801 	add.w	r8, r8, #1
 8003db2:	e7e6      	b.n	8003d82 <_printf_float+0x23a>
 8003db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	dc38      	bgt.n	8003e2c <_printf_float+0x2e4>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4631      	mov	r1, r6
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <_printf_float+0x2e0>)
 8003dc2:	47b8      	blx	r7
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	f43f af1a 	beq.w	8003bfe <_printf_float+0xb6>
 8003dca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	d102      	bne.n	8003dd8 <_printf_float+0x290>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	07d9      	lsls	r1, r3, #31
 8003dd6:	d5d8      	bpl.n	8003d8a <_printf_float+0x242>
 8003dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ddc:	4631      	mov	r1, r6
 8003dde:	4628      	mov	r0, r5
 8003de0:	47b8      	blx	r7
 8003de2:	3001      	adds	r0, #1
 8003de4:	f43f af0b 	beq.w	8003bfe <_printf_float+0xb6>
 8003de8:	f04f 0900 	mov.w	r9, #0
 8003dec:	f104 0a1a 	add.w	sl, r4, #26
 8003df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003df2:	425b      	negs	r3, r3
 8003df4:	454b      	cmp	r3, r9
 8003df6:	dc01      	bgt.n	8003dfc <_printf_float+0x2b4>
 8003df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dfa:	e794      	b.n	8003d26 <_printf_float+0x1de>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	4652      	mov	r2, sl
 8003e00:	4631      	mov	r1, r6
 8003e02:	4628      	mov	r0, r5
 8003e04:	47b8      	blx	r7
 8003e06:	3001      	adds	r0, #1
 8003e08:	f43f aef9 	beq.w	8003bfe <_printf_float+0xb6>
 8003e0c:	f109 0901 	add.w	r9, r9, #1
 8003e10:	e7ee      	b.n	8003df0 <_printf_float+0x2a8>
 8003e12:	bf00      	nop
 8003e14:	7fefffff 	.word	0x7fefffff
 8003e18:	08006814 	.word	0x08006814
 8003e1c:	08006818 	.word	0x08006818
 8003e20:	08006820 	.word	0x08006820
 8003e24:	0800681c 	.word	0x0800681c
 8003e28:	08006824 	.word	0x08006824
 8003e2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e30:	429a      	cmp	r2, r3
 8003e32:	bfa8      	it	ge
 8003e34:	461a      	movge	r2, r3
 8003e36:	2a00      	cmp	r2, #0
 8003e38:	4691      	mov	r9, r2
 8003e3a:	dc37      	bgt.n	8003eac <_printf_float+0x364>
 8003e3c:	f04f 0b00 	mov.w	fp, #0
 8003e40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e44:	f104 021a 	add.w	r2, r4, #26
 8003e48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003e4c:	ebaa 0309 	sub.w	r3, sl, r9
 8003e50:	455b      	cmp	r3, fp
 8003e52:	dc33      	bgt.n	8003ebc <_printf_float+0x374>
 8003e54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	db3b      	blt.n	8003ed4 <_printf_float+0x38c>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	07da      	lsls	r2, r3, #31
 8003e60:	d438      	bmi.n	8003ed4 <_printf_float+0x38c>
 8003e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e66:	eba3 020a 	sub.w	r2, r3, sl
 8003e6a:	eba3 0901 	sub.w	r9, r3, r1
 8003e6e:	4591      	cmp	r9, r2
 8003e70:	bfa8      	it	ge
 8003e72:	4691      	movge	r9, r2
 8003e74:	f1b9 0f00 	cmp.w	r9, #0
 8003e78:	dc34      	bgt.n	8003ee4 <_printf_float+0x39c>
 8003e7a:	f04f 0800 	mov.w	r8, #0
 8003e7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e82:	f104 0a1a 	add.w	sl, r4, #26
 8003e86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	eba3 0309 	sub.w	r3, r3, r9
 8003e90:	4543      	cmp	r3, r8
 8003e92:	f77f af7a 	ble.w	8003d8a <_printf_float+0x242>
 8003e96:	2301      	movs	r3, #1
 8003e98:	4652      	mov	r2, sl
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b8      	blx	r7
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	f43f aeac 	beq.w	8003bfe <_printf_float+0xb6>
 8003ea6:	f108 0801 	add.w	r8, r8, #1
 8003eaa:	e7ec      	b.n	8003e86 <_printf_float+0x33e>
 8003eac:	4613      	mov	r3, r2
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	47b8      	blx	r7
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d1c0      	bne.n	8003e3c <_printf_float+0x2f4>
 8003eba:	e6a0      	b.n	8003bfe <_printf_float+0xb6>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	920b      	str	r2, [sp, #44]	; 0x2c
 8003ec4:	47b8      	blx	r7
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	f43f ae99 	beq.w	8003bfe <_printf_float+0xb6>
 8003ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ece:	f10b 0b01 	add.w	fp, fp, #1
 8003ed2:	e7b9      	b.n	8003e48 <_printf_float+0x300>
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eda:	4628      	mov	r0, r5
 8003edc:	47b8      	blx	r7
 8003ede:	3001      	adds	r0, #1
 8003ee0:	d1bf      	bne.n	8003e62 <_printf_float+0x31a>
 8003ee2:	e68c      	b.n	8003bfe <_printf_float+0xb6>
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	4631      	mov	r1, r6
 8003ee8:	4628      	mov	r0, r5
 8003eea:	eb08 020a 	add.w	r2, r8, sl
 8003eee:	47b8      	blx	r7
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d1c2      	bne.n	8003e7a <_printf_float+0x332>
 8003ef4:	e683      	b.n	8003bfe <_printf_float+0xb6>
 8003ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ef8:	2a01      	cmp	r2, #1
 8003efa:	dc01      	bgt.n	8003f00 <_printf_float+0x3b8>
 8003efc:	07db      	lsls	r3, r3, #31
 8003efe:	d537      	bpl.n	8003f70 <_printf_float+0x428>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4642      	mov	r2, r8
 8003f04:	4631      	mov	r1, r6
 8003f06:	4628      	mov	r0, r5
 8003f08:	47b8      	blx	r7
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	f43f ae77 	beq.w	8003bfe <_printf_float+0xb6>
 8003f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f14:	4631      	mov	r1, r6
 8003f16:	4628      	mov	r0, r5
 8003f18:	47b8      	blx	r7
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	f43f ae6f 	beq.w	8003bfe <_printf_float+0xb6>
 8003f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f24:	2200      	movs	r2, #0
 8003f26:	2300      	movs	r3, #0
 8003f28:	f7fc fd3e 	bl	80009a8 <__aeabi_dcmpeq>
 8003f2c:	b9d8      	cbnz	r0, 8003f66 <_printf_float+0x41e>
 8003f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f30:	f108 0201 	add.w	r2, r8, #1
 8003f34:	3b01      	subs	r3, #1
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d10e      	bne.n	8003f5e <_printf_float+0x416>
 8003f40:	e65d      	b.n	8003bfe <_printf_float+0xb6>
 8003f42:	2301      	movs	r3, #1
 8003f44:	464a      	mov	r2, r9
 8003f46:	4631      	mov	r1, r6
 8003f48:	4628      	mov	r0, r5
 8003f4a:	47b8      	blx	r7
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	f43f ae56 	beq.w	8003bfe <_printf_float+0xb6>
 8003f52:	f108 0801 	add.w	r8, r8, #1
 8003f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	4543      	cmp	r3, r8
 8003f5c:	dcf1      	bgt.n	8003f42 <_printf_float+0x3fa>
 8003f5e:	4653      	mov	r3, sl
 8003f60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003f64:	e6e0      	b.n	8003d28 <_printf_float+0x1e0>
 8003f66:	f04f 0800 	mov.w	r8, #0
 8003f6a:	f104 091a 	add.w	r9, r4, #26
 8003f6e:	e7f2      	b.n	8003f56 <_printf_float+0x40e>
 8003f70:	2301      	movs	r3, #1
 8003f72:	4642      	mov	r2, r8
 8003f74:	e7df      	b.n	8003f36 <_printf_float+0x3ee>
 8003f76:	2301      	movs	r3, #1
 8003f78:	464a      	mov	r2, r9
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	47b8      	blx	r7
 8003f80:	3001      	adds	r0, #1
 8003f82:	f43f ae3c 	beq.w	8003bfe <_printf_float+0xb6>
 8003f86:	f108 0801 	add.w	r8, r8, #1
 8003f8a:	68e3      	ldr	r3, [r4, #12]
 8003f8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003f8e:	1a5b      	subs	r3, r3, r1
 8003f90:	4543      	cmp	r3, r8
 8003f92:	dcf0      	bgt.n	8003f76 <_printf_float+0x42e>
 8003f94:	e6fd      	b.n	8003d92 <_printf_float+0x24a>
 8003f96:	f04f 0800 	mov.w	r8, #0
 8003f9a:	f104 0919 	add.w	r9, r4, #25
 8003f9e:	e7f4      	b.n	8003f8a <_printf_float+0x442>

08003fa0 <_printf_common>:
 8003fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa4:	4616      	mov	r6, r2
 8003fa6:	4699      	mov	r9, r3
 8003fa8:	688a      	ldr	r2, [r1, #8]
 8003faa:	690b      	ldr	r3, [r1, #16]
 8003fac:	4607      	mov	r7, r0
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	bfb8      	it	lt
 8003fb2:	4613      	movlt	r3, r2
 8003fb4:	6033      	str	r3, [r6, #0]
 8003fb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fba:	460c      	mov	r4, r1
 8003fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fc0:	b10a      	cbz	r2, 8003fc6 <_printf_common+0x26>
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	6033      	str	r3, [r6, #0]
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	0699      	lsls	r1, r3, #26
 8003fca:	bf42      	ittt	mi
 8003fcc:	6833      	ldrmi	r3, [r6, #0]
 8003fce:	3302      	addmi	r3, #2
 8003fd0:	6033      	strmi	r3, [r6, #0]
 8003fd2:	6825      	ldr	r5, [r4, #0]
 8003fd4:	f015 0506 	ands.w	r5, r5, #6
 8003fd8:	d106      	bne.n	8003fe8 <_printf_common+0x48>
 8003fda:	f104 0a19 	add.w	sl, r4, #25
 8003fde:	68e3      	ldr	r3, [r4, #12]
 8003fe0:	6832      	ldr	r2, [r6, #0]
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	42ab      	cmp	r3, r5
 8003fe6:	dc28      	bgt.n	800403a <_printf_common+0x9a>
 8003fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fec:	1e13      	subs	r3, r2, #0
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	bf18      	it	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	0692      	lsls	r2, r2, #26
 8003ff6:	d42d      	bmi.n	8004054 <_printf_common+0xb4>
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004000:	47c0      	blx	r8
 8004002:	3001      	adds	r0, #1
 8004004:	d020      	beq.n	8004048 <_printf_common+0xa8>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	68e5      	ldr	r5, [r4, #12]
 800400a:	f003 0306 	and.w	r3, r3, #6
 800400e:	2b04      	cmp	r3, #4
 8004010:	bf18      	it	ne
 8004012:	2500      	movne	r5, #0
 8004014:	6832      	ldr	r2, [r6, #0]
 8004016:	f04f 0600 	mov.w	r6, #0
 800401a:	68a3      	ldr	r3, [r4, #8]
 800401c:	bf08      	it	eq
 800401e:	1aad      	subeq	r5, r5, r2
 8004020:	6922      	ldr	r2, [r4, #16]
 8004022:	bf08      	it	eq
 8004024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004028:	4293      	cmp	r3, r2
 800402a:	bfc4      	itt	gt
 800402c:	1a9b      	subgt	r3, r3, r2
 800402e:	18ed      	addgt	r5, r5, r3
 8004030:	341a      	adds	r4, #26
 8004032:	42b5      	cmp	r5, r6
 8004034:	d11a      	bne.n	800406c <_printf_common+0xcc>
 8004036:	2000      	movs	r0, #0
 8004038:	e008      	b.n	800404c <_printf_common+0xac>
 800403a:	2301      	movs	r3, #1
 800403c:	4652      	mov	r2, sl
 800403e:	4649      	mov	r1, r9
 8004040:	4638      	mov	r0, r7
 8004042:	47c0      	blx	r8
 8004044:	3001      	adds	r0, #1
 8004046:	d103      	bne.n	8004050 <_printf_common+0xb0>
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004050:	3501      	adds	r5, #1
 8004052:	e7c4      	b.n	8003fde <_printf_common+0x3e>
 8004054:	2030      	movs	r0, #48	; 0x30
 8004056:	18e1      	adds	r1, r4, r3
 8004058:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004062:	4422      	add	r2, r4
 8004064:	3302      	adds	r3, #2
 8004066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800406a:	e7c5      	b.n	8003ff8 <_printf_common+0x58>
 800406c:	2301      	movs	r3, #1
 800406e:	4622      	mov	r2, r4
 8004070:	4649      	mov	r1, r9
 8004072:	4638      	mov	r0, r7
 8004074:	47c0      	blx	r8
 8004076:	3001      	adds	r0, #1
 8004078:	d0e6      	beq.n	8004048 <_printf_common+0xa8>
 800407a:	3601      	adds	r6, #1
 800407c:	e7d9      	b.n	8004032 <_printf_common+0x92>
	...

08004080 <_printf_i>:
 8004080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004084:	7e0f      	ldrb	r7, [r1, #24]
 8004086:	4691      	mov	r9, r2
 8004088:	2f78      	cmp	r7, #120	; 0x78
 800408a:	4680      	mov	r8, r0
 800408c:	460c      	mov	r4, r1
 800408e:	469a      	mov	sl, r3
 8004090:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004096:	d807      	bhi.n	80040a8 <_printf_i+0x28>
 8004098:	2f62      	cmp	r7, #98	; 0x62
 800409a:	d80a      	bhi.n	80040b2 <_printf_i+0x32>
 800409c:	2f00      	cmp	r7, #0
 800409e:	f000 80d9 	beq.w	8004254 <_printf_i+0x1d4>
 80040a2:	2f58      	cmp	r7, #88	; 0x58
 80040a4:	f000 80a4 	beq.w	80041f0 <_printf_i+0x170>
 80040a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040b0:	e03a      	b.n	8004128 <_printf_i+0xa8>
 80040b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040b6:	2b15      	cmp	r3, #21
 80040b8:	d8f6      	bhi.n	80040a8 <_printf_i+0x28>
 80040ba:	a101      	add	r1, pc, #4	; (adr r1, 80040c0 <_printf_i+0x40>)
 80040bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040c0:	08004119 	.word	0x08004119
 80040c4:	0800412d 	.word	0x0800412d
 80040c8:	080040a9 	.word	0x080040a9
 80040cc:	080040a9 	.word	0x080040a9
 80040d0:	080040a9 	.word	0x080040a9
 80040d4:	080040a9 	.word	0x080040a9
 80040d8:	0800412d 	.word	0x0800412d
 80040dc:	080040a9 	.word	0x080040a9
 80040e0:	080040a9 	.word	0x080040a9
 80040e4:	080040a9 	.word	0x080040a9
 80040e8:	080040a9 	.word	0x080040a9
 80040ec:	0800423b 	.word	0x0800423b
 80040f0:	0800415d 	.word	0x0800415d
 80040f4:	0800421d 	.word	0x0800421d
 80040f8:	080040a9 	.word	0x080040a9
 80040fc:	080040a9 	.word	0x080040a9
 8004100:	0800425d 	.word	0x0800425d
 8004104:	080040a9 	.word	0x080040a9
 8004108:	0800415d 	.word	0x0800415d
 800410c:	080040a9 	.word	0x080040a9
 8004110:	080040a9 	.word	0x080040a9
 8004114:	08004225 	.word	0x08004225
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	1d1a      	adds	r2, r3, #4
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	602a      	str	r2, [r5, #0]
 8004120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004128:	2301      	movs	r3, #1
 800412a:	e0a4      	b.n	8004276 <_printf_i+0x1f6>
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	6829      	ldr	r1, [r5, #0]
 8004130:	0606      	lsls	r6, r0, #24
 8004132:	f101 0304 	add.w	r3, r1, #4
 8004136:	d50a      	bpl.n	800414e <_printf_i+0xce>
 8004138:	680e      	ldr	r6, [r1, #0]
 800413a:	602b      	str	r3, [r5, #0]
 800413c:	2e00      	cmp	r6, #0
 800413e:	da03      	bge.n	8004148 <_printf_i+0xc8>
 8004140:	232d      	movs	r3, #45	; 0x2d
 8004142:	4276      	negs	r6, r6
 8004144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004148:	230a      	movs	r3, #10
 800414a:	485e      	ldr	r0, [pc, #376]	; (80042c4 <_printf_i+0x244>)
 800414c:	e019      	b.n	8004182 <_printf_i+0x102>
 800414e:	680e      	ldr	r6, [r1, #0]
 8004150:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004154:	602b      	str	r3, [r5, #0]
 8004156:	bf18      	it	ne
 8004158:	b236      	sxthne	r6, r6
 800415a:	e7ef      	b.n	800413c <_printf_i+0xbc>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	6820      	ldr	r0, [r4, #0]
 8004160:	1d19      	adds	r1, r3, #4
 8004162:	6029      	str	r1, [r5, #0]
 8004164:	0601      	lsls	r1, r0, #24
 8004166:	d501      	bpl.n	800416c <_printf_i+0xec>
 8004168:	681e      	ldr	r6, [r3, #0]
 800416a:	e002      	b.n	8004172 <_printf_i+0xf2>
 800416c:	0646      	lsls	r6, r0, #25
 800416e:	d5fb      	bpl.n	8004168 <_printf_i+0xe8>
 8004170:	881e      	ldrh	r6, [r3, #0]
 8004172:	2f6f      	cmp	r7, #111	; 0x6f
 8004174:	bf0c      	ite	eq
 8004176:	2308      	moveq	r3, #8
 8004178:	230a      	movne	r3, #10
 800417a:	4852      	ldr	r0, [pc, #328]	; (80042c4 <_printf_i+0x244>)
 800417c:	2100      	movs	r1, #0
 800417e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004182:	6865      	ldr	r5, [r4, #4]
 8004184:	2d00      	cmp	r5, #0
 8004186:	bfa8      	it	ge
 8004188:	6821      	ldrge	r1, [r4, #0]
 800418a:	60a5      	str	r5, [r4, #8]
 800418c:	bfa4      	itt	ge
 800418e:	f021 0104 	bicge.w	r1, r1, #4
 8004192:	6021      	strge	r1, [r4, #0]
 8004194:	b90e      	cbnz	r6, 800419a <_printf_i+0x11a>
 8004196:	2d00      	cmp	r5, #0
 8004198:	d04d      	beq.n	8004236 <_printf_i+0x1b6>
 800419a:	4615      	mov	r5, r2
 800419c:	fbb6 f1f3 	udiv	r1, r6, r3
 80041a0:	fb03 6711 	mls	r7, r3, r1, r6
 80041a4:	5dc7      	ldrb	r7, [r0, r7]
 80041a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041aa:	4637      	mov	r7, r6
 80041ac:	42bb      	cmp	r3, r7
 80041ae:	460e      	mov	r6, r1
 80041b0:	d9f4      	bls.n	800419c <_printf_i+0x11c>
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d10b      	bne.n	80041ce <_printf_i+0x14e>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	07de      	lsls	r6, r3, #31
 80041ba:	d508      	bpl.n	80041ce <_printf_i+0x14e>
 80041bc:	6923      	ldr	r3, [r4, #16]
 80041be:	6861      	ldr	r1, [r4, #4]
 80041c0:	4299      	cmp	r1, r3
 80041c2:	bfde      	ittt	le
 80041c4:	2330      	movle	r3, #48	; 0x30
 80041c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041ce:	1b52      	subs	r2, r2, r5
 80041d0:	6122      	str	r2, [r4, #16]
 80041d2:	464b      	mov	r3, r9
 80041d4:	4621      	mov	r1, r4
 80041d6:	4640      	mov	r0, r8
 80041d8:	f8cd a000 	str.w	sl, [sp]
 80041dc:	aa03      	add	r2, sp, #12
 80041de:	f7ff fedf 	bl	8003fa0 <_printf_common>
 80041e2:	3001      	adds	r0, #1
 80041e4:	d14c      	bne.n	8004280 <_printf_i+0x200>
 80041e6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ea:	b004      	add	sp, #16
 80041ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f0:	4834      	ldr	r0, [pc, #208]	; (80042c4 <_printf_i+0x244>)
 80041f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041f6:	6829      	ldr	r1, [r5, #0]
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80041fe:	6029      	str	r1, [r5, #0]
 8004200:	061d      	lsls	r5, r3, #24
 8004202:	d514      	bpl.n	800422e <_printf_i+0x1ae>
 8004204:	07df      	lsls	r7, r3, #31
 8004206:	bf44      	itt	mi
 8004208:	f043 0320 	orrmi.w	r3, r3, #32
 800420c:	6023      	strmi	r3, [r4, #0]
 800420e:	b91e      	cbnz	r6, 8004218 <_printf_i+0x198>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	f023 0320 	bic.w	r3, r3, #32
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	2310      	movs	r3, #16
 800421a:	e7af      	b.n	800417c <_printf_i+0xfc>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	f043 0320 	orr.w	r3, r3, #32
 8004222:	6023      	str	r3, [r4, #0]
 8004224:	2378      	movs	r3, #120	; 0x78
 8004226:	4828      	ldr	r0, [pc, #160]	; (80042c8 <_printf_i+0x248>)
 8004228:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800422c:	e7e3      	b.n	80041f6 <_printf_i+0x176>
 800422e:	0659      	lsls	r1, r3, #25
 8004230:	bf48      	it	mi
 8004232:	b2b6      	uxthmi	r6, r6
 8004234:	e7e6      	b.n	8004204 <_printf_i+0x184>
 8004236:	4615      	mov	r5, r2
 8004238:	e7bb      	b.n	80041b2 <_printf_i+0x132>
 800423a:	682b      	ldr	r3, [r5, #0]
 800423c:	6826      	ldr	r6, [r4, #0]
 800423e:	1d18      	adds	r0, r3, #4
 8004240:	6961      	ldr	r1, [r4, #20]
 8004242:	6028      	str	r0, [r5, #0]
 8004244:	0635      	lsls	r5, r6, #24
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	d501      	bpl.n	800424e <_printf_i+0x1ce>
 800424a:	6019      	str	r1, [r3, #0]
 800424c:	e002      	b.n	8004254 <_printf_i+0x1d4>
 800424e:	0670      	lsls	r0, r6, #25
 8004250:	d5fb      	bpl.n	800424a <_printf_i+0x1ca>
 8004252:	8019      	strh	r1, [r3, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	4615      	mov	r5, r2
 8004258:	6123      	str	r3, [r4, #16]
 800425a:	e7ba      	b.n	80041d2 <_printf_i+0x152>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	2100      	movs	r1, #0
 8004260:	1d1a      	adds	r2, r3, #4
 8004262:	602a      	str	r2, [r5, #0]
 8004264:	681d      	ldr	r5, [r3, #0]
 8004266:	6862      	ldr	r2, [r4, #4]
 8004268:	4628      	mov	r0, r5
 800426a:	f000 fed7 	bl	800501c <memchr>
 800426e:	b108      	cbz	r0, 8004274 <_printf_i+0x1f4>
 8004270:	1b40      	subs	r0, r0, r5
 8004272:	6060      	str	r0, [r4, #4]
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	6123      	str	r3, [r4, #16]
 8004278:	2300      	movs	r3, #0
 800427a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800427e:	e7a8      	b.n	80041d2 <_printf_i+0x152>
 8004280:	462a      	mov	r2, r5
 8004282:	4649      	mov	r1, r9
 8004284:	4640      	mov	r0, r8
 8004286:	6923      	ldr	r3, [r4, #16]
 8004288:	47d0      	blx	sl
 800428a:	3001      	adds	r0, #1
 800428c:	d0ab      	beq.n	80041e6 <_printf_i+0x166>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	079b      	lsls	r3, r3, #30
 8004292:	d413      	bmi.n	80042bc <_printf_i+0x23c>
 8004294:	68e0      	ldr	r0, [r4, #12]
 8004296:	9b03      	ldr	r3, [sp, #12]
 8004298:	4298      	cmp	r0, r3
 800429a:	bfb8      	it	lt
 800429c:	4618      	movlt	r0, r3
 800429e:	e7a4      	b.n	80041ea <_printf_i+0x16a>
 80042a0:	2301      	movs	r3, #1
 80042a2:	4632      	mov	r2, r6
 80042a4:	4649      	mov	r1, r9
 80042a6:	4640      	mov	r0, r8
 80042a8:	47d0      	blx	sl
 80042aa:	3001      	adds	r0, #1
 80042ac:	d09b      	beq.n	80041e6 <_printf_i+0x166>
 80042ae:	3501      	adds	r5, #1
 80042b0:	68e3      	ldr	r3, [r4, #12]
 80042b2:	9903      	ldr	r1, [sp, #12]
 80042b4:	1a5b      	subs	r3, r3, r1
 80042b6:	42ab      	cmp	r3, r5
 80042b8:	dcf2      	bgt.n	80042a0 <_printf_i+0x220>
 80042ba:	e7eb      	b.n	8004294 <_printf_i+0x214>
 80042bc:	2500      	movs	r5, #0
 80042be:	f104 0619 	add.w	r6, r4, #25
 80042c2:	e7f5      	b.n	80042b0 <_printf_i+0x230>
 80042c4:	08006826 	.word	0x08006826
 80042c8:	08006837 	.word	0x08006837

080042cc <siprintf>:
 80042cc:	b40e      	push	{r1, r2, r3}
 80042ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042d2:	b500      	push	{lr}
 80042d4:	b09c      	sub	sp, #112	; 0x70
 80042d6:	ab1d      	add	r3, sp, #116	; 0x74
 80042d8:	9002      	str	r0, [sp, #8]
 80042da:	9006      	str	r0, [sp, #24]
 80042dc:	9107      	str	r1, [sp, #28]
 80042de:	9104      	str	r1, [sp, #16]
 80042e0:	4808      	ldr	r0, [pc, #32]	; (8004304 <siprintf+0x38>)
 80042e2:	4909      	ldr	r1, [pc, #36]	; (8004308 <siprintf+0x3c>)
 80042e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80042e8:	9105      	str	r1, [sp, #20]
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	a902      	add	r1, sp, #8
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	f001 fb7e 	bl	80059f0 <_svfiprintf_r>
 80042f4:	2200      	movs	r2, #0
 80042f6:	9b02      	ldr	r3, [sp, #8]
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	b01c      	add	sp, #112	; 0x70
 80042fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004300:	b003      	add	sp, #12
 8004302:	4770      	bx	lr
 8004304:	2000000c 	.word	0x2000000c
 8004308:	ffff0208 	.word	0xffff0208

0800430c <quorem>:
 800430c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004310:	6903      	ldr	r3, [r0, #16]
 8004312:	690c      	ldr	r4, [r1, #16]
 8004314:	4607      	mov	r7, r0
 8004316:	42a3      	cmp	r3, r4
 8004318:	f2c0 8082 	blt.w	8004420 <quorem+0x114>
 800431c:	3c01      	subs	r4, #1
 800431e:	f100 0514 	add.w	r5, r0, #20
 8004322:	f101 0814 	add.w	r8, r1, #20
 8004326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004334:	3301      	adds	r3, #1
 8004336:	429a      	cmp	r2, r3
 8004338:	fbb2 f6f3 	udiv	r6, r2, r3
 800433c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004340:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004344:	d331      	bcc.n	80043aa <quorem+0x9e>
 8004346:	f04f 0e00 	mov.w	lr, #0
 800434a:	4640      	mov	r0, r8
 800434c:	46ac      	mov	ip, r5
 800434e:	46f2      	mov	sl, lr
 8004350:	f850 2b04 	ldr.w	r2, [r0], #4
 8004354:	b293      	uxth	r3, r2
 8004356:	fb06 e303 	mla	r3, r6, r3, lr
 800435a:	0c12      	lsrs	r2, r2, #16
 800435c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004360:	b29b      	uxth	r3, r3
 8004362:	fb06 e202 	mla	r2, r6, r2, lr
 8004366:	ebaa 0303 	sub.w	r3, sl, r3
 800436a:	f8dc a000 	ldr.w	sl, [ip]
 800436e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004372:	fa1f fa8a 	uxth.w	sl, sl
 8004376:	4453      	add	r3, sl
 8004378:	f8dc a000 	ldr.w	sl, [ip]
 800437c:	b292      	uxth	r2, r2
 800437e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004382:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004386:	b29b      	uxth	r3, r3
 8004388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800438c:	4581      	cmp	r9, r0
 800438e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004392:	f84c 3b04 	str.w	r3, [ip], #4
 8004396:	d2db      	bcs.n	8004350 <quorem+0x44>
 8004398:	f855 300b 	ldr.w	r3, [r5, fp]
 800439c:	b92b      	cbnz	r3, 80043aa <quorem+0x9e>
 800439e:	9b01      	ldr	r3, [sp, #4]
 80043a0:	3b04      	subs	r3, #4
 80043a2:	429d      	cmp	r5, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	d32f      	bcc.n	8004408 <quorem+0xfc>
 80043a8:	613c      	str	r4, [r7, #16]
 80043aa:	4638      	mov	r0, r7
 80043ac:	f001 f8d0 	bl	8005550 <__mcmp>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	db25      	blt.n	8004400 <quorem+0xf4>
 80043b4:	4628      	mov	r0, r5
 80043b6:	f04f 0c00 	mov.w	ip, #0
 80043ba:	3601      	adds	r6, #1
 80043bc:	f858 1b04 	ldr.w	r1, [r8], #4
 80043c0:	f8d0 e000 	ldr.w	lr, [r0]
 80043c4:	b28b      	uxth	r3, r1
 80043c6:	ebac 0303 	sub.w	r3, ip, r3
 80043ca:	fa1f f28e 	uxth.w	r2, lr
 80043ce:	4413      	add	r3, r2
 80043d0:	0c0a      	lsrs	r2, r1, #16
 80043d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80043d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043da:	b29b      	uxth	r3, r3
 80043dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043e0:	45c1      	cmp	r9, r8
 80043e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80043e6:	f840 3b04 	str.w	r3, [r0], #4
 80043ea:	d2e7      	bcs.n	80043bc <quorem+0xb0>
 80043ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043f4:	b922      	cbnz	r2, 8004400 <quorem+0xf4>
 80043f6:	3b04      	subs	r3, #4
 80043f8:	429d      	cmp	r5, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	d30a      	bcc.n	8004414 <quorem+0x108>
 80043fe:	613c      	str	r4, [r7, #16]
 8004400:	4630      	mov	r0, r6
 8004402:	b003      	add	sp, #12
 8004404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	3b04      	subs	r3, #4
 800440c:	2a00      	cmp	r2, #0
 800440e:	d1cb      	bne.n	80043a8 <quorem+0x9c>
 8004410:	3c01      	subs	r4, #1
 8004412:	e7c6      	b.n	80043a2 <quorem+0x96>
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	3b04      	subs	r3, #4
 8004418:	2a00      	cmp	r2, #0
 800441a:	d1f0      	bne.n	80043fe <quorem+0xf2>
 800441c:	3c01      	subs	r4, #1
 800441e:	e7eb      	b.n	80043f8 <quorem+0xec>
 8004420:	2000      	movs	r0, #0
 8004422:	e7ee      	b.n	8004402 <quorem+0xf6>
 8004424:	0000      	movs	r0, r0
	...

08004428 <_dtoa_r>:
 8004428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442c:	4616      	mov	r6, r2
 800442e:	461f      	mov	r7, r3
 8004430:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004432:	b099      	sub	sp, #100	; 0x64
 8004434:	4605      	mov	r5, r0
 8004436:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800443a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800443e:	b974      	cbnz	r4, 800445e <_dtoa_r+0x36>
 8004440:	2010      	movs	r0, #16
 8004442:	f000 fde3 	bl	800500c <malloc>
 8004446:	4602      	mov	r2, r0
 8004448:	6268      	str	r0, [r5, #36]	; 0x24
 800444a:	b920      	cbnz	r0, 8004456 <_dtoa_r+0x2e>
 800444c:	21ea      	movs	r1, #234	; 0xea
 800444e:	4ba8      	ldr	r3, [pc, #672]	; (80046f0 <_dtoa_r+0x2c8>)
 8004450:	48a8      	ldr	r0, [pc, #672]	; (80046f4 <_dtoa_r+0x2cc>)
 8004452:	f001 fbdd 	bl	8005c10 <__assert_func>
 8004456:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800445a:	6004      	str	r4, [r0, #0]
 800445c:	60c4      	str	r4, [r0, #12]
 800445e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004460:	6819      	ldr	r1, [r3, #0]
 8004462:	b151      	cbz	r1, 800447a <_dtoa_r+0x52>
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	2301      	movs	r3, #1
 8004468:	4093      	lsls	r3, r2
 800446a:	604a      	str	r2, [r1, #4]
 800446c:	608b      	str	r3, [r1, #8]
 800446e:	4628      	mov	r0, r5
 8004470:	f000 fe30 	bl	80050d4 <_Bfree>
 8004474:	2200      	movs	r2, #0
 8004476:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	1e3b      	subs	r3, r7, #0
 800447c:	bfaf      	iteee	ge
 800447e:	2300      	movge	r3, #0
 8004480:	2201      	movlt	r2, #1
 8004482:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004486:	9305      	strlt	r3, [sp, #20]
 8004488:	bfa8      	it	ge
 800448a:	f8c8 3000 	strge.w	r3, [r8]
 800448e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004492:	4b99      	ldr	r3, [pc, #612]	; (80046f8 <_dtoa_r+0x2d0>)
 8004494:	bfb8      	it	lt
 8004496:	f8c8 2000 	strlt.w	r2, [r8]
 800449a:	ea33 0309 	bics.w	r3, r3, r9
 800449e:	d119      	bne.n	80044d4 <_dtoa_r+0xac>
 80044a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80044a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80044ac:	4333      	orrs	r3, r6
 80044ae:	f000 857f 	beq.w	8004fb0 <_dtoa_r+0xb88>
 80044b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80044b4:	b953      	cbnz	r3, 80044cc <_dtoa_r+0xa4>
 80044b6:	4b91      	ldr	r3, [pc, #580]	; (80046fc <_dtoa_r+0x2d4>)
 80044b8:	e022      	b.n	8004500 <_dtoa_r+0xd8>
 80044ba:	4b91      	ldr	r3, [pc, #580]	; (8004700 <_dtoa_r+0x2d8>)
 80044bc:	9303      	str	r3, [sp, #12]
 80044be:	3308      	adds	r3, #8
 80044c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	9803      	ldr	r0, [sp, #12]
 80044c6:	b019      	add	sp, #100	; 0x64
 80044c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044cc:	4b8b      	ldr	r3, [pc, #556]	; (80046fc <_dtoa_r+0x2d4>)
 80044ce:	9303      	str	r3, [sp, #12]
 80044d0:	3303      	adds	r3, #3
 80044d2:	e7f5      	b.n	80044c0 <_dtoa_r+0x98>
 80044d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80044d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80044dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044e0:	2200      	movs	r2, #0
 80044e2:	2300      	movs	r3, #0
 80044e4:	f7fc fa60 	bl	80009a8 <__aeabi_dcmpeq>
 80044e8:	4680      	mov	r8, r0
 80044ea:	b158      	cbz	r0, 8004504 <_dtoa_r+0xdc>
 80044ec:	2301      	movs	r3, #1
 80044ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8558 	beq.w	8004faa <_dtoa_r+0xb82>
 80044fa:	4882      	ldr	r0, [pc, #520]	; (8004704 <_dtoa_r+0x2dc>)
 80044fc:	6018      	str	r0, [r3, #0]
 80044fe:	1e43      	subs	r3, r0, #1
 8004500:	9303      	str	r3, [sp, #12]
 8004502:	e7df      	b.n	80044c4 <_dtoa_r+0x9c>
 8004504:	ab16      	add	r3, sp, #88	; 0x58
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	ab17      	add	r3, sp, #92	; 0x5c
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4628      	mov	r0, r5
 800450e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004512:	f001 f8c5 	bl	80056a0 <__d2b>
 8004516:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800451a:	4683      	mov	fp, r0
 800451c:	2c00      	cmp	r4, #0
 800451e:	d07f      	beq.n	8004620 <_dtoa_r+0x1f8>
 8004520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004526:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800452a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800452e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004532:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004536:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800453a:	2200      	movs	r2, #0
 800453c:	4b72      	ldr	r3, [pc, #456]	; (8004708 <_dtoa_r+0x2e0>)
 800453e:	f7fb fe13 	bl	8000168 <__aeabi_dsub>
 8004542:	a365      	add	r3, pc, #404	; (adr r3, 80046d8 <_dtoa_r+0x2b0>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f7fb ffc6 	bl	80004d8 <__aeabi_dmul>
 800454c:	a364      	add	r3, pc, #400	; (adr r3, 80046e0 <_dtoa_r+0x2b8>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f7fb fe0b 	bl	800016c <__adddf3>
 8004556:	4606      	mov	r6, r0
 8004558:	4620      	mov	r0, r4
 800455a:	460f      	mov	r7, r1
 800455c:	f7fb ff52 	bl	8000404 <__aeabi_i2d>
 8004560:	a361      	add	r3, pc, #388	; (adr r3, 80046e8 <_dtoa_r+0x2c0>)
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f7fb ffb7 	bl	80004d8 <__aeabi_dmul>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4630      	mov	r0, r6
 8004570:	4639      	mov	r1, r7
 8004572:	f7fb fdfb 	bl	800016c <__adddf3>
 8004576:	4606      	mov	r6, r0
 8004578:	460f      	mov	r7, r1
 800457a:	f7fc fa5d 	bl	8000a38 <__aeabi_d2iz>
 800457e:	2200      	movs	r2, #0
 8004580:	4682      	mov	sl, r0
 8004582:	2300      	movs	r3, #0
 8004584:	4630      	mov	r0, r6
 8004586:	4639      	mov	r1, r7
 8004588:	f7fc fa18 	bl	80009bc <__aeabi_dcmplt>
 800458c:	b148      	cbz	r0, 80045a2 <_dtoa_r+0x17a>
 800458e:	4650      	mov	r0, sl
 8004590:	f7fb ff38 	bl	8000404 <__aeabi_i2d>
 8004594:	4632      	mov	r2, r6
 8004596:	463b      	mov	r3, r7
 8004598:	f7fc fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800459c:	b908      	cbnz	r0, 80045a2 <_dtoa_r+0x17a>
 800459e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045a2:	f1ba 0f16 	cmp.w	sl, #22
 80045a6:	d858      	bhi.n	800465a <_dtoa_r+0x232>
 80045a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045ac:	4b57      	ldr	r3, [pc, #348]	; (800470c <_dtoa_r+0x2e4>)
 80045ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f7fc fa01 	bl	80009bc <__aeabi_dcmplt>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d04f      	beq.n	800465e <_dtoa_r+0x236>
 80045be:	2300      	movs	r3, #0
 80045c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80045c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80045c8:	1b1c      	subs	r4, r3, r4
 80045ca:	1e63      	subs	r3, r4, #1
 80045cc:	9309      	str	r3, [sp, #36]	; 0x24
 80045ce:	bf49      	itett	mi
 80045d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80045d4:	2300      	movpl	r3, #0
 80045d6:	9306      	strmi	r3, [sp, #24]
 80045d8:	2300      	movmi	r3, #0
 80045da:	bf54      	ite	pl
 80045dc:	9306      	strpl	r3, [sp, #24]
 80045de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80045e0:	f1ba 0f00 	cmp.w	sl, #0
 80045e4:	db3d      	blt.n	8004662 <_dtoa_r+0x23a>
 80045e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80045ec:	4453      	add	r3, sl
 80045ee:	9309      	str	r3, [sp, #36]	; 0x24
 80045f0:	2300      	movs	r3, #0
 80045f2:	930a      	str	r3, [sp, #40]	; 0x28
 80045f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045f6:	2b09      	cmp	r3, #9
 80045f8:	f200 808c 	bhi.w	8004714 <_dtoa_r+0x2ec>
 80045fc:	2b05      	cmp	r3, #5
 80045fe:	bfc4      	itt	gt
 8004600:	3b04      	subgt	r3, #4
 8004602:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004606:	bfc8      	it	gt
 8004608:	2400      	movgt	r4, #0
 800460a:	f1a3 0302 	sub.w	r3, r3, #2
 800460e:	bfd8      	it	le
 8004610:	2401      	movle	r4, #1
 8004612:	2b03      	cmp	r3, #3
 8004614:	f200 808a 	bhi.w	800472c <_dtoa_r+0x304>
 8004618:	e8df f003 	tbb	[pc, r3]
 800461c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004620:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004624:	441c      	add	r4, r3
 8004626:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800462a:	2b20      	cmp	r3, #32
 800462c:	bfc3      	ittte	gt
 800462e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004632:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004636:	fa09 f303 	lslgt.w	r3, r9, r3
 800463a:	f1c3 0320 	rsble	r3, r3, #32
 800463e:	bfc6      	itte	gt
 8004640:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004644:	4318      	orrgt	r0, r3
 8004646:	fa06 f003 	lslle.w	r0, r6, r3
 800464a:	f7fb fecb 	bl	80003e4 <__aeabi_ui2d>
 800464e:	2301      	movs	r3, #1
 8004650:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004654:	3c01      	subs	r4, #1
 8004656:	9313      	str	r3, [sp, #76]	; 0x4c
 8004658:	e76f      	b.n	800453a <_dtoa_r+0x112>
 800465a:	2301      	movs	r3, #1
 800465c:	e7b2      	b.n	80045c4 <_dtoa_r+0x19c>
 800465e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004660:	e7b1      	b.n	80045c6 <_dtoa_r+0x19e>
 8004662:	9b06      	ldr	r3, [sp, #24]
 8004664:	eba3 030a 	sub.w	r3, r3, sl
 8004668:	9306      	str	r3, [sp, #24]
 800466a:	f1ca 0300 	rsb	r3, sl, #0
 800466e:	930a      	str	r3, [sp, #40]	; 0x28
 8004670:	2300      	movs	r3, #0
 8004672:	930e      	str	r3, [sp, #56]	; 0x38
 8004674:	e7be      	b.n	80045f4 <_dtoa_r+0x1cc>
 8004676:	2300      	movs	r3, #0
 8004678:	930b      	str	r3, [sp, #44]	; 0x2c
 800467a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800467c:	2b00      	cmp	r3, #0
 800467e:	dc58      	bgt.n	8004732 <_dtoa_r+0x30a>
 8004680:	f04f 0901 	mov.w	r9, #1
 8004684:	464b      	mov	r3, r9
 8004686:	f8cd 9020 	str.w	r9, [sp, #32]
 800468a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800468e:	2200      	movs	r2, #0
 8004690:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004692:	6042      	str	r2, [r0, #4]
 8004694:	2204      	movs	r2, #4
 8004696:	f102 0614 	add.w	r6, r2, #20
 800469a:	429e      	cmp	r6, r3
 800469c:	6841      	ldr	r1, [r0, #4]
 800469e:	d94e      	bls.n	800473e <_dtoa_r+0x316>
 80046a0:	4628      	mov	r0, r5
 80046a2:	f000 fcd7 	bl	8005054 <_Balloc>
 80046a6:	9003      	str	r0, [sp, #12]
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d14c      	bne.n	8004746 <_dtoa_r+0x31e>
 80046ac:	4602      	mov	r2, r0
 80046ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80046b2:	4b17      	ldr	r3, [pc, #92]	; (8004710 <_dtoa_r+0x2e8>)
 80046b4:	e6cc      	b.n	8004450 <_dtoa_r+0x28>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e7de      	b.n	8004678 <_dtoa_r+0x250>
 80046ba:	2300      	movs	r3, #0
 80046bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80046be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046c0:	eb0a 0903 	add.w	r9, sl, r3
 80046c4:	f109 0301 	add.w	r3, r9, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	9308      	str	r3, [sp, #32]
 80046cc:	bfb8      	it	lt
 80046ce:	2301      	movlt	r3, #1
 80046d0:	e7dd      	b.n	800468e <_dtoa_r+0x266>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e7f2      	b.n	80046bc <_dtoa_r+0x294>
 80046d6:	bf00      	nop
 80046d8:	636f4361 	.word	0x636f4361
 80046dc:	3fd287a7 	.word	0x3fd287a7
 80046e0:	8b60c8b3 	.word	0x8b60c8b3
 80046e4:	3fc68a28 	.word	0x3fc68a28
 80046e8:	509f79fb 	.word	0x509f79fb
 80046ec:	3fd34413 	.word	0x3fd34413
 80046f0:	08006855 	.word	0x08006855
 80046f4:	0800686c 	.word	0x0800686c
 80046f8:	7ff00000 	.word	0x7ff00000
 80046fc:	08006851 	.word	0x08006851
 8004700:	08006848 	.word	0x08006848
 8004704:	08006825 	.word	0x08006825
 8004708:	3ff80000 	.word	0x3ff80000
 800470c:	08006960 	.word	0x08006960
 8004710:	080068c7 	.word	0x080068c7
 8004714:	2401      	movs	r4, #1
 8004716:	2300      	movs	r3, #0
 8004718:	940b      	str	r4, [sp, #44]	; 0x2c
 800471a:	9322      	str	r3, [sp, #136]	; 0x88
 800471c:	f04f 39ff 	mov.w	r9, #4294967295
 8004720:	2200      	movs	r2, #0
 8004722:	2312      	movs	r3, #18
 8004724:	f8cd 9020 	str.w	r9, [sp, #32]
 8004728:	9223      	str	r2, [sp, #140]	; 0x8c
 800472a:	e7b0      	b.n	800468e <_dtoa_r+0x266>
 800472c:	2301      	movs	r3, #1
 800472e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004730:	e7f4      	b.n	800471c <_dtoa_r+0x2f4>
 8004732:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004736:	464b      	mov	r3, r9
 8004738:	f8cd 9020 	str.w	r9, [sp, #32]
 800473c:	e7a7      	b.n	800468e <_dtoa_r+0x266>
 800473e:	3101      	adds	r1, #1
 8004740:	6041      	str	r1, [r0, #4]
 8004742:	0052      	lsls	r2, r2, #1
 8004744:	e7a7      	b.n	8004696 <_dtoa_r+0x26e>
 8004746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004748:	9a03      	ldr	r2, [sp, #12]
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	9b08      	ldr	r3, [sp, #32]
 800474e:	2b0e      	cmp	r3, #14
 8004750:	f200 80a8 	bhi.w	80048a4 <_dtoa_r+0x47c>
 8004754:	2c00      	cmp	r4, #0
 8004756:	f000 80a5 	beq.w	80048a4 <_dtoa_r+0x47c>
 800475a:	f1ba 0f00 	cmp.w	sl, #0
 800475e:	dd34      	ble.n	80047ca <_dtoa_r+0x3a2>
 8004760:	4a9a      	ldr	r2, [pc, #616]	; (80049cc <_dtoa_r+0x5a4>)
 8004762:	f00a 030f 	and.w	r3, sl, #15
 8004766:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800476a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800476e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004772:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004776:	ea4f 142a 	mov.w	r4, sl, asr #4
 800477a:	d016      	beq.n	80047aa <_dtoa_r+0x382>
 800477c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004780:	4b93      	ldr	r3, [pc, #588]	; (80049d0 <_dtoa_r+0x5a8>)
 8004782:	2703      	movs	r7, #3
 8004784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004788:	f7fb ffd0 	bl	800072c <__aeabi_ddiv>
 800478c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004790:	f004 040f 	and.w	r4, r4, #15
 8004794:	4e8e      	ldr	r6, [pc, #568]	; (80049d0 <_dtoa_r+0x5a8>)
 8004796:	b954      	cbnz	r4, 80047ae <_dtoa_r+0x386>
 8004798:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800479c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047a0:	f7fb ffc4 	bl	800072c <__aeabi_ddiv>
 80047a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047a8:	e029      	b.n	80047fe <_dtoa_r+0x3d6>
 80047aa:	2702      	movs	r7, #2
 80047ac:	e7f2      	b.n	8004794 <_dtoa_r+0x36c>
 80047ae:	07e1      	lsls	r1, r4, #31
 80047b0:	d508      	bpl.n	80047c4 <_dtoa_r+0x39c>
 80047b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80047b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80047ba:	f7fb fe8d 	bl	80004d8 <__aeabi_dmul>
 80047be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80047c2:	3701      	adds	r7, #1
 80047c4:	1064      	asrs	r4, r4, #1
 80047c6:	3608      	adds	r6, #8
 80047c8:	e7e5      	b.n	8004796 <_dtoa_r+0x36e>
 80047ca:	f000 80a5 	beq.w	8004918 <_dtoa_r+0x4f0>
 80047ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047d2:	f1ca 0400 	rsb	r4, sl, #0
 80047d6:	4b7d      	ldr	r3, [pc, #500]	; (80049cc <_dtoa_r+0x5a4>)
 80047d8:	f004 020f 	and.w	r2, r4, #15
 80047dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f7fb fe78 	bl	80004d8 <__aeabi_dmul>
 80047e8:	2702      	movs	r7, #2
 80047ea:	2300      	movs	r3, #0
 80047ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047f0:	4e77      	ldr	r6, [pc, #476]	; (80049d0 <_dtoa_r+0x5a8>)
 80047f2:	1124      	asrs	r4, r4, #4
 80047f4:	2c00      	cmp	r4, #0
 80047f6:	f040 8084 	bne.w	8004902 <_dtoa_r+0x4da>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1d2      	bne.n	80047a4 <_dtoa_r+0x37c>
 80047fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 808b 	beq.w	800491c <_dtoa_r+0x4f4>
 8004806:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800480a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800480e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004812:	2200      	movs	r2, #0
 8004814:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <_dtoa_r+0x5ac>)
 8004816:	f7fc f8d1 	bl	80009bc <__aeabi_dcmplt>
 800481a:	2800      	cmp	r0, #0
 800481c:	d07e      	beq.n	800491c <_dtoa_r+0x4f4>
 800481e:	9b08      	ldr	r3, [sp, #32]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d07b      	beq.n	800491c <_dtoa_r+0x4f4>
 8004824:	f1b9 0f00 	cmp.w	r9, #0
 8004828:	dd38      	ble.n	800489c <_dtoa_r+0x474>
 800482a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800482e:	2200      	movs	r2, #0
 8004830:	4b69      	ldr	r3, [pc, #420]	; (80049d8 <_dtoa_r+0x5b0>)
 8004832:	f7fb fe51 	bl	80004d8 <__aeabi_dmul>
 8004836:	464c      	mov	r4, r9
 8004838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800483c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004840:	3701      	adds	r7, #1
 8004842:	4638      	mov	r0, r7
 8004844:	f7fb fdde 	bl	8000404 <__aeabi_i2d>
 8004848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800484c:	f7fb fe44 	bl	80004d8 <__aeabi_dmul>
 8004850:	2200      	movs	r2, #0
 8004852:	4b62      	ldr	r3, [pc, #392]	; (80049dc <_dtoa_r+0x5b4>)
 8004854:	f7fb fc8a 	bl	800016c <__adddf3>
 8004858:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800485c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004860:	9611      	str	r6, [sp, #68]	; 0x44
 8004862:	2c00      	cmp	r4, #0
 8004864:	d15d      	bne.n	8004922 <_dtoa_r+0x4fa>
 8004866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800486a:	2200      	movs	r2, #0
 800486c:	4b5c      	ldr	r3, [pc, #368]	; (80049e0 <_dtoa_r+0x5b8>)
 800486e:	f7fb fc7b 	bl	8000168 <__aeabi_dsub>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800487a:	4633      	mov	r3, r6
 800487c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800487e:	f7fc f8bb 	bl	80009f8 <__aeabi_dcmpgt>
 8004882:	2800      	cmp	r0, #0
 8004884:	f040 829c 	bne.w	8004dc0 <_dtoa_r+0x998>
 8004888:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800488c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800488e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004892:	f7fc f893 	bl	80009bc <__aeabi_dcmplt>
 8004896:	2800      	cmp	r0, #0
 8004898:	f040 8290 	bne.w	8004dbc <_dtoa_r+0x994>
 800489c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80048a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80048a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f2c0 8152 	blt.w	8004b50 <_dtoa_r+0x728>
 80048ac:	f1ba 0f0e 	cmp.w	sl, #14
 80048b0:	f300 814e 	bgt.w	8004b50 <_dtoa_r+0x728>
 80048b4:	4b45      	ldr	r3, [pc, #276]	; (80049cc <_dtoa_r+0x5a4>)
 80048b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80048ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80048c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f280 80db 	bge.w	8004a80 <_dtoa_r+0x658>
 80048ca:	9b08      	ldr	r3, [sp, #32]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f300 80d7 	bgt.w	8004a80 <_dtoa_r+0x658>
 80048d2:	f040 8272 	bne.w	8004dba <_dtoa_r+0x992>
 80048d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048da:	2200      	movs	r2, #0
 80048dc:	4b40      	ldr	r3, [pc, #256]	; (80049e0 <_dtoa_r+0x5b8>)
 80048de:	f7fb fdfb 	bl	80004d8 <__aeabi_dmul>
 80048e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048e6:	f7fc f87d 	bl	80009e4 <__aeabi_dcmpge>
 80048ea:	9c08      	ldr	r4, [sp, #32]
 80048ec:	4626      	mov	r6, r4
 80048ee:	2800      	cmp	r0, #0
 80048f0:	f040 8248 	bne.w	8004d84 <_dtoa_r+0x95c>
 80048f4:	2331      	movs	r3, #49	; 0x31
 80048f6:	9f03      	ldr	r7, [sp, #12]
 80048f8:	f10a 0a01 	add.w	sl, sl, #1
 80048fc:	f807 3b01 	strb.w	r3, [r7], #1
 8004900:	e244      	b.n	8004d8c <_dtoa_r+0x964>
 8004902:	07e2      	lsls	r2, r4, #31
 8004904:	d505      	bpl.n	8004912 <_dtoa_r+0x4ea>
 8004906:	e9d6 2300 	ldrd	r2, r3, [r6]
 800490a:	f7fb fde5 	bl	80004d8 <__aeabi_dmul>
 800490e:	2301      	movs	r3, #1
 8004910:	3701      	adds	r7, #1
 8004912:	1064      	asrs	r4, r4, #1
 8004914:	3608      	adds	r6, #8
 8004916:	e76d      	b.n	80047f4 <_dtoa_r+0x3cc>
 8004918:	2702      	movs	r7, #2
 800491a:	e770      	b.n	80047fe <_dtoa_r+0x3d6>
 800491c:	46d0      	mov	r8, sl
 800491e:	9c08      	ldr	r4, [sp, #32]
 8004920:	e78f      	b.n	8004842 <_dtoa_r+0x41a>
 8004922:	9903      	ldr	r1, [sp, #12]
 8004924:	4b29      	ldr	r3, [pc, #164]	; (80049cc <_dtoa_r+0x5a4>)
 8004926:	4421      	add	r1, r4
 8004928:	9112      	str	r1, [sp, #72]	; 0x48
 800492a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800492c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004930:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004934:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004938:	2900      	cmp	r1, #0
 800493a:	d055      	beq.n	80049e8 <_dtoa_r+0x5c0>
 800493c:	2000      	movs	r0, #0
 800493e:	4929      	ldr	r1, [pc, #164]	; (80049e4 <_dtoa_r+0x5bc>)
 8004940:	f7fb fef4 	bl	800072c <__aeabi_ddiv>
 8004944:	463b      	mov	r3, r7
 8004946:	4632      	mov	r2, r6
 8004948:	f7fb fc0e 	bl	8000168 <__aeabi_dsub>
 800494c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004950:	9f03      	ldr	r7, [sp, #12]
 8004952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004956:	f7fc f86f 	bl	8000a38 <__aeabi_d2iz>
 800495a:	4604      	mov	r4, r0
 800495c:	f7fb fd52 	bl	8000404 <__aeabi_i2d>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004968:	f7fb fbfe 	bl	8000168 <__aeabi_dsub>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	3430      	adds	r4, #48	; 0x30
 8004972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800497a:	f807 4b01 	strb.w	r4, [r7], #1
 800497e:	f7fc f81d 	bl	80009bc <__aeabi_dcmplt>
 8004982:	2800      	cmp	r0, #0
 8004984:	d174      	bne.n	8004a70 <_dtoa_r+0x648>
 8004986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800498a:	2000      	movs	r0, #0
 800498c:	4911      	ldr	r1, [pc, #68]	; (80049d4 <_dtoa_r+0x5ac>)
 800498e:	f7fb fbeb 	bl	8000168 <__aeabi_dsub>
 8004992:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004996:	f7fc f811 	bl	80009bc <__aeabi_dcmplt>
 800499a:	2800      	cmp	r0, #0
 800499c:	f040 80b7 	bne.w	8004b0e <_dtoa_r+0x6e6>
 80049a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049a2:	429f      	cmp	r7, r3
 80049a4:	f43f af7a 	beq.w	800489c <_dtoa_r+0x474>
 80049a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80049ac:	2200      	movs	r2, #0
 80049ae:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <_dtoa_r+0x5b0>)
 80049b0:	f7fb fd92 	bl	80004d8 <__aeabi_dmul>
 80049b4:	2200      	movs	r2, #0
 80049b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <_dtoa_r+0x5b0>)
 80049c0:	f7fb fd8a 	bl	80004d8 <__aeabi_dmul>
 80049c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049c8:	e7c3      	b.n	8004952 <_dtoa_r+0x52a>
 80049ca:	bf00      	nop
 80049cc:	08006960 	.word	0x08006960
 80049d0:	08006938 	.word	0x08006938
 80049d4:	3ff00000 	.word	0x3ff00000
 80049d8:	40240000 	.word	0x40240000
 80049dc:	401c0000 	.word	0x401c0000
 80049e0:	40140000 	.word	0x40140000
 80049e4:	3fe00000 	.word	0x3fe00000
 80049e8:	4630      	mov	r0, r6
 80049ea:	4639      	mov	r1, r7
 80049ec:	f7fb fd74 	bl	80004d8 <__aeabi_dmul>
 80049f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049f6:	9c03      	ldr	r4, [sp, #12]
 80049f8:	9314      	str	r3, [sp, #80]	; 0x50
 80049fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049fe:	f7fc f81b 	bl	8000a38 <__aeabi_d2iz>
 8004a02:	9015      	str	r0, [sp, #84]	; 0x54
 8004a04:	f7fb fcfe 	bl	8000404 <__aeabi_i2d>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a10:	f7fb fbaa 	bl	8000168 <__aeabi_dsub>
 8004a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a16:	4606      	mov	r6, r0
 8004a18:	3330      	adds	r3, #48	; 0x30
 8004a1a:	f804 3b01 	strb.w	r3, [r4], #1
 8004a1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a20:	460f      	mov	r7, r1
 8004a22:	429c      	cmp	r4, r3
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	d124      	bne.n	8004a74 <_dtoa_r+0x64c>
 8004a2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a2e:	4bb0      	ldr	r3, [pc, #704]	; (8004cf0 <_dtoa_r+0x8c8>)
 8004a30:	f7fb fb9c 	bl	800016c <__adddf3>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4630      	mov	r0, r6
 8004a3a:	4639      	mov	r1, r7
 8004a3c:	f7fb ffdc 	bl	80009f8 <__aeabi_dcmpgt>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d163      	bne.n	8004b0c <_dtoa_r+0x6e4>
 8004a44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a48:	2000      	movs	r0, #0
 8004a4a:	49a9      	ldr	r1, [pc, #676]	; (8004cf0 <_dtoa_r+0x8c8>)
 8004a4c:	f7fb fb8c 	bl	8000168 <__aeabi_dsub>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4630      	mov	r0, r6
 8004a56:	4639      	mov	r1, r7
 8004a58:	f7fb ffb0 	bl	80009bc <__aeabi_dcmplt>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	f43f af1d 	beq.w	800489c <_dtoa_r+0x474>
 8004a62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004a64:	1e7b      	subs	r3, r7, #1
 8004a66:	9314      	str	r3, [sp, #80]	; 0x50
 8004a68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004a6c:	2b30      	cmp	r3, #48	; 0x30
 8004a6e:	d0f8      	beq.n	8004a62 <_dtoa_r+0x63a>
 8004a70:	46c2      	mov	sl, r8
 8004a72:	e03b      	b.n	8004aec <_dtoa_r+0x6c4>
 8004a74:	4b9f      	ldr	r3, [pc, #636]	; (8004cf4 <_dtoa_r+0x8cc>)
 8004a76:	f7fb fd2f 	bl	80004d8 <__aeabi_dmul>
 8004a7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a7e:	e7bc      	b.n	80049fa <_dtoa_r+0x5d2>
 8004a80:	9f03      	ldr	r7, [sp, #12]
 8004a82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	f7fb fe4d 	bl	800072c <__aeabi_ddiv>
 8004a92:	f7fb ffd1 	bl	8000a38 <__aeabi_d2iz>
 8004a96:	4604      	mov	r4, r0
 8004a98:	f7fb fcb4 	bl	8000404 <__aeabi_i2d>
 8004a9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004aa0:	f7fb fd1a 	bl	80004d8 <__aeabi_dmul>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	4649      	mov	r1, r9
 8004aac:	f7fb fb5c 	bl	8000168 <__aeabi_dsub>
 8004ab0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004ab4:	f807 6b01 	strb.w	r6, [r7], #1
 8004ab8:	9e03      	ldr	r6, [sp, #12]
 8004aba:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004abe:	1bbe      	subs	r6, r7, r6
 8004ac0:	45b4      	cmp	ip, r6
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	d136      	bne.n	8004b36 <_dtoa_r+0x70e>
 8004ac8:	f7fb fb50 	bl	800016c <__adddf3>
 8004acc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ad0:	4680      	mov	r8, r0
 8004ad2:	4689      	mov	r9, r1
 8004ad4:	f7fb ff90 	bl	80009f8 <__aeabi_dcmpgt>
 8004ad8:	bb58      	cbnz	r0, 8004b32 <_dtoa_r+0x70a>
 8004ada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ade:	4640      	mov	r0, r8
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	f7fb ff61 	bl	80009a8 <__aeabi_dcmpeq>
 8004ae6:	b108      	cbz	r0, 8004aec <_dtoa_r+0x6c4>
 8004ae8:	07e1      	lsls	r1, r4, #31
 8004aea:	d422      	bmi.n	8004b32 <_dtoa_r+0x70a>
 8004aec:	4628      	mov	r0, r5
 8004aee:	4659      	mov	r1, fp
 8004af0:	f000 faf0 	bl	80050d4 <_Bfree>
 8004af4:	2300      	movs	r3, #0
 8004af6:	703b      	strb	r3, [r7, #0]
 8004af8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004afa:	f10a 0001 	add.w	r0, sl, #1
 8004afe:	6018      	str	r0, [r3, #0]
 8004b00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f43f acde 	beq.w	80044c4 <_dtoa_r+0x9c>
 8004b08:	601f      	str	r7, [r3, #0]
 8004b0a:	e4db      	b.n	80044c4 <_dtoa_r+0x9c>
 8004b0c:	4627      	mov	r7, r4
 8004b0e:	463b      	mov	r3, r7
 8004b10:	461f      	mov	r7, r3
 8004b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b16:	2a39      	cmp	r2, #57	; 0x39
 8004b18:	d107      	bne.n	8004b2a <_dtoa_r+0x702>
 8004b1a:	9a03      	ldr	r2, [sp, #12]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1f7      	bne.n	8004b10 <_dtoa_r+0x6e8>
 8004b20:	2230      	movs	r2, #48	; 0x30
 8004b22:	9903      	ldr	r1, [sp, #12]
 8004b24:	f108 0801 	add.w	r8, r8, #1
 8004b28:	700a      	strb	r2, [r1, #0]
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	3201      	adds	r2, #1
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	e79e      	b.n	8004a70 <_dtoa_r+0x648>
 8004b32:	46d0      	mov	r8, sl
 8004b34:	e7eb      	b.n	8004b0e <_dtoa_r+0x6e6>
 8004b36:	2200      	movs	r2, #0
 8004b38:	4b6e      	ldr	r3, [pc, #440]	; (8004cf4 <_dtoa_r+0x8cc>)
 8004b3a:	f7fb fccd 	bl	80004d8 <__aeabi_dmul>
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2300      	movs	r3, #0
 8004b42:	4680      	mov	r8, r0
 8004b44:	4689      	mov	r9, r1
 8004b46:	f7fb ff2f 	bl	80009a8 <__aeabi_dcmpeq>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d09b      	beq.n	8004a86 <_dtoa_r+0x65e>
 8004b4e:	e7cd      	b.n	8004aec <_dtoa_r+0x6c4>
 8004b50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b52:	2a00      	cmp	r2, #0
 8004b54:	f000 80d0 	beq.w	8004cf8 <_dtoa_r+0x8d0>
 8004b58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004b5a:	2a01      	cmp	r2, #1
 8004b5c:	f300 80ae 	bgt.w	8004cbc <_dtoa_r+0x894>
 8004b60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004b62:	2a00      	cmp	r2, #0
 8004b64:	f000 80a6 	beq.w	8004cb4 <_dtoa_r+0x88c>
 8004b68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004b6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004b6e:	9f06      	ldr	r7, [sp, #24]
 8004b70:	9a06      	ldr	r2, [sp, #24]
 8004b72:	2101      	movs	r1, #1
 8004b74:	441a      	add	r2, r3
 8004b76:	9206      	str	r2, [sp, #24]
 8004b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	441a      	add	r2, r3
 8004b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8004b80:	f000 fb5e 	bl	8005240 <__i2b>
 8004b84:	4606      	mov	r6, r0
 8004b86:	2f00      	cmp	r7, #0
 8004b88:	dd0c      	ble.n	8004ba4 <_dtoa_r+0x77c>
 8004b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	dd09      	ble.n	8004ba4 <_dtoa_r+0x77c>
 8004b90:	42bb      	cmp	r3, r7
 8004b92:	bfa8      	it	ge
 8004b94:	463b      	movge	r3, r7
 8004b96:	9a06      	ldr	r2, [sp, #24]
 8004b98:	1aff      	subs	r7, r7, r3
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	9206      	str	r2, [sp, #24]
 8004b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba6:	b1f3      	cbz	r3, 8004be6 <_dtoa_r+0x7be>
 8004ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80a8 	beq.w	8004d00 <_dtoa_r+0x8d8>
 8004bb0:	2c00      	cmp	r4, #0
 8004bb2:	dd10      	ble.n	8004bd6 <_dtoa_r+0x7ae>
 8004bb4:	4631      	mov	r1, r6
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 fbff 	bl	80053bc <__pow5mult>
 8004bbe:	465a      	mov	r2, fp
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 fb51 	bl	800526c <__multiply>
 8004bca:	4680      	mov	r8, r0
 8004bcc:	4659      	mov	r1, fp
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 fa80 	bl	80050d4 <_Bfree>
 8004bd4:	46c3      	mov	fp, r8
 8004bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bd8:	1b1a      	subs	r2, r3, r4
 8004bda:	d004      	beq.n	8004be6 <_dtoa_r+0x7be>
 8004bdc:	4659      	mov	r1, fp
 8004bde:	4628      	mov	r0, r5
 8004be0:	f000 fbec 	bl	80053bc <__pow5mult>
 8004be4:	4683      	mov	fp, r0
 8004be6:	2101      	movs	r1, #1
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 fb29 	bl	8005240 <__i2b>
 8004bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f340 8086 	ble.w	8004d04 <_dtoa_r+0x8dc>
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 fbdd 	bl	80053bc <__pow5mult>
 8004c02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c04:	4604      	mov	r4, r0
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	dd7f      	ble.n	8004d0a <_dtoa_r+0x8e2>
 8004c0a:	f04f 0800 	mov.w	r8, #0
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004c14:	6918      	ldr	r0, [r3, #16]
 8004c16:	f000 fac5 	bl	80051a4 <__hi0bits>
 8004c1a:	f1c0 0020 	rsb	r0, r0, #32
 8004c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c20:	4418      	add	r0, r3
 8004c22:	f010 001f 	ands.w	r0, r0, #31
 8004c26:	f000 8092 	beq.w	8004d4e <_dtoa_r+0x926>
 8004c2a:	f1c0 0320 	rsb	r3, r0, #32
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	f340 808a 	ble.w	8004d48 <_dtoa_r+0x920>
 8004c34:	f1c0 001c 	rsb	r0, r0, #28
 8004c38:	9b06      	ldr	r3, [sp, #24]
 8004c3a:	4407      	add	r7, r0
 8004c3c:	4403      	add	r3, r0
 8004c3e:	9306      	str	r3, [sp, #24]
 8004c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c42:	4403      	add	r3, r0
 8004c44:	9309      	str	r3, [sp, #36]	; 0x24
 8004c46:	9b06      	ldr	r3, [sp, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	dd05      	ble.n	8004c58 <_dtoa_r+0x830>
 8004c4c:	4659      	mov	r1, fp
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4628      	mov	r0, r5
 8004c52:	f000 fc0d 	bl	8005470 <__lshift>
 8004c56:	4683      	mov	fp, r0
 8004c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	dd05      	ble.n	8004c6a <_dtoa_r+0x842>
 8004c5e:	4621      	mov	r1, r4
 8004c60:	461a      	mov	r2, r3
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 fc04 	bl	8005470 <__lshift>
 8004c68:	4604      	mov	r4, r0
 8004c6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d070      	beq.n	8004d52 <_dtoa_r+0x92a>
 8004c70:	4621      	mov	r1, r4
 8004c72:	4658      	mov	r0, fp
 8004c74:	f000 fc6c 	bl	8005550 <__mcmp>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	da6a      	bge.n	8004d52 <_dtoa_r+0x92a>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4659      	mov	r1, fp
 8004c80:	220a      	movs	r2, #10
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 fa48 	bl	8005118 <__multadd>
 8004c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c8a:	4683      	mov	fp, r0
 8004c8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8194 	beq.w	8004fbe <_dtoa_r+0xb96>
 8004c96:	4631      	mov	r1, r6
 8004c98:	2300      	movs	r3, #0
 8004c9a:	220a      	movs	r2, #10
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f000 fa3b 	bl	8005118 <__multadd>
 8004ca2:	f1b9 0f00 	cmp.w	r9, #0
 8004ca6:	4606      	mov	r6, r0
 8004ca8:	f300 8093 	bgt.w	8004dd2 <_dtoa_r+0x9aa>
 8004cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	dc57      	bgt.n	8004d62 <_dtoa_r+0x93a>
 8004cb2:	e08e      	b.n	8004dd2 <_dtoa_r+0x9aa>
 8004cb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004cb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004cba:	e757      	b.n	8004b6c <_dtoa_r+0x744>
 8004cbc:	9b08      	ldr	r3, [sp, #32]
 8004cbe:	1e5c      	subs	r4, r3, #1
 8004cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc2:	42a3      	cmp	r3, r4
 8004cc4:	bfb7      	itett	lt
 8004cc6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004cc8:	1b1c      	subge	r4, r3, r4
 8004cca:	1ae2      	sublt	r2, r4, r3
 8004ccc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004cce:	bfbe      	ittt	lt
 8004cd0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004cd2:	189b      	addlt	r3, r3, r2
 8004cd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004cd6:	9b08      	ldr	r3, [sp, #32]
 8004cd8:	bfb8      	it	lt
 8004cda:	2400      	movlt	r4, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bfbb      	ittet	lt
 8004ce0:	9b06      	ldrlt	r3, [sp, #24]
 8004ce2:	9a08      	ldrlt	r2, [sp, #32]
 8004ce4:	9f06      	ldrge	r7, [sp, #24]
 8004ce6:	1a9f      	sublt	r7, r3, r2
 8004ce8:	bfac      	ite	ge
 8004cea:	9b08      	ldrge	r3, [sp, #32]
 8004cec:	2300      	movlt	r3, #0
 8004cee:	e73f      	b.n	8004b70 <_dtoa_r+0x748>
 8004cf0:	3fe00000 	.word	0x3fe00000
 8004cf4:	40240000 	.word	0x40240000
 8004cf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004cfa:	9f06      	ldr	r7, [sp, #24]
 8004cfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004cfe:	e742      	b.n	8004b86 <_dtoa_r+0x75e>
 8004d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d02:	e76b      	b.n	8004bdc <_dtoa_r+0x7b4>
 8004d04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	dc19      	bgt.n	8004d3e <_dtoa_r+0x916>
 8004d0a:	9b04      	ldr	r3, [sp, #16]
 8004d0c:	b9bb      	cbnz	r3, 8004d3e <_dtoa_r+0x916>
 8004d0e:	9b05      	ldr	r3, [sp, #20]
 8004d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d14:	b99b      	cbnz	r3, 8004d3e <_dtoa_r+0x916>
 8004d16:	9b05      	ldr	r3, [sp, #20]
 8004d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d1c:	0d1b      	lsrs	r3, r3, #20
 8004d1e:	051b      	lsls	r3, r3, #20
 8004d20:	b183      	cbz	r3, 8004d44 <_dtoa_r+0x91c>
 8004d22:	f04f 0801 	mov.w	r8, #1
 8004d26:	9b06      	ldr	r3, [sp, #24]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	9306      	str	r3, [sp, #24]
 8004d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d2e:	3301      	adds	r3, #1
 8004d30:	9309      	str	r3, [sp, #36]	; 0x24
 8004d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f47f af6a 	bne.w	8004c0e <_dtoa_r+0x7e6>
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	e76f      	b.n	8004c1e <_dtoa_r+0x7f6>
 8004d3e:	f04f 0800 	mov.w	r8, #0
 8004d42:	e7f6      	b.n	8004d32 <_dtoa_r+0x90a>
 8004d44:	4698      	mov	r8, r3
 8004d46:	e7f4      	b.n	8004d32 <_dtoa_r+0x90a>
 8004d48:	f43f af7d 	beq.w	8004c46 <_dtoa_r+0x81e>
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	301c      	adds	r0, #28
 8004d50:	e772      	b.n	8004c38 <_dtoa_r+0x810>
 8004d52:	9b08      	ldr	r3, [sp, #32]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	dc36      	bgt.n	8004dc6 <_dtoa_r+0x99e>
 8004d58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	dd33      	ble.n	8004dc6 <_dtoa_r+0x99e>
 8004d5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d62:	f1b9 0f00 	cmp.w	r9, #0
 8004d66:	d10d      	bne.n	8004d84 <_dtoa_r+0x95c>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	2205      	movs	r2, #5
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 f9d2 	bl	8005118 <__multadd>
 8004d74:	4601      	mov	r1, r0
 8004d76:	4604      	mov	r4, r0
 8004d78:	4658      	mov	r0, fp
 8004d7a:	f000 fbe9 	bl	8005550 <__mcmp>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	f73f adb8 	bgt.w	80048f4 <_dtoa_r+0x4cc>
 8004d84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d86:	9f03      	ldr	r7, [sp, #12]
 8004d88:	ea6f 0a03 	mvn.w	sl, r3
 8004d8c:	f04f 0800 	mov.w	r8, #0
 8004d90:	4621      	mov	r1, r4
 8004d92:	4628      	mov	r0, r5
 8004d94:	f000 f99e 	bl	80050d4 <_Bfree>
 8004d98:	2e00      	cmp	r6, #0
 8004d9a:	f43f aea7 	beq.w	8004aec <_dtoa_r+0x6c4>
 8004d9e:	f1b8 0f00 	cmp.w	r8, #0
 8004da2:	d005      	beq.n	8004db0 <_dtoa_r+0x988>
 8004da4:	45b0      	cmp	r8, r6
 8004da6:	d003      	beq.n	8004db0 <_dtoa_r+0x988>
 8004da8:	4641      	mov	r1, r8
 8004daa:	4628      	mov	r0, r5
 8004dac:	f000 f992 	bl	80050d4 <_Bfree>
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	f000 f98e 	bl	80050d4 <_Bfree>
 8004db8:	e698      	b.n	8004aec <_dtoa_r+0x6c4>
 8004dba:	2400      	movs	r4, #0
 8004dbc:	4626      	mov	r6, r4
 8004dbe:	e7e1      	b.n	8004d84 <_dtoa_r+0x95c>
 8004dc0:	46c2      	mov	sl, r8
 8004dc2:	4626      	mov	r6, r4
 8004dc4:	e596      	b.n	80048f4 <_dtoa_r+0x4cc>
 8004dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80fd 	beq.w	8004fcc <_dtoa_r+0xba4>
 8004dd2:	2f00      	cmp	r7, #0
 8004dd4:	dd05      	ble.n	8004de2 <_dtoa_r+0x9ba>
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	463a      	mov	r2, r7
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 fb48 	bl	8005470 <__lshift>
 8004de0:	4606      	mov	r6, r0
 8004de2:	f1b8 0f00 	cmp.w	r8, #0
 8004de6:	d05c      	beq.n	8004ea2 <_dtoa_r+0xa7a>
 8004de8:	4628      	mov	r0, r5
 8004dea:	6871      	ldr	r1, [r6, #4]
 8004dec:	f000 f932 	bl	8005054 <_Balloc>
 8004df0:	4607      	mov	r7, r0
 8004df2:	b928      	cbnz	r0, 8004e00 <_dtoa_r+0x9d8>
 8004df4:	4602      	mov	r2, r0
 8004df6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004dfa:	4b7f      	ldr	r3, [pc, #508]	; (8004ff8 <_dtoa_r+0xbd0>)
 8004dfc:	f7ff bb28 	b.w	8004450 <_dtoa_r+0x28>
 8004e00:	6932      	ldr	r2, [r6, #16]
 8004e02:	f106 010c 	add.w	r1, r6, #12
 8004e06:	3202      	adds	r2, #2
 8004e08:	0092      	lsls	r2, r2, #2
 8004e0a:	300c      	adds	r0, #12
 8004e0c:	f000 f914 	bl	8005038 <memcpy>
 8004e10:	2201      	movs	r2, #1
 8004e12:	4639      	mov	r1, r7
 8004e14:	4628      	mov	r0, r5
 8004e16:	f000 fb2b 	bl	8005470 <__lshift>
 8004e1a:	46b0      	mov	r8, r6
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	3301      	adds	r3, #1
 8004e22:	9308      	str	r3, [sp, #32]
 8004e24:	9b03      	ldr	r3, [sp, #12]
 8004e26:	444b      	add	r3, r9
 8004e28:	930a      	str	r3, [sp, #40]	; 0x28
 8004e2a:	9b04      	ldr	r3, [sp, #16]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	9309      	str	r3, [sp, #36]	; 0x24
 8004e32:	9b08      	ldr	r3, [sp, #32]
 8004e34:	4621      	mov	r1, r4
 8004e36:	3b01      	subs	r3, #1
 8004e38:	4658      	mov	r0, fp
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	f7ff fa66 	bl	800430c <quorem>
 8004e40:	4603      	mov	r3, r0
 8004e42:	4641      	mov	r1, r8
 8004e44:	3330      	adds	r3, #48	; 0x30
 8004e46:	9006      	str	r0, [sp, #24]
 8004e48:	4658      	mov	r0, fp
 8004e4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e4c:	f000 fb80 	bl	8005550 <__mcmp>
 8004e50:	4632      	mov	r2, r6
 8004e52:	4681      	mov	r9, r0
 8004e54:	4621      	mov	r1, r4
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 fb96 	bl	8005588 <__mdiff>
 8004e5c:	68c2      	ldr	r2, [r0, #12]
 8004e5e:	4607      	mov	r7, r0
 8004e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e62:	bb02      	cbnz	r2, 8004ea6 <_dtoa_r+0xa7e>
 8004e64:	4601      	mov	r1, r0
 8004e66:	4658      	mov	r0, fp
 8004e68:	f000 fb72 	bl	8005550 <__mcmp>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e70:	4639      	mov	r1, r7
 8004e72:	4628      	mov	r0, r5
 8004e74:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004e78:	f000 f92c 	bl	80050d4 <_Bfree>
 8004e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e80:	9f08      	ldr	r7, [sp, #32]
 8004e82:	ea43 0102 	orr.w	r1, r3, r2
 8004e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e8c:	d10d      	bne.n	8004eaa <_dtoa_r+0xa82>
 8004e8e:	2b39      	cmp	r3, #57	; 0x39
 8004e90:	d029      	beq.n	8004ee6 <_dtoa_r+0xabe>
 8004e92:	f1b9 0f00 	cmp.w	r9, #0
 8004e96:	dd01      	ble.n	8004e9c <_dtoa_r+0xa74>
 8004e98:	9b06      	ldr	r3, [sp, #24]
 8004e9a:	3331      	adds	r3, #49	; 0x31
 8004e9c:	9a04      	ldr	r2, [sp, #16]
 8004e9e:	7013      	strb	r3, [r2, #0]
 8004ea0:	e776      	b.n	8004d90 <_dtoa_r+0x968>
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	e7b9      	b.n	8004e1a <_dtoa_r+0x9f2>
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	e7e2      	b.n	8004e70 <_dtoa_r+0xa48>
 8004eaa:	f1b9 0f00 	cmp.w	r9, #0
 8004eae:	db06      	blt.n	8004ebe <_dtoa_r+0xa96>
 8004eb0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004eb2:	ea41 0909 	orr.w	r9, r1, r9
 8004eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004eb8:	ea59 0101 	orrs.w	r1, r9, r1
 8004ebc:	d120      	bne.n	8004f00 <_dtoa_r+0xad8>
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	ddec      	ble.n	8004e9c <_dtoa_r+0xa74>
 8004ec2:	4659      	mov	r1, fp
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	9308      	str	r3, [sp, #32]
 8004eca:	f000 fad1 	bl	8005470 <__lshift>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4683      	mov	fp, r0
 8004ed2:	f000 fb3d 	bl	8005550 <__mcmp>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	9b08      	ldr	r3, [sp, #32]
 8004eda:	dc02      	bgt.n	8004ee2 <_dtoa_r+0xaba>
 8004edc:	d1de      	bne.n	8004e9c <_dtoa_r+0xa74>
 8004ede:	07da      	lsls	r2, r3, #31
 8004ee0:	d5dc      	bpl.n	8004e9c <_dtoa_r+0xa74>
 8004ee2:	2b39      	cmp	r3, #57	; 0x39
 8004ee4:	d1d8      	bne.n	8004e98 <_dtoa_r+0xa70>
 8004ee6:	2339      	movs	r3, #57	; 0x39
 8004ee8:	9a04      	ldr	r2, [sp, #16]
 8004eea:	7013      	strb	r3, [r2, #0]
 8004eec:	463b      	mov	r3, r7
 8004eee:	461f      	mov	r7, r3
 8004ef0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	2a39      	cmp	r2, #57	; 0x39
 8004ef8:	d050      	beq.n	8004f9c <_dtoa_r+0xb74>
 8004efa:	3201      	adds	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	e747      	b.n	8004d90 <_dtoa_r+0x968>
 8004f00:	2a00      	cmp	r2, #0
 8004f02:	dd03      	ble.n	8004f0c <_dtoa_r+0xae4>
 8004f04:	2b39      	cmp	r3, #57	; 0x39
 8004f06:	d0ee      	beq.n	8004ee6 <_dtoa_r+0xabe>
 8004f08:	3301      	adds	r3, #1
 8004f0a:	e7c7      	b.n	8004e9c <_dtoa_r+0xa74>
 8004f0c:	9a08      	ldr	r2, [sp, #32]
 8004f0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f10:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004f14:	428a      	cmp	r2, r1
 8004f16:	d02a      	beq.n	8004f6e <_dtoa_r+0xb46>
 8004f18:	4659      	mov	r1, fp
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	220a      	movs	r2, #10
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 f8fa 	bl	8005118 <__multadd>
 8004f24:	45b0      	cmp	r8, r6
 8004f26:	4683      	mov	fp, r0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	f04f 020a 	mov.w	r2, #10
 8004f30:	4641      	mov	r1, r8
 8004f32:	4628      	mov	r0, r5
 8004f34:	d107      	bne.n	8004f46 <_dtoa_r+0xb1e>
 8004f36:	f000 f8ef 	bl	8005118 <__multadd>
 8004f3a:	4680      	mov	r8, r0
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	9b08      	ldr	r3, [sp, #32]
 8004f40:	3301      	adds	r3, #1
 8004f42:	9308      	str	r3, [sp, #32]
 8004f44:	e775      	b.n	8004e32 <_dtoa_r+0xa0a>
 8004f46:	f000 f8e7 	bl	8005118 <__multadd>
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4680      	mov	r8, r0
 8004f4e:	2300      	movs	r3, #0
 8004f50:	220a      	movs	r2, #10
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 f8e0 	bl	8005118 <__multadd>
 8004f58:	4606      	mov	r6, r0
 8004f5a:	e7f0      	b.n	8004f3e <_dtoa_r+0xb16>
 8004f5c:	f1b9 0f00 	cmp.w	r9, #0
 8004f60:	bfcc      	ite	gt
 8004f62:	464f      	movgt	r7, r9
 8004f64:	2701      	movle	r7, #1
 8004f66:	f04f 0800 	mov.w	r8, #0
 8004f6a:	9a03      	ldr	r2, [sp, #12]
 8004f6c:	4417      	add	r7, r2
 8004f6e:	4659      	mov	r1, fp
 8004f70:	2201      	movs	r2, #1
 8004f72:	4628      	mov	r0, r5
 8004f74:	9308      	str	r3, [sp, #32]
 8004f76:	f000 fa7b 	bl	8005470 <__lshift>
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4683      	mov	fp, r0
 8004f7e:	f000 fae7 	bl	8005550 <__mcmp>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	dcb2      	bgt.n	8004eec <_dtoa_r+0xac4>
 8004f86:	d102      	bne.n	8004f8e <_dtoa_r+0xb66>
 8004f88:	9b08      	ldr	r3, [sp, #32]
 8004f8a:	07db      	lsls	r3, r3, #31
 8004f8c:	d4ae      	bmi.n	8004eec <_dtoa_r+0xac4>
 8004f8e:	463b      	mov	r3, r7
 8004f90:	461f      	mov	r7, r3
 8004f92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f96:	2a30      	cmp	r2, #48	; 0x30
 8004f98:	d0fa      	beq.n	8004f90 <_dtoa_r+0xb68>
 8004f9a:	e6f9      	b.n	8004d90 <_dtoa_r+0x968>
 8004f9c:	9a03      	ldr	r2, [sp, #12]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d1a5      	bne.n	8004eee <_dtoa_r+0xac6>
 8004fa2:	2331      	movs	r3, #49	; 0x31
 8004fa4:	f10a 0a01 	add.w	sl, sl, #1
 8004fa8:	e779      	b.n	8004e9e <_dtoa_r+0xa76>
 8004faa:	4b14      	ldr	r3, [pc, #80]	; (8004ffc <_dtoa_r+0xbd4>)
 8004fac:	f7ff baa8 	b.w	8004500 <_dtoa_r+0xd8>
 8004fb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f47f aa81 	bne.w	80044ba <_dtoa_r+0x92>
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <_dtoa_r+0xbd8>)
 8004fba:	f7ff baa1 	b.w	8004500 <_dtoa_r+0xd8>
 8004fbe:	f1b9 0f00 	cmp.w	r9, #0
 8004fc2:	dc03      	bgt.n	8004fcc <_dtoa_r+0xba4>
 8004fc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	f73f aecb 	bgt.w	8004d62 <_dtoa_r+0x93a>
 8004fcc:	9f03      	ldr	r7, [sp, #12]
 8004fce:	4621      	mov	r1, r4
 8004fd0:	4658      	mov	r0, fp
 8004fd2:	f7ff f99b 	bl	800430c <quorem>
 8004fd6:	9a03      	ldr	r2, [sp, #12]
 8004fd8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004fdc:	f807 3b01 	strb.w	r3, [r7], #1
 8004fe0:	1aba      	subs	r2, r7, r2
 8004fe2:	4591      	cmp	r9, r2
 8004fe4:	ddba      	ble.n	8004f5c <_dtoa_r+0xb34>
 8004fe6:	4659      	mov	r1, fp
 8004fe8:	2300      	movs	r3, #0
 8004fea:	220a      	movs	r2, #10
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 f893 	bl	8005118 <__multadd>
 8004ff2:	4683      	mov	fp, r0
 8004ff4:	e7eb      	b.n	8004fce <_dtoa_r+0xba6>
 8004ff6:	bf00      	nop
 8004ff8:	080068c7 	.word	0x080068c7
 8004ffc:	08006824 	.word	0x08006824
 8005000:	08006848 	.word	0x08006848

08005004 <_localeconv_r>:
 8005004:	4800      	ldr	r0, [pc, #0]	; (8005008 <_localeconv_r+0x4>)
 8005006:	4770      	bx	lr
 8005008:	20000160 	.word	0x20000160

0800500c <malloc>:
 800500c:	4b02      	ldr	r3, [pc, #8]	; (8005018 <malloc+0xc>)
 800500e:	4601      	mov	r1, r0
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	f000 bc1d 	b.w	8005850 <_malloc_r>
 8005016:	bf00      	nop
 8005018:	2000000c 	.word	0x2000000c

0800501c <memchr>:
 800501c:	4603      	mov	r3, r0
 800501e:	b510      	push	{r4, lr}
 8005020:	b2c9      	uxtb	r1, r1
 8005022:	4402      	add	r2, r0
 8005024:	4293      	cmp	r3, r2
 8005026:	4618      	mov	r0, r3
 8005028:	d101      	bne.n	800502e <memchr+0x12>
 800502a:	2000      	movs	r0, #0
 800502c:	e003      	b.n	8005036 <memchr+0x1a>
 800502e:	7804      	ldrb	r4, [r0, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	428c      	cmp	r4, r1
 8005034:	d1f6      	bne.n	8005024 <memchr+0x8>
 8005036:	bd10      	pop	{r4, pc}

08005038 <memcpy>:
 8005038:	440a      	add	r2, r1
 800503a:	4291      	cmp	r1, r2
 800503c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005040:	d100      	bne.n	8005044 <memcpy+0xc>
 8005042:	4770      	bx	lr
 8005044:	b510      	push	{r4, lr}
 8005046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800504a:	4291      	cmp	r1, r2
 800504c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005050:	d1f9      	bne.n	8005046 <memcpy+0xe>
 8005052:	bd10      	pop	{r4, pc}

08005054 <_Balloc>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005058:	4604      	mov	r4, r0
 800505a:	460d      	mov	r5, r1
 800505c:	b976      	cbnz	r6, 800507c <_Balloc+0x28>
 800505e:	2010      	movs	r0, #16
 8005060:	f7ff ffd4 	bl	800500c <malloc>
 8005064:	4602      	mov	r2, r0
 8005066:	6260      	str	r0, [r4, #36]	; 0x24
 8005068:	b920      	cbnz	r0, 8005074 <_Balloc+0x20>
 800506a:	2166      	movs	r1, #102	; 0x66
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <_Balloc+0x78>)
 800506e:	4818      	ldr	r0, [pc, #96]	; (80050d0 <_Balloc+0x7c>)
 8005070:	f000 fdce 	bl	8005c10 <__assert_func>
 8005074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005078:	6006      	str	r6, [r0, #0]
 800507a:	60c6      	str	r6, [r0, #12]
 800507c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800507e:	68f3      	ldr	r3, [r6, #12]
 8005080:	b183      	cbz	r3, 80050a4 <_Balloc+0x50>
 8005082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800508a:	b9b8      	cbnz	r0, 80050bc <_Balloc+0x68>
 800508c:	2101      	movs	r1, #1
 800508e:	fa01 f605 	lsl.w	r6, r1, r5
 8005092:	1d72      	adds	r2, r6, #5
 8005094:	4620      	mov	r0, r4
 8005096:	0092      	lsls	r2, r2, #2
 8005098:	f000 fb5e 	bl	8005758 <_calloc_r>
 800509c:	b160      	cbz	r0, 80050b8 <_Balloc+0x64>
 800509e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050a2:	e00e      	b.n	80050c2 <_Balloc+0x6e>
 80050a4:	2221      	movs	r2, #33	; 0x21
 80050a6:	2104      	movs	r1, #4
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 fb55 	bl	8005758 <_calloc_r>
 80050ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b0:	60f0      	str	r0, [r6, #12]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e4      	bne.n	8005082 <_Balloc+0x2e>
 80050b8:	2000      	movs	r0, #0
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	6802      	ldr	r2, [r0, #0]
 80050be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050c2:	2300      	movs	r3, #0
 80050c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050c8:	e7f7      	b.n	80050ba <_Balloc+0x66>
 80050ca:	bf00      	nop
 80050cc:	08006855 	.word	0x08006855
 80050d0:	080068d8 	.word	0x080068d8

080050d4 <_Bfree>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050d8:	4605      	mov	r5, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	b976      	cbnz	r6, 80050fc <_Bfree+0x28>
 80050de:	2010      	movs	r0, #16
 80050e0:	f7ff ff94 	bl	800500c <malloc>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6268      	str	r0, [r5, #36]	; 0x24
 80050e8:	b920      	cbnz	r0, 80050f4 <_Bfree+0x20>
 80050ea:	218a      	movs	r1, #138	; 0x8a
 80050ec:	4b08      	ldr	r3, [pc, #32]	; (8005110 <_Bfree+0x3c>)
 80050ee:	4809      	ldr	r0, [pc, #36]	; (8005114 <_Bfree+0x40>)
 80050f0:	f000 fd8e 	bl	8005c10 <__assert_func>
 80050f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050f8:	6006      	str	r6, [r0, #0]
 80050fa:	60c6      	str	r6, [r0, #12]
 80050fc:	b13c      	cbz	r4, 800510e <_Bfree+0x3a>
 80050fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005100:	6862      	ldr	r2, [r4, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005108:	6021      	str	r1, [r4, #0]
 800510a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	08006855 	.word	0x08006855
 8005114:	080068d8 	.word	0x080068d8

08005118 <__multadd>:
 8005118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800511c:	4607      	mov	r7, r0
 800511e:	460c      	mov	r4, r1
 8005120:	461e      	mov	r6, r3
 8005122:	2000      	movs	r0, #0
 8005124:	690d      	ldr	r5, [r1, #16]
 8005126:	f101 0c14 	add.w	ip, r1, #20
 800512a:	f8dc 3000 	ldr.w	r3, [ip]
 800512e:	3001      	adds	r0, #1
 8005130:	b299      	uxth	r1, r3
 8005132:	fb02 6101 	mla	r1, r2, r1, r6
 8005136:	0c1e      	lsrs	r6, r3, #16
 8005138:	0c0b      	lsrs	r3, r1, #16
 800513a:	fb02 3306 	mla	r3, r2, r6, r3
 800513e:	b289      	uxth	r1, r1
 8005140:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005144:	4285      	cmp	r5, r0
 8005146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800514a:	f84c 1b04 	str.w	r1, [ip], #4
 800514e:	dcec      	bgt.n	800512a <__multadd+0x12>
 8005150:	b30e      	cbz	r6, 8005196 <__multadd+0x7e>
 8005152:	68a3      	ldr	r3, [r4, #8]
 8005154:	42ab      	cmp	r3, r5
 8005156:	dc19      	bgt.n	800518c <__multadd+0x74>
 8005158:	6861      	ldr	r1, [r4, #4]
 800515a:	4638      	mov	r0, r7
 800515c:	3101      	adds	r1, #1
 800515e:	f7ff ff79 	bl	8005054 <_Balloc>
 8005162:	4680      	mov	r8, r0
 8005164:	b928      	cbnz	r0, 8005172 <__multadd+0x5a>
 8005166:	4602      	mov	r2, r0
 8005168:	21b5      	movs	r1, #181	; 0xb5
 800516a:	4b0c      	ldr	r3, [pc, #48]	; (800519c <__multadd+0x84>)
 800516c:	480c      	ldr	r0, [pc, #48]	; (80051a0 <__multadd+0x88>)
 800516e:	f000 fd4f 	bl	8005c10 <__assert_func>
 8005172:	6922      	ldr	r2, [r4, #16]
 8005174:	f104 010c 	add.w	r1, r4, #12
 8005178:	3202      	adds	r2, #2
 800517a:	0092      	lsls	r2, r2, #2
 800517c:	300c      	adds	r0, #12
 800517e:	f7ff ff5b 	bl	8005038 <memcpy>
 8005182:	4621      	mov	r1, r4
 8005184:	4638      	mov	r0, r7
 8005186:	f7ff ffa5 	bl	80050d4 <_Bfree>
 800518a:	4644      	mov	r4, r8
 800518c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005190:	3501      	adds	r5, #1
 8005192:	615e      	str	r6, [r3, #20]
 8005194:	6125      	str	r5, [r4, #16]
 8005196:	4620      	mov	r0, r4
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519c:	080068c7 	.word	0x080068c7
 80051a0:	080068d8 	.word	0x080068d8

080051a4 <__hi0bits>:
 80051a4:	0c02      	lsrs	r2, r0, #16
 80051a6:	0412      	lsls	r2, r2, #16
 80051a8:	4603      	mov	r3, r0
 80051aa:	b9ca      	cbnz	r2, 80051e0 <__hi0bits+0x3c>
 80051ac:	0403      	lsls	r3, r0, #16
 80051ae:	2010      	movs	r0, #16
 80051b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80051b4:	bf04      	itt	eq
 80051b6:	021b      	lsleq	r3, r3, #8
 80051b8:	3008      	addeq	r0, #8
 80051ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80051be:	bf04      	itt	eq
 80051c0:	011b      	lsleq	r3, r3, #4
 80051c2:	3004      	addeq	r0, #4
 80051c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80051c8:	bf04      	itt	eq
 80051ca:	009b      	lsleq	r3, r3, #2
 80051cc:	3002      	addeq	r0, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	db05      	blt.n	80051de <__hi0bits+0x3a>
 80051d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80051d6:	f100 0001 	add.w	r0, r0, #1
 80051da:	bf08      	it	eq
 80051dc:	2020      	moveq	r0, #32
 80051de:	4770      	bx	lr
 80051e0:	2000      	movs	r0, #0
 80051e2:	e7e5      	b.n	80051b0 <__hi0bits+0xc>

080051e4 <__lo0bits>:
 80051e4:	6803      	ldr	r3, [r0, #0]
 80051e6:	4602      	mov	r2, r0
 80051e8:	f013 0007 	ands.w	r0, r3, #7
 80051ec:	d00b      	beq.n	8005206 <__lo0bits+0x22>
 80051ee:	07d9      	lsls	r1, r3, #31
 80051f0:	d421      	bmi.n	8005236 <__lo0bits+0x52>
 80051f2:	0798      	lsls	r0, r3, #30
 80051f4:	bf49      	itett	mi
 80051f6:	085b      	lsrmi	r3, r3, #1
 80051f8:	089b      	lsrpl	r3, r3, #2
 80051fa:	2001      	movmi	r0, #1
 80051fc:	6013      	strmi	r3, [r2, #0]
 80051fe:	bf5c      	itt	pl
 8005200:	2002      	movpl	r0, #2
 8005202:	6013      	strpl	r3, [r2, #0]
 8005204:	4770      	bx	lr
 8005206:	b299      	uxth	r1, r3
 8005208:	b909      	cbnz	r1, 800520e <__lo0bits+0x2a>
 800520a:	2010      	movs	r0, #16
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	b2d9      	uxtb	r1, r3
 8005210:	b909      	cbnz	r1, 8005216 <__lo0bits+0x32>
 8005212:	3008      	adds	r0, #8
 8005214:	0a1b      	lsrs	r3, r3, #8
 8005216:	0719      	lsls	r1, r3, #28
 8005218:	bf04      	itt	eq
 800521a:	091b      	lsreq	r3, r3, #4
 800521c:	3004      	addeq	r0, #4
 800521e:	0799      	lsls	r1, r3, #30
 8005220:	bf04      	itt	eq
 8005222:	089b      	lsreq	r3, r3, #2
 8005224:	3002      	addeq	r0, #2
 8005226:	07d9      	lsls	r1, r3, #31
 8005228:	d403      	bmi.n	8005232 <__lo0bits+0x4e>
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	f100 0001 	add.w	r0, r0, #1
 8005230:	d003      	beq.n	800523a <__lo0bits+0x56>
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4770      	bx	lr
 8005236:	2000      	movs	r0, #0
 8005238:	4770      	bx	lr
 800523a:	2020      	movs	r0, #32
 800523c:	4770      	bx	lr
	...

08005240 <__i2b>:
 8005240:	b510      	push	{r4, lr}
 8005242:	460c      	mov	r4, r1
 8005244:	2101      	movs	r1, #1
 8005246:	f7ff ff05 	bl	8005054 <_Balloc>
 800524a:	4602      	mov	r2, r0
 800524c:	b928      	cbnz	r0, 800525a <__i2b+0x1a>
 800524e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005252:	4b04      	ldr	r3, [pc, #16]	; (8005264 <__i2b+0x24>)
 8005254:	4804      	ldr	r0, [pc, #16]	; (8005268 <__i2b+0x28>)
 8005256:	f000 fcdb 	bl	8005c10 <__assert_func>
 800525a:	2301      	movs	r3, #1
 800525c:	6144      	str	r4, [r0, #20]
 800525e:	6103      	str	r3, [r0, #16]
 8005260:	bd10      	pop	{r4, pc}
 8005262:	bf00      	nop
 8005264:	080068c7 	.word	0x080068c7
 8005268:	080068d8 	.word	0x080068d8

0800526c <__multiply>:
 800526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005270:	4691      	mov	r9, r2
 8005272:	690a      	ldr	r2, [r1, #16]
 8005274:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005278:	460c      	mov	r4, r1
 800527a:	429a      	cmp	r2, r3
 800527c:	bfbe      	ittt	lt
 800527e:	460b      	movlt	r3, r1
 8005280:	464c      	movlt	r4, r9
 8005282:	4699      	movlt	r9, r3
 8005284:	6927      	ldr	r7, [r4, #16]
 8005286:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800528a:	68a3      	ldr	r3, [r4, #8]
 800528c:	6861      	ldr	r1, [r4, #4]
 800528e:	eb07 060a 	add.w	r6, r7, sl
 8005292:	42b3      	cmp	r3, r6
 8005294:	b085      	sub	sp, #20
 8005296:	bfb8      	it	lt
 8005298:	3101      	addlt	r1, #1
 800529a:	f7ff fedb 	bl	8005054 <_Balloc>
 800529e:	b930      	cbnz	r0, 80052ae <__multiply+0x42>
 80052a0:	4602      	mov	r2, r0
 80052a2:	f240 115d 	movw	r1, #349	; 0x15d
 80052a6:	4b43      	ldr	r3, [pc, #268]	; (80053b4 <__multiply+0x148>)
 80052a8:	4843      	ldr	r0, [pc, #268]	; (80053b8 <__multiply+0x14c>)
 80052aa:	f000 fcb1 	bl	8005c10 <__assert_func>
 80052ae:	f100 0514 	add.w	r5, r0, #20
 80052b2:	462b      	mov	r3, r5
 80052b4:	2200      	movs	r2, #0
 80052b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80052ba:	4543      	cmp	r3, r8
 80052bc:	d321      	bcc.n	8005302 <__multiply+0x96>
 80052be:	f104 0314 	add.w	r3, r4, #20
 80052c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80052c6:	f109 0314 	add.w	r3, r9, #20
 80052ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80052ce:	9202      	str	r2, [sp, #8]
 80052d0:	1b3a      	subs	r2, r7, r4
 80052d2:	3a15      	subs	r2, #21
 80052d4:	f022 0203 	bic.w	r2, r2, #3
 80052d8:	3204      	adds	r2, #4
 80052da:	f104 0115 	add.w	r1, r4, #21
 80052de:	428f      	cmp	r7, r1
 80052e0:	bf38      	it	cc
 80052e2:	2204      	movcc	r2, #4
 80052e4:	9201      	str	r2, [sp, #4]
 80052e6:	9a02      	ldr	r2, [sp, #8]
 80052e8:	9303      	str	r3, [sp, #12]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d80c      	bhi.n	8005308 <__multiply+0x9c>
 80052ee:	2e00      	cmp	r6, #0
 80052f0:	dd03      	ble.n	80052fa <__multiply+0x8e>
 80052f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d059      	beq.n	80053ae <__multiply+0x142>
 80052fa:	6106      	str	r6, [r0, #16]
 80052fc:	b005      	add	sp, #20
 80052fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005302:	f843 2b04 	str.w	r2, [r3], #4
 8005306:	e7d8      	b.n	80052ba <__multiply+0x4e>
 8005308:	f8b3 a000 	ldrh.w	sl, [r3]
 800530c:	f1ba 0f00 	cmp.w	sl, #0
 8005310:	d023      	beq.n	800535a <__multiply+0xee>
 8005312:	46a9      	mov	r9, r5
 8005314:	f04f 0c00 	mov.w	ip, #0
 8005318:	f104 0e14 	add.w	lr, r4, #20
 800531c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005320:	f8d9 1000 	ldr.w	r1, [r9]
 8005324:	fa1f fb82 	uxth.w	fp, r2
 8005328:	b289      	uxth	r1, r1
 800532a:	fb0a 110b 	mla	r1, sl, fp, r1
 800532e:	4461      	add	r1, ip
 8005330:	f8d9 c000 	ldr.w	ip, [r9]
 8005334:	0c12      	lsrs	r2, r2, #16
 8005336:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800533a:	fb0a c202 	mla	r2, sl, r2, ip
 800533e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005342:	b289      	uxth	r1, r1
 8005344:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005348:	4577      	cmp	r7, lr
 800534a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800534e:	f849 1b04 	str.w	r1, [r9], #4
 8005352:	d8e3      	bhi.n	800531c <__multiply+0xb0>
 8005354:	9a01      	ldr	r2, [sp, #4]
 8005356:	f845 c002 	str.w	ip, [r5, r2]
 800535a:	9a03      	ldr	r2, [sp, #12]
 800535c:	3304      	adds	r3, #4
 800535e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005362:	f1b9 0f00 	cmp.w	r9, #0
 8005366:	d020      	beq.n	80053aa <__multiply+0x13e>
 8005368:	46ae      	mov	lr, r5
 800536a:	f04f 0a00 	mov.w	sl, #0
 800536e:	6829      	ldr	r1, [r5, #0]
 8005370:	f104 0c14 	add.w	ip, r4, #20
 8005374:	f8bc b000 	ldrh.w	fp, [ip]
 8005378:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800537c:	b289      	uxth	r1, r1
 800537e:	fb09 220b 	mla	r2, r9, fp, r2
 8005382:	4492      	add	sl, r2
 8005384:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005388:	f84e 1b04 	str.w	r1, [lr], #4
 800538c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005390:	f8be 1000 	ldrh.w	r1, [lr]
 8005394:	0c12      	lsrs	r2, r2, #16
 8005396:	fb09 1102 	mla	r1, r9, r2, r1
 800539a:	4567      	cmp	r7, ip
 800539c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80053a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80053a4:	d8e6      	bhi.n	8005374 <__multiply+0x108>
 80053a6:	9a01      	ldr	r2, [sp, #4]
 80053a8:	50a9      	str	r1, [r5, r2]
 80053aa:	3504      	adds	r5, #4
 80053ac:	e79b      	b.n	80052e6 <__multiply+0x7a>
 80053ae:	3e01      	subs	r6, #1
 80053b0:	e79d      	b.n	80052ee <__multiply+0x82>
 80053b2:	bf00      	nop
 80053b4:	080068c7 	.word	0x080068c7
 80053b8:	080068d8 	.word	0x080068d8

080053bc <__pow5mult>:
 80053bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c0:	4615      	mov	r5, r2
 80053c2:	f012 0203 	ands.w	r2, r2, #3
 80053c6:	4606      	mov	r6, r0
 80053c8:	460f      	mov	r7, r1
 80053ca:	d007      	beq.n	80053dc <__pow5mult+0x20>
 80053cc:	4c25      	ldr	r4, [pc, #148]	; (8005464 <__pow5mult+0xa8>)
 80053ce:	3a01      	subs	r2, #1
 80053d0:	2300      	movs	r3, #0
 80053d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053d6:	f7ff fe9f 	bl	8005118 <__multadd>
 80053da:	4607      	mov	r7, r0
 80053dc:	10ad      	asrs	r5, r5, #2
 80053de:	d03d      	beq.n	800545c <__pow5mult+0xa0>
 80053e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80053e2:	b97c      	cbnz	r4, 8005404 <__pow5mult+0x48>
 80053e4:	2010      	movs	r0, #16
 80053e6:	f7ff fe11 	bl	800500c <malloc>
 80053ea:	4602      	mov	r2, r0
 80053ec:	6270      	str	r0, [r6, #36]	; 0x24
 80053ee:	b928      	cbnz	r0, 80053fc <__pow5mult+0x40>
 80053f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80053f4:	4b1c      	ldr	r3, [pc, #112]	; (8005468 <__pow5mult+0xac>)
 80053f6:	481d      	ldr	r0, [pc, #116]	; (800546c <__pow5mult+0xb0>)
 80053f8:	f000 fc0a 	bl	8005c10 <__assert_func>
 80053fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005400:	6004      	str	r4, [r0, #0]
 8005402:	60c4      	str	r4, [r0, #12]
 8005404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800540c:	b94c      	cbnz	r4, 8005422 <__pow5mult+0x66>
 800540e:	f240 2171 	movw	r1, #625	; 0x271
 8005412:	4630      	mov	r0, r6
 8005414:	f7ff ff14 	bl	8005240 <__i2b>
 8005418:	2300      	movs	r3, #0
 800541a:	4604      	mov	r4, r0
 800541c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005420:	6003      	str	r3, [r0, #0]
 8005422:	f04f 0900 	mov.w	r9, #0
 8005426:	07eb      	lsls	r3, r5, #31
 8005428:	d50a      	bpl.n	8005440 <__pow5mult+0x84>
 800542a:	4639      	mov	r1, r7
 800542c:	4622      	mov	r2, r4
 800542e:	4630      	mov	r0, r6
 8005430:	f7ff ff1c 	bl	800526c <__multiply>
 8005434:	4680      	mov	r8, r0
 8005436:	4639      	mov	r1, r7
 8005438:	4630      	mov	r0, r6
 800543a:	f7ff fe4b 	bl	80050d4 <_Bfree>
 800543e:	4647      	mov	r7, r8
 8005440:	106d      	asrs	r5, r5, #1
 8005442:	d00b      	beq.n	800545c <__pow5mult+0xa0>
 8005444:	6820      	ldr	r0, [r4, #0]
 8005446:	b938      	cbnz	r0, 8005458 <__pow5mult+0x9c>
 8005448:	4622      	mov	r2, r4
 800544a:	4621      	mov	r1, r4
 800544c:	4630      	mov	r0, r6
 800544e:	f7ff ff0d 	bl	800526c <__multiply>
 8005452:	6020      	str	r0, [r4, #0]
 8005454:	f8c0 9000 	str.w	r9, [r0]
 8005458:	4604      	mov	r4, r0
 800545a:	e7e4      	b.n	8005426 <__pow5mult+0x6a>
 800545c:	4638      	mov	r0, r7
 800545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005462:	bf00      	nop
 8005464:	08006a28 	.word	0x08006a28
 8005468:	08006855 	.word	0x08006855
 800546c:	080068d8 	.word	0x080068d8

08005470 <__lshift>:
 8005470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	460c      	mov	r4, r1
 8005476:	4607      	mov	r7, r0
 8005478:	4691      	mov	r9, r2
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	6849      	ldr	r1, [r1, #4]
 800547e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005482:	68a3      	ldr	r3, [r4, #8]
 8005484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005488:	f108 0601 	add.w	r6, r8, #1
 800548c:	42b3      	cmp	r3, r6
 800548e:	db0b      	blt.n	80054a8 <__lshift+0x38>
 8005490:	4638      	mov	r0, r7
 8005492:	f7ff fddf 	bl	8005054 <_Balloc>
 8005496:	4605      	mov	r5, r0
 8005498:	b948      	cbnz	r0, 80054ae <__lshift+0x3e>
 800549a:	4602      	mov	r2, r0
 800549c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80054a0:	4b29      	ldr	r3, [pc, #164]	; (8005548 <__lshift+0xd8>)
 80054a2:	482a      	ldr	r0, [pc, #168]	; (800554c <__lshift+0xdc>)
 80054a4:	f000 fbb4 	bl	8005c10 <__assert_func>
 80054a8:	3101      	adds	r1, #1
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	e7ee      	b.n	800548c <__lshift+0x1c>
 80054ae:	2300      	movs	r3, #0
 80054b0:	f100 0114 	add.w	r1, r0, #20
 80054b4:	f100 0210 	add.w	r2, r0, #16
 80054b8:	4618      	mov	r0, r3
 80054ba:	4553      	cmp	r3, sl
 80054bc:	db37      	blt.n	800552e <__lshift+0xbe>
 80054be:	6920      	ldr	r0, [r4, #16]
 80054c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054c4:	f104 0314 	add.w	r3, r4, #20
 80054c8:	f019 091f 	ands.w	r9, r9, #31
 80054cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80054d4:	d02f      	beq.n	8005536 <__lshift+0xc6>
 80054d6:	468a      	mov	sl, r1
 80054d8:	f04f 0c00 	mov.w	ip, #0
 80054dc:	f1c9 0e20 	rsb	lr, r9, #32
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	fa02 f209 	lsl.w	r2, r2, r9
 80054e6:	ea42 020c 	orr.w	r2, r2, ip
 80054ea:	f84a 2b04 	str.w	r2, [sl], #4
 80054ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f2:	4298      	cmp	r0, r3
 80054f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80054f8:	d8f2      	bhi.n	80054e0 <__lshift+0x70>
 80054fa:	1b03      	subs	r3, r0, r4
 80054fc:	3b15      	subs	r3, #21
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	3304      	adds	r3, #4
 8005504:	f104 0215 	add.w	r2, r4, #21
 8005508:	4290      	cmp	r0, r2
 800550a:	bf38      	it	cc
 800550c:	2304      	movcc	r3, #4
 800550e:	f841 c003 	str.w	ip, [r1, r3]
 8005512:	f1bc 0f00 	cmp.w	ip, #0
 8005516:	d001      	beq.n	800551c <__lshift+0xac>
 8005518:	f108 0602 	add.w	r6, r8, #2
 800551c:	3e01      	subs	r6, #1
 800551e:	4638      	mov	r0, r7
 8005520:	4621      	mov	r1, r4
 8005522:	612e      	str	r6, [r5, #16]
 8005524:	f7ff fdd6 	bl	80050d4 <_Bfree>
 8005528:	4628      	mov	r0, r5
 800552a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005532:	3301      	adds	r3, #1
 8005534:	e7c1      	b.n	80054ba <__lshift+0x4a>
 8005536:	3904      	subs	r1, #4
 8005538:	f853 2b04 	ldr.w	r2, [r3], #4
 800553c:	4298      	cmp	r0, r3
 800553e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005542:	d8f9      	bhi.n	8005538 <__lshift+0xc8>
 8005544:	e7ea      	b.n	800551c <__lshift+0xac>
 8005546:	bf00      	nop
 8005548:	080068c7 	.word	0x080068c7
 800554c:	080068d8 	.word	0x080068d8

08005550 <__mcmp>:
 8005550:	4603      	mov	r3, r0
 8005552:	690a      	ldr	r2, [r1, #16]
 8005554:	6900      	ldr	r0, [r0, #16]
 8005556:	b530      	push	{r4, r5, lr}
 8005558:	1a80      	subs	r0, r0, r2
 800555a:	d10d      	bne.n	8005578 <__mcmp+0x28>
 800555c:	3314      	adds	r3, #20
 800555e:	3114      	adds	r1, #20
 8005560:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005564:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005568:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800556c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005570:	4295      	cmp	r5, r2
 8005572:	d002      	beq.n	800557a <__mcmp+0x2a>
 8005574:	d304      	bcc.n	8005580 <__mcmp+0x30>
 8005576:	2001      	movs	r0, #1
 8005578:	bd30      	pop	{r4, r5, pc}
 800557a:	42a3      	cmp	r3, r4
 800557c:	d3f4      	bcc.n	8005568 <__mcmp+0x18>
 800557e:	e7fb      	b.n	8005578 <__mcmp+0x28>
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	e7f8      	b.n	8005578 <__mcmp+0x28>
	...

08005588 <__mdiff>:
 8005588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	460d      	mov	r5, r1
 800558e:	4607      	mov	r7, r0
 8005590:	4611      	mov	r1, r2
 8005592:	4628      	mov	r0, r5
 8005594:	4614      	mov	r4, r2
 8005596:	f7ff ffdb 	bl	8005550 <__mcmp>
 800559a:	1e06      	subs	r6, r0, #0
 800559c:	d111      	bne.n	80055c2 <__mdiff+0x3a>
 800559e:	4631      	mov	r1, r6
 80055a0:	4638      	mov	r0, r7
 80055a2:	f7ff fd57 	bl	8005054 <_Balloc>
 80055a6:	4602      	mov	r2, r0
 80055a8:	b928      	cbnz	r0, 80055b6 <__mdiff+0x2e>
 80055aa:	f240 2132 	movw	r1, #562	; 0x232
 80055ae:	4b3a      	ldr	r3, [pc, #232]	; (8005698 <__mdiff+0x110>)
 80055b0:	483a      	ldr	r0, [pc, #232]	; (800569c <__mdiff+0x114>)
 80055b2:	f000 fb2d 	bl	8005c10 <__assert_func>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80055bc:	4610      	mov	r0, r2
 80055be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c2:	bfa4      	itt	ge
 80055c4:	4623      	movge	r3, r4
 80055c6:	462c      	movge	r4, r5
 80055c8:	4638      	mov	r0, r7
 80055ca:	6861      	ldr	r1, [r4, #4]
 80055cc:	bfa6      	itte	ge
 80055ce:	461d      	movge	r5, r3
 80055d0:	2600      	movge	r6, #0
 80055d2:	2601      	movlt	r6, #1
 80055d4:	f7ff fd3e 	bl	8005054 <_Balloc>
 80055d8:	4602      	mov	r2, r0
 80055da:	b918      	cbnz	r0, 80055e4 <__mdiff+0x5c>
 80055dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80055e0:	4b2d      	ldr	r3, [pc, #180]	; (8005698 <__mdiff+0x110>)
 80055e2:	e7e5      	b.n	80055b0 <__mdiff+0x28>
 80055e4:	f102 0814 	add.w	r8, r2, #20
 80055e8:	46c2      	mov	sl, r8
 80055ea:	f04f 0c00 	mov.w	ip, #0
 80055ee:	6927      	ldr	r7, [r4, #16]
 80055f0:	60c6      	str	r6, [r0, #12]
 80055f2:	692e      	ldr	r6, [r5, #16]
 80055f4:	f104 0014 	add.w	r0, r4, #20
 80055f8:	f105 0914 	add.w	r9, r5, #20
 80055fc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005600:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005604:	3410      	adds	r4, #16
 8005606:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800560a:	f859 3b04 	ldr.w	r3, [r9], #4
 800560e:	fa1f f18b 	uxth.w	r1, fp
 8005612:	448c      	add	ip, r1
 8005614:	b299      	uxth	r1, r3
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	ebac 0101 	sub.w	r1, ip, r1
 800561c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005620:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005624:	b289      	uxth	r1, r1
 8005626:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800562a:	454e      	cmp	r6, r9
 800562c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005630:	f84a 3b04 	str.w	r3, [sl], #4
 8005634:	d8e7      	bhi.n	8005606 <__mdiff+0x7e>
 8005636:	1b73      	subs	r3, r6, r5
 8005638:	3b15      	subs	r3, #21
 800563a:	f023 0303 	bic.w	r3, r3, #3
 800563e:	3515      	adds	r5, #21
 8005640:	3304      	adds	r3, #4
 8005642:	42ae      	cmp	r6, r5
 8005644:	bf38      	it	cc
 8005646:	2304      	movcc	r3, #4
 8005648:	4418      	add	r0, r3
 800564a:	4443      	add	r3, r8
 800564c:	461e      	mov	r6, r3
 800564e:	4605      	mov	r5, r0
 8005650:	4575      	cmp	r5, lr
 8005652:	d30e      	bcc.n	8005672 <__mdiff+0xea>
 8005654:	f10e 0103 	add.w	r1, lr, #3
 8005658:	1a09      	subs	r1, r1, r0
 800565a:	f021 0103 	bic.w	r1, r1, #3
 800565e:	3803      	subs	r0, #3
 8005660:	4586      	cmp	lr, r0
 8005662:	bf38      	it	cc
 8005664:	2100      	movcc	r1, #0
 8005666:	4419      	add	r1, r3
 8005668:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800566c:	b18b      	cbz	r3, 8005692 <__mdiff+0x10a>
 800566e:	6117      	str	r7, [r2, #16]
 8005670:	e7a4      	b.n	80055bc <__mdiff+0x34>
 8005672:	f855 8b04 	ldr.w	r8, [r5], #4
 8005676:	fa1f f188 	uxth.w	r1, r8
 800567a:	4461      	add	r1, ip
 800567c:	140c      	asrs	r4, r1, #16
 800567e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005682:	b289      	uxth	r1, r1
 8005684:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005688:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800568c:	f846 1b04 	str.w	r1, [r6], #4
 8005690:	e7de      	b.n	8005650 <__mdiff+0xc8>
 8005692:	3f01      	subs	r7, #1
 8005694:	e7e8      	b.n	8005668 <__mdiff+0xe0>
 8005696:	bf00      	nop
 8005698:	080068c7 	.word	0x080068c7
 800569c:	080068d8 	.word	0x080068d8

080056a0 <__d2b>:
 80056a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80056a4:	2101      	movs	r1, #1
 80056a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80056aa:	4690      	mov	r8, r2
 80056ac:	461d      	mov	r5, r3
 80056ae:	f7ff fcd1 	bl	8005054 <_Balloc>
 80056b2:	4604      	mov	r4, r0
 80056b4:	b930      	cbnz	r0, 80056c4 <__d2b+0x24>
 80056b6:	4602      	mov	r2, r0
 80056b8:	f240 310a 	movw	r1, #778	; 0x30a
 80056bc:	4b24      	ldr	r3, [pc, #144]	; (8005750 <__d2b+0xb0>)
 80056be:	4825      	ldr	r0, [pc, #148]	; (8005754 <__d2b+0xb4>)
 80056c0:	f000 faa6 	bl	8005c10 <__assert_func>
 80056c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80056c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80056cc:	bb2d      	cbnz	r5, 800571a <__d2b+0x7a>
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	f1b8 0300 	subs.w	r3, r8, #0
 80056d4:	d026      	beq.n	8005724 <__d2b+0x84>
 80056d6:	4668      	mov	r0, sp
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	f7ff fd83 	bl	80051e4 <__lo0bits>
 80056de:	9900      	ldr	r1, [sp, #0]
 80056e0:	b1f0      	cbz	r0, 8005720 <__d2b+0x80>
 80056e2:	9a01      	ldr	r2, [sp, #4]
 80056e4:	f1c0 0320 	rsb	r3, r0, #32
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	430b      	orrs	r3, r1
 80056ee:	40c2      	lsrs	r2, r0
 80056f0:	6163      	str	r3, [r4, #20]
 80056f2:	9201      	str	r2, [sp, #4]
 80056f4:	9b01      	ldr	r3, [sp, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf14      	ite	ne
 80056fa:	2102      	movne	r1, #2
 80056fc:	2101      	moveq	r1, #1
 80056fe:	61a3      	str	r3, [r4, #24]
 8005700:	6121      	str	r1, [r4, #16]
 8005702:	b1c5      	cbz	r5, 8005736 <__d2b+0x96>
 8005704:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005708:	4405      	add	r5, r0
 800570a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800570e:	603d      	str	r5, [r7, #0]
 8005710:	6030      	str	r0, [r6, #0]
 8005712:	4620      	mov	r0, r4
 8005714:	b002      	add	sp, #8
 8005716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800571a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800571e:	e7d6      	b.n	80056ce <__d2b+0x2e>
 8005720:	6161      	str	r1, [r4, #20]
 8005722:	e7e7      	b.n	80056f4 <__d2b+0x54>
 8005724:	a801      	add	r0, sp, #4
 8005726:	f7ff fd5d 	bl	80051e4 <__lo0bits>
 800572a:	2101      	movs	r1, #1
 800572c:	9b01      	ldr	r3, [sp, #4]
 800572e:	6121      	str	r1, [r4, #16]
 8005730:	6163      	str	r3, [r4, #20]
 8005732:	3020      	adds	r0, #32
 8005734:	e7e5      	b.n	8005702 <__d2b+0x62>
 8005736:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800573a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800573e:	6038      	str	r0, [r7, #0]
 8005740:	6918      	ldr	r0, [r3, #16]
 8005742:	f7ff fd2f 	bl	80051a4 <__hi0bits>
 8005746:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800574a:	6031      	str	r1, [r6, #0]
 800574c:	e7e1      	b.n	8005712 <__d2b+0x72>
 800574e:	bf00      	nop
 8005750:	080068c7 	.word	0x080068c7
 8005754:	080068d8 	.word	0x080068d8

08005758 <_calloc_r>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	fba1 5402 	umull	r5, r4, r1, r2
 800575e:	b934      	cbnz	r4, 800576e <_calloc_r+0x16>
 8005760:	4629      	mov	r1, r5
 8005762:	f000 f875 	bl	8005850 <_malloc_r>
 8005766:	4606      	mov	r6, r0
 8005768:	b928      	cbnz	r0, 8005776 <_calloc_r+0x1e>
 800576a:	4630      	mov	r0, r6
 800576c:	bd70      	pop	{r4, r5, r6, pc}
 800576e:	220c      	movs	r2, #12
 8005770:	2600      	movs	r6, #0
 8005772:	6002      	str	r2, [r0, #0]
 8005774:	e7f9      	b.n	800576a <_calloc_r+0x12>
 8005776:	462a      	mov	r2, r5
 8005778:	4621      	mov	r1, r4
 800577a:	f7fe f93f 	bl	80039fc <memset>
 800577e:	e7f4      	b.n	800576a <_calloc_r+0x12>

08005780 <_free_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4605      	mov	r5, r0
 8005784:	2900      	cmp	r1, #0
 8005786:	d040      	beq.n	800580a <_free_r+0x8a>
 8005788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578c:	1f0c      	subs	r4, r1, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	bfb8      	it	lt
 8005792:	18e4      	addlt	r4, r4, r3
 8005794:	f000 fa98 	bl	8005cc8 <__malloc_lock>
 8005798:	4a1c      	ldr	r2, [pc, #112]	; (800580c <_free_r+0x8c>)
 800579a:	6813      	ldr	r3, [r2, #0]
 800579c:	b933      	cbnz	r3, 80057ac <_free_r+0x2c>
 800579e:	6063      	str	r3, [r4, #4]
 80057a0:	6014      	str	r4, [r2, #0]
 80057a2:	4628      	mov	r0, r5
 80057a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a8:	f000 ba94 	b.w	8005cd4 <__malloc_unlock>
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	d908      	bls.n	80057c2 <_free_r+0x42>
 80057b0:	6820      	ldr	r0, [r4, #0]
 80057b2:	1821      	adds	r1, r4, r0
 80057b4:	428b      	cmp	r3, r1
 80057b6:	bf01      	itttt	eq
 80057b8:	6819      	ldreq	r1, [r3, #0]
 80057ba:	685b      	ldreq	r3, [r3, #4]
 80057bc:	1809      	addeq	r1, r1, r0
 80057be:	6021      	streq	r1, [r4, #0]
 80057c0:	e7ed      	b.n	800579e <_free_r+0x1e>
 80057c2:	461a      	mov	r2, r3
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	b10b      	cbz	r3, 80057cc <_free_r+0x4c>
 80057c8:	42a3      	cmp	r3, r4
 80057ca:	d9fa      	bls.n	80057c2 <_free_r+0x42>
 80057cc:	6811      	ldr	r1, [r2, #0]
 80057ce:	1850      	adds	r0, r2, r1
 80057d0:	42a0      	cmp	r0, r4
 80057d2:	d10b      	bne.n	80057ec <_free_r+0x6c>
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	4401      	add	r1, r0
 80057d8:	1850      	adds	r0, r2, r1
 80057da:	4283      	cmp	r3, r0
 80057dc:	6011      	str	r1, [r2, #0]
 80057de:	d1e0      	bne.n	80057a2 <_free_r+0x22>
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4401      	add	r1, r0
 80057e6:	6011      	str	r1, [r2, #0]
 80057e8:	6053      	str	r3, [r2, #4]
 80057ea:	e7da      	b.n	80057a2 <_free_r+0x22>
 80057ec:	d902      	bls.n	80057f4 <_free_r+0x74>
 80057ee:	230c      	movs	r3, #12
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	e7d6      	b.n	80057a2 <_free_r+0x22>
 80057f4:	6820      	ldr	r0, [r4, #0]
 80057f6:	1821      	adds	r1, r4, r0
 80057f8:	428b      	cmp	r3, r1
 80057fa:	bf01      	itttt	eq
 80057fc:	6819      	ldreq	r1, [r3, #0]
 80057fe:	685b      	ldreq	r3, [r3, #4]
 8005800:	1809      	addeq	r1, r1, r0
 8005802:	6021      	streq	r1, [r4, #0]
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	6054      	str	r4, [r2, #4]
 8005808:	e7cb      	b.n	80057a2 <_free_r+0x22>
 800580a:	bd38      	pop	{r3, r4, r5, pc}
 800580c:	200002d8 	.word	0x200002d8

08005810 <sbrk_aligned>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	4e0e      	ldr	r6, [pc, #56]	; (800584c <sbrk_aligned+0x3c>)
 8005814:	460c      	mov	r4, r1
 8005816:	6831      	ldr	r1, [r6, #0]
 8005818:	4605      	mov	r5, r0
 800581a:	b911      	cbnz	r1, 8005822 <sbrk_aligned+0x12>
 800581c:	f000 f9e8 	bl	8005bf0 <_sbrk_r>
 8005820:	6030      	str	r0, [r6, #0]
 8005822:	4621      	mov	r1, r4
 8005824:	4628      	mov	r0, r5
 8005826:	f000 f9e3 	bl	8005bf0 <_sbrk_r>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	d00a      	beq.n	8005844 <sbrk_aligned+0x34>
 800582e:	1cc4      	adds	r4, r0, #3
 8005830:	f024 0403 	bic.w	r4, r4, #3
 8005834:	42a0      	cmp	r0, r4
 8005836:	d007      	beq.n	8005848 <sbrk_aligned+0x38>
 8005838:	1a21      	subs	r1, r4, r0
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f9d8 	bl	8005bf0 <_sbrk_r>
 8005840:	3001      	adds	r0, #1
 8005842:	d101      	bne.n	8005848 <sbrk_aligned+0x38>
 8005844:	f04f 34ff 	mov.w	r4, #4294967295
 8005848:	4620      	mov	r0, r4
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	200002dc 	.word	0x200002dc

08005850 <_malloc_r>:
 8005850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	1ccd      	adds	r5, r1, #3
 8005856:	f025 0503 	bic.w	r5, r5, #3
 800585a:	3508      	adds	r5, #8
 800585c:	2d0c      	cmp	r5, #12
 800585e:	bf38      	it	cc
 8005860:	250c      	movcc	r5, #12
 8005862:	2d00      	cmp	r5, #0
 8005864:	4607      	mov	r7, r0
 8005866:	db01      	blt.n	800586c <_malloc_r+0x1c>
 8005868:	42a9      	cmp	r1, r5
 800586a:	d905      	bls.n	8005878 <_malloc_r+0x28>
 800586c:	230c      	movs	r3, #12
 800586e:	2600      	movs	r6, #0
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	4630      	mov	r0, r6
 8005874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005878:	4e2e      	ldr	r6, [pc, #184]	; (8005934 <_malloc_r+0xe4>)
 800587a:	f000 fa25 	bl	8005cc8 <__malloc_lock>
 800587e:	6833      	ldr	r3, [r6, #0]
 8005880:	461c      	mov	r4, r3
 8005882:	bb34      	cbnz	r4, 80058d2 <_malloc_r+0x82>
 8005884:	4629      	mov	r1, r5
 8005886:	4638      	mov	r0, r7
 8005888:	f7ff ffc2 	bl	8005810 <sbrk_aligned>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	4604      	mov	r4, r0
 8005890:	d14d      	bne.n	800592e <_malloc_r+0xde>
 8005892:	6834      	ldr	r4, [r6, #0]
 8005894:	4626      	mov	r6, r4
 8005896:	2e00      	cmp	r6, #0
 8005898:	d140      	bne.n	800591c <_malloc_r+0xcc>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	4631      	mov	r1, r6
 800589e:	4638      	mov	r0, r7
 80058a0:	eb04 0803 	add.w	r8, r4, r3
 80058a4:	f000 f9a4 	bl	8005bf0 <_sbrk_r>
 80058a8:	4580      	cmp	r8, r0
 80058aa:	d13a      	bne.n	8005922 <_malloc_r+0xd2>
 80058ac:	6821      	ldr	r1, [r4, #0]
 80058ae:	3503      	adds	r5, #3
 80058b0:	1a6d      	subs	r5, r5, r1
 80058b2:	f025 0503 	bic.w	r5, r5, #3
 80058b6:	3508      	adds	r5, #8
 80058b8:	2d0c      	cmp	r5, #12
 80058ba:	bf38      	it	cc
 80058bc:	250c      	movcc	r5, #12
 80058be:	4638      	mov	r0, r7
 80058c0:	4629      	mov	r1, r5
 80058c2:	f7ff ffa5 	bl	8005810 <sbrk_aligned>
 80058c6:	3001      	adds	r0, #1
 80058c8:	d02b      	beq.n	8005922 <_malloc_r+0xd2>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	442b      	add	r3, r5
 80058ce:	6023      	str	r3, [r4, #0]
 80058d0:	e00e      	b.n	80058f0 <_malloc_r+0xa0>
 80058d2:	6822      	ldr	r2, [r4, #0]
 80058d4:	1b52      	subs	r2, r2, r5
 80058d6:	d41e      	bmi.n	8005916 <_malloc_r+0xc6>
 80058d8:	2a0b      	cmp	r2, #11
 80058da:	d916      	bls.n	800590a <_malloc_r+0xba>
 80058dc:	1961      	adds	r1, r4, r5
 80058de:	42a3      	cmp	r3, r4
 80058e0:	6025      	str	r5, [r4, #0]
 80058e2:	bf18      	it	ne
 80058e4:	6059      	strne	r1, [r3, #4]
 80058e6:	6863      	ldr	r3, [r4, #4]
 80058e8:	bf08      	it	eq
 80058ea:	6031      	streq	r1, [r6, #0]
 80058ec:	5162      	str	r2, [r4, r5]
 80058ee:	604b      	str	r3, [r1, #4]
 80058f0:	4638      	mov	r0, r7
 80058f2:	f104 060b 	add.w	r6, r4, #11
 80058f6:	f000 f9ed 	bl	8005cd4 <__malloc_unlock>
 80058fa:	f026 0607 	bic.w	r6, r6, #7
 80058fe:	1d23      	adds	r3, r4, #4
 8005900:	1af2      	subs	r2, r6, r3
 8005902:	d0b6      	beq.n	8005872 <_malloc_r+0x22>
 8005904:	1b9b      	subs	r3, r3, r6
 8005906:	50a3      	str	r3, [r4, r2]
 8005908:	e7b3      	b.n	8005872 <_malloc_r+0x22>
 800590a:	6862      	ldr	r2, [r4, #4]
 800590c:	42a3      	cmp	r3, r4
 800590e:	bf0c      	ite	eq
 8005910:	6032      	streq	r2, [r6, #0]
 8005912:	605a      	strne	r2, [r3, #4]
 8005914:	e7ec      	b.n	80058f0 <_malloc_r+0xa0>
 8005916:	4623      	mov	r3, r4
 8005918:	6864      	ldr	r4, [r4, #4]
 800591a:	e7b2      	b.n	8005882 <_malloc_r+0x32>
 800591c:	4634      	mov	r4, r6
 800591e:	6876      	ldr	r6, [r6, #4]
 8005920:	e7b9      	b.n	8005896 <_malloc_r+0x46>
 8005922:	230c      	movs	r3, #12
 8005924:	4638      	mov	r0, r7
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	f000 f9d4 	bl	8005cd4 <__malloc_unlock>
 800592c:	e7a1      	b.n	8005872 <_malloc_r+0x22>
 800592e:	6025      	str	r5, [r4, #0]
 8005930:	e7de      	b.n	80058f0 <_malloc_r+0xa0>
 8005932:	bf00      	nop
 8005934:	200002d8 	.word	0x200002d8

08005938 <__ssputs_r>:
 8005938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	688e      	ldr	r6, [r1, #8]
 800593e:	4682      	mov	sl, r0
 8005940:	429e      	cmp	r6, r3
 8005942:	460c      	mov	r4, r1
 8005944:	4690      	mov	r8, r2
 8005946:	461f      	mov	r7, r3
 8005948:	d838      	bhi.n	80059bc <__ssputs_r+0x84>
 800594a:	898a      	ldrh	r2, [r1, #12]
 800594c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005950:	d032      	beq.n	80059b8 <__ssputs_r+0x80>
 8005952:	6825      	ldr	r5, [r4, #0]
 8005954:	6909      	ldr	r1, [r1, #16]
 8005956:	3301      	adds	r3, #1
 8005958:	eba5 0901 	sub.w	r9, r5, r1
 800595c:	6965      	ldr	r5, [r4, #20]
 800595e:	444b      	add	r3, r9
 8005960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005964:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005968:	106d      	asrs	r5, r5, #1
 800596a:	429d      	cmp	r5, r3
 800596c:	bf38      	it	cc
 800596e:	461d      	movcc	r5, r3
 8005970:	0553      	lsls	r3, r2, #21
 8005972:	d531      	bpl.n	80059d8 <__ssputs_r+0xa0>
 8005974:	4629      	mov	r1, r5
 8005976:	f7ff ff6b 	bl	8005850 <_malloc_r>
 800597a:	4606      	mov	r6, r0
 800597c:	b950      	cbnz	r0, 8005994 <__ssputs_r+0x5c>
 800597e:	230c      	movs	r3, #12
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	f8ca 3000 	str.w	r3, [sl]
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005994:	464a      	mov	r2, r9
 8005996:	6921      	ldr	r1, [r4, #16]
 8005998:	f7ff fb4e 	bl	8005038 <memcpy>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a6:	81a3      	strh	r3, [r4, #12]
 80059a8:	6126      	str	r6, [r4, #16]
 80059aa:	444e      	add	r6, r9
 80059ac:	6026      	str	r6, [r4, #0]
 80059ae:	463e      	mov	r6, r7
 80059b0:	6165      	str	r5, [r4, #20]
 80059b2:	eba5 0509 	sub.w	r5, r5, r9
 80059b6:	60a5      	str	r5, [r4, #8]
 80059b8:	42be      	cmp	r6, r7
 80059ba:	d900      	bls.n	80059be <__ssputs_r+0x86>
 80059bc:	463e      	mov	r6, r7
 80059be:	4632      	mov	r2, r6
 80059c0:	4641      	mov	r1, r8
 80059c2:	6820      	ldr	r0, [r4, #0]
 80059c4:	f000 f966 	bl	8005c94 <memmove>
 80059c8:	68a3      	ldr	r3, [r4, #8]
 80059ca:	2000      	movs	r0, #0
 80059cc:	1b9b      	subs	r3, r3, r6
 80059ce:	60a3      	str	r3, [r4, #8]
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	4433      	add	r3, r6
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	e7db      	b.n	8005990 <__ssputs_r+0x58>
 80059d8:	462a      	mov	r2, r5
 80059da:	f000 f981 	bl	8005ce0 <_realloc_r>
 80059de:	4606      	mov	r6, r0
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d1e1      	bne.n	80059a8 <__ssputs_r+0x70>
 80059e4:	4650      	mov	r0, sl
 80059e6:	6921      	ldr	r1, [r4, #16]
 80059e8:	f7ff feca 	bl	8005780 <_free_r>
 80059ec:	e7c7      	b.n	800597e <__ssputs_r+0x46>
	...

080059f0 <_svfiprintf_r>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	4698      	mov	r8, r3
 80059f6:	898b      	ldrh	r3, [r1, #12]
 80059f8:	4607      	mov	r7, r0
 80059fa:	061b      	lsls	r3, r3, #24
 80059fc:	460d      	mov	r5, r1
 80059fe:	4614      	mov	r4, r2
 8005a00:	b09d      	sub	sp, #116	; 0x74
 8005a02:	d50e      	bpl.n	8005a22 <_svfiprintf_r+0x32>
 8005a04:	690b      	ldr	r3, [r1, #16]
 8005a06:	b963      	cbnz	r3, 8005a22 <_svfiprintf_r+0x32>
 8005a08:	2140      	movs	r1, #64	; 0x40
 8005a0a:	f7ff ff21 	bl	8005850 <_malloc_r>
 8005a0e:	6028      	str	r0, [r5, #0]
 8005a10:	6128      	str	r0, [r5, #16]
 8005a12:	b920      	cbnz	r0, 8005a1e <_svfiprintf_r+0x2e>
 8005a14:	230c      	movs	r3, #12
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1c:	e0d1      	b.n	8005bc2 <_svfiprintf_r+0x1d2>
 8005a1e:	2340      	movs	r3, #64	; 0x40
 8005a20:	616b      	str	r3, [r5, #20]
 8005a22:	2300      	movs	r3, #0
 8005a24:	9309      	str	r3, [sp, #36]	; 0x24
 8005a26:	2320      	movs	r3, #32
 8005a28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a2c:	2330      	movs	r3, #48	; 0x30
 8005a2e:	f04f 0901 	mov.w	r9, #1
 8005a32:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005bdc <_svfiprintf_r+0x1ec>
 8005a3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a3e:	4623      	mov	r3, r4
 8005a40:	469a      	mov	sl, r3
 8005a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a46:	b10a      	cbz	r2, 8005a4c <_svfiprintf_r+0x5c>
 8005a48:	2a25      	cmp	r2, #37	; 0x25
 8005a4a:	d1f9      	bne.n	8005a40 <_svfiprintf_r+0x50>
 8005a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a50:	d00b      	beq.n	8005a6a <_svfiprintf_r+0x7a>
 8005a52:	465b      	mov	r3, fp
 8005a54:	4622      	mov	r2, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f7ff ff6d 	bl	8005938 <__ssputs_r>
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f000 80aa 	beq.w	8005bb8 <_svfiprintf_r+0x1c8>
 8005a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a66:	445a      	add	r2, fp
 8005a68:	9209      	str	r2, [sp, #36]	; 0x24
 8005a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80a2 	beq.w	8005bb8 <_svfiprintf_r+0x1c8>
 8005a74:	2300      	movs	r3, #0
 8005a76:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a7e:	f10a 0a01 	add.w	sl, sl, #1
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	9307      	str	r3, [sp, #28]
 8005a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a8c:	4654      	mov	r4, sl
 8005a8e:	2205      	movs	r2, #5
 8005a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a94:	4851      	ldr	r0, [pc, #324]	; (8005bdc <_svfiprintf_r+0x1ec>)
 8005a96:	f7ff fac1 	bl	800501c <memchr>
 8005a9a:	9a04      	ldr	r2, [sp, #16]
 8005a9c:	b9d8      	cbnz	r0, 8005ad6 <_svfiprintf_r+0xe6>
 8005a9e:	06d0      	lsls	r0, r2, #27
 8005aa0:	bf44      	itt	mi
 8005aa2:	2320      	movmi	r3, #32
 8005aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa8:	0711      	lsls	r1, r2, #28
 8005aaa:	bf44      	itt	mi
 8005aac:	232b      	movmi	r3, #43	; 0x2b
 8005aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab8:	d015      	beq.n	8005ae6 <_svfiprintf_r+0xf6>
 8005aba:	4654      	mov	r4, sl
 8005abc:	2000      	movs	r0, #0
 8005abe:	f04f 0c0a 	mov.w	ip, #10
 8005ac2:	9a07      	ldr	r2, [sp, #28]
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aca:	3b30      	subs	r3, #48	; 0x30
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d94e      	bls.n	8005b6e <_svfiprintf_r+0x17e>
 8005ad0:	b1b0      	cbz	r0, 8005b00 <_svfiprintf_r+0x110>
 8005ad2:	9207      	str	r2, [sp, #28]
 8005ad4:	e014      	b.n	8005b00 <_svfiprintf_r+0x110>
 8005ad6:	eba0 0308 	sub.w	r3, r0, r8
 8005ada:	fa09 f303 	lsl.w	r3, r9, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	46a2      	mov	sl, r4
 8005ae2:	9304      	str	r3, [sp, #16]
 8005ae4:	e7d2      	b.n	8005a8c <_svfiprintf_r+0x9c>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	1d19      	adds	r1, r3, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	9103      	str	r1, [sp, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfbb      	ittet	lt
 8005af2:	425b      	neglt	r3, r3
 8005af4:	f042 0202 	orrlt.w	r2, r2, #2
 8005af8:	9307      	strge	r3, [sp, #28]
 8005afa:	9307      	strlt	r3, [sp, #28]
 8005afc:	bfb8      	it	lt
 8005afe:	9204      	strlt	r2, [sp, #16]
 8005b00:	7823      	ldrb	r3, [r4, #0]
 8005b02:	2b2e      	cmp	r3, #46	; 0x2e
 8005b04:	d10c      	bne.n	8005b20 <_svfiprintf_r+0x130>
 8005b06:	7863      	ldrb	r3, [r4, #1]
 8005b08:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0a:	d135      	bne.n	8005b78 <_svfiprintf_r+0x188>
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	3402      	adds	r4, #2
 8005b10:	1d1a      	adds	r2, r3, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	9203      	str	r2, [sp, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfb8      	it	lt
 8005b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b1e:	9305      	str	r3, [sp, #20]
 8005b20:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005be0 <_svfiprintf_r+0x1f0>
 8005b24:	2203      	movs	r2, #3
 8005b26:	4650      	mov	r0, sl
 8005b28:	7821      	ldrb	r1, [r4, #0]
 8005b2a:	f7ff fa77 	bl	800501c <memchr>
 8005b2e:	b140      	cbz	r0, 8005b42 <_svfiprintf_r+0x152>
 8005b30:	2340      	movs	r3, #64	; 0x40
 8005b32:	eba0 000a 	sub.w	r0, r0, sl
 8005b36:	fa03 f000 	lsl.w	r0, r3, r0
 8005b3a:	9b04      	ldr	r3, [sp, #16]
 8005b3c:	3401      	adds	r4, #1
 8005b3e:	4303      	orrs	r3, r0
 8005b40:	9304      	str	r3, [sp, #16]
 8005b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b46:	2206      	movs	r2, #6
 8005b48:	4826      	ldr	r0, [pc, #152]	; (8005be4 <_svfiprintf_r+0x1f4>)
 8005b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b4e:	f7ff fa65 	bl	800501c <memchr>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d038      	beq.n	8005bc8 <_svfiprintf_r+0x1d8>
 8005b56:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <_svfiprintf_r+0x1f8>)
 8005b58:	bb1b      	cbnz	r3, 8005ba2 <_svfiprintf_r+0x1b2>
 8005b5a:	9b03      	ldr	r3, [sp, #12]
 8005b5c:	3307      	adds	r3, #7
 8005b5e:	f023 0307 	bic.w	r3, r3, #7
 8005b62:	3308      	adds	r3, #8
 8005b64:	9303      	str	r3, [sp, #12]
 8005b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b68:	4433      	add	r3, r6
 8005b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6c:	e767      	b.n	8005a3e <_svfiprintf_r+0x4e>
 8005b6e:	460c      	mov	r4, r1
 8005b70:	2001      	movs	r0, #1
 8005b72:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b76:	e7a5      	b.n	8005ac4 <_svfiprintf_r+0xd4>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f04f 0c0a 	mov.w	ip, #10
 8005b7e:	4619      	mov	r1, r3
 8005b80:	3401      	adds	r4, #1
 8005b82:	9305      	str	r3, [sp, #20]
 8005b84:	4620      	mov	r0, r4
 8005b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b8a:	3a30      	subs	r2, #48	; 0x30
 8005b8c:	2a09      	cmp	r2, #9
 8005b8e:	d903      	bls.n	8005b98 <_svfiprintf_r+0x1a8>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0c5      	beq.n	8005b20 <_svfiprintf_r+0x130>
 8005b94:	9105      	str	r1, [sp, #20]
 8005b96:	e7c3      	b.n	8005b20 <_svfiprintf_r+0x130>
 8005b98:	4604      	mov	r4, r0
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ba0:	e7f0      	b.n	8005b84 <_svfiprintf_r+0x194>
 8005ba2:	ab03      	add	r3, sp, #12
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	4638      	mov	r0, r7
 8005baa:	4b10      	ldr	r3, [pc, #64]	; (8005bec <_svfiprintf_r+0x1fc>)
 8005bac:	a904      	add	r1, sp, #16
 8005bae:	f7fd ffcb 	bl	8003b48 <_printf_float>
 8005bb2:	1c42      	adds	r2, r0, #1
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	d1d6      	bne.n	8005b66 <_svfiprintf_r+0x176>
 8005bb8:	89ab      	ldrh	r3, [r5, #12]
 8005bba:	065b      	lsls	r3, r3, #25
 8005bbc:	f53f af2c 	bmi.w	8005a18 <_svfiprintf_r+0x28>
 8005bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bc2:	b01d      	add	sp, #116	; 0x74
 8005bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc8:	ab03      	add	r3, sp, #12
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4638      	mov	r0, r7
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <_svfiprintf_r+0x1fc>)
 8005bd2:	a904      	add	r1, sp, #16
 8005bd4:	f7fe fa54 	bl	8004080 <_printf_i>
 8005bd8:	e7eb      	b.n	8005bb2 <_svfiprintf_r+0x1c2>
 8005bda:	bf00      	nop
 8005bdc:	08006a34 	.word	0x08006a34
 8005be0:	08006a3a 	.word	0x08006a3a
 8005be4:	08006a3e 	.word	0x08006a3e
 8005be8:	08003b49 	.word	0x08003b49
 8005bec:	08005939 	.word	0x08005939

08005bf0 <_sbrk_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	4d05      	ldr	r5, [pc, #20]	; (8005c0c <_sbrk_r+0x1c>)
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	f7fb fee0 	bl	80019c0 <_sbrk>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_sbrk_r+0x1a>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_sbrk_r+0x1a>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	200002e0 	.word	0x200002e0

08005c10 <__assert_func>:
 8005c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c12:	4614      	mov	r4, r2
 8005c14:	461a      	mov	r2, r3
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <__assert_func+0x2c>)
 8005c18:	4605      	mov	r5, r0
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68d8      	ldr	r0, [r3, #12]
 8005c1e:	b14c      	cbz	r4, 8005c34 <__assert_func+0x24>
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <__assert_func+0x30>)
 8005c22:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c26:	9100      	str	r1, [sp, #0]
 8005c28:	462b      	mov	r3, r5
 8005c2a:	4906      	ldr	r1, [pc, #24]	; (8005c44 <__assert_func+0x34>)
 8005c2c:	f000 f80e 	bl	8005c4c <fiprintf>
 8005c30:	f000 faaa 	bl	8006188 <abort>
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <__assert_func+0x38>)
 8005c36:	461c      	mov	r4, r3
 8005c38:	e7f3      	b.n	8005c22 <__assert_func+0x12>
 8005c3a:	bf00      	nop
 8005c3c:	2000000c 	.word	0x2000000c
 8005c40:	08006a45 	.word	0x08006a45
 8005c44:	08006a52 	.word	0x08006a52
 8005c48:	08006a80 	.word	0x08006a80

08005c4c <fiprintf>:
 8005c4c:	b40e      	push	{r1, r2, r3}
 8005c4e:	b503      	push	{r0, r1, lr}
 8005c50:	4601      	mov	r1, r0
 8005c52:	ab03      	add	r3, sp, #12
 8005c54:	4805      	ldr	r0, [pc, #20]	; (8005c6c <fiprintf+0x20>)
 8005c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	f000 f895 	bl	8005d8c <_vfiprintf_r>
 8005c62:	b002      	add	sp, #8
 8005c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c68:	b003      	add	sp, #12
 8005c6a:	4770      	bx	lr
 8005c6c:	2000000c 	.word	0x2000000c

08005c70 <__ascii_mbtowc>:
 8005c70:	b082      	sub	sp, #8
 8005c72:	b901      	cbnz	r1, 8005c76 <__ascii_mbtowc+0x6>
 8005c74:	a901      	add	r1, sp, #4
 8005c76:	b142      	cbz	r2, 8005c8a <__ascii_mbtowc+0x1a>
 8005c78:	b14b      	cbz	r3, 8005c8e <__ascii_mbtowc+0x1e>
 8005c7a:	7813      	ldrb	r3, [r2, #0]
 8005c7c:	600b      	str	r3, [r1, #0]
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	1e10      	subs	r0, r2, #0
 8005c82:	bf18      	it	ne
 8005c84:	2001      	movne	r0, #1
 8005c86:	b002      	add	sp, #8
 8005c88:	4770      	bx	lr
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	e7fb      	b.n	8005c86 <__ascii_mbtowc+0x16>
 8005c8e:	f06f 0001 	mvn.w	r0, #1
 8005c92:	e7f8      	b.n	8005c86 <__ascii_mbtowc+0x16>

08005c94 <memmove>:
 8005c94:	4288      	cmp	r0, r1
 8005c96:	b510      	push	{r4, lr}
 8005c98:	eb01 0402 	add.w	r4, r1, r2
 8005c9c:	d902      	bls.n	8005ca4 <memmove+0x10>
 8005c9e:	4284      	cmp	r4, r0
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	d807      	bhi.n	8005cb4 <memmove+0x20>
 8005ca4:	1e43      	subs	r3, r0, #1
 8005ca6:	42a1      	cmp	r1, r4
 8005ca8:	d008      	beq.n	8005cbc <memmove+0x28>
 8005caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cb2:	e7f8      	b.n	8005ca6 <memmove+0x12>
 8005cb4:	4601      	mov	r1, r0
 8005cb6:	4402      	add	r2, r0
 8005cb8:	428a      	cmp	r2, r1
 8005cba:	d100      	bne.n	8005cbe <memmove+0x2a>
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cc6:	e7f7      	b.n	8005cb8 <memmove+0x24>

08005cc8 <__malloc_lock>:
 8005cc8:	4801      	ldr	r0, [pc, #4]	; (8005cd0 <__malloc_lock+0x8>)
 8005cca:	f000 bc19 	b.w	8006500 <__retarget_lock_acquire_recursive>
 8005cce:	bf00      	nop
 8005cd0:	200002e4 	.word	0x200002e4

08005cd4 <__malloc_unlock>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	; (8005cdc <__malloc_unlock+0x8>)
 8005cd6:	f000 bc14 	b.w	8006502 <__retarget_lock_release_recursive>
 8005cda:	bf00      	nop
 8005cdc:	200002e4 	.word	0x200002e4

08005ce0 <_realloc_r>:
 8005ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce4:	4680      	mov	r8, r0
 8005ce6:	4614      	mov	r4, r2
 8005ce8:	460e      	mov	r6, r1
 8005cea:	b921      	cbnz	r1, 8005cf6 <_realloc_r+0x16>
 8005cec:	4611      	mov	r1, r2
 8005cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf2:	f7ff bdad 	b.w	8005850 <_malloc_r>
 8005cf6:	b92a      	cbnz	r2, 8005d04 <_realloc_r+0x24>
 8005cf8:	f7ff fd42 	bl	8005780 <_free_r>
 8005cfc:	4625      	mov	r5, r4
 8005cfe:	4628      	mov	r0, r5
 8005d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d04:	f000 fc64 	bl	80065d0 <_malloc_usable_size_r>
 8005d08:	4284      	cmp	r4, r0
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	d802      	bhi.n	8005d14 <_realloc_r+0x34>
 8005d0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d12:	d812      	bhi.n	8005d3a <_realloc_r+0x5a>
 8005d14:	4621      	mov	r1, r4
 8005d16:	4640      	mov	r0, r8
 8005d18:	f7ff fd9a 	bl	8005850 <_malloc_r>
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d0ed      	beq.n	8005cfe <_realloc_r+0x1e>
 8005d22:	42bc      	cmp	r4, r7
 8005d24:	4622      	mov	r2, r4
 8005d26:	4631      	mov	r1, r6
 8005d28:	bf28      	it	cs
 8005d2a:	463a      	movcs	r2, r7
 8005d2c:	f7ff f984 	bl	8005038 <memcpy>
 8005d30:	4631      	mov	r1, r6
 8005d32:	4640      	mov	r0, r8
 8005d34:	f7ff fd24 	bl	8005780 <_free_r>
 8005d38:	e7e1      	b.n	8005cfe <_realloc_r+0x1e>
 8005d3a:	4635      	mov	r5, r6
 8005d3c:	e7df      	b.n	8005cfe <_realloc_r+0x1e>

08005d3e <__sfputc_r>:
 8005d3e:	6893      	ldr	r3, [r2, #8]
 8005d40:	b410      	push	{r4}
 8005d42:	3b01      	subs	r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	6093      	str	r3, [r2, #8]
 8005d48:	da07      	bge.n	8005d5a <__sfputc_r+0x1c>
 8005d4a:	6994      	ldr	r4, [r2, #24]
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	db01      	blt.n	8005d54 <__sfputc_r+0x16>
 8005d50:	290a      	cmp	r1, #10
 8005d52:	d102      	bne.n	8005d5a <__sfputc_r+0x1c>
 8005d54:	bc10      	pop	{r4}
 8005d56:	f000 b949 	b.w	8005fec <__swbuf_r>
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	1c58      	adds	r0, r3, #1
 8005d5e:	6010      	str	r0, [r2, #0]
 8005d60:	7019      	strb	r1, [r3, #0]
 8005d62:	4608      	mov	r0, r1
 8005d64:	bc10      	pop	{r4}
 8005d66:	4770      	bx	lr

08005d68 <__sfputs_r>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	460f      	mov	r7, r1
 8005d6e:	4614      	mov	r4, r2
 8005d70:	18d5      	adds	r5, r2, r3
 8005d72:	42ac      	cmp	r4, r5
 8005d74:	d101      	bne.n	8005d7a <__sfputs_r+0x12>
 8005d76:	2000      	movs	r0, #0
 8005d78:	e007      	b.n	8005d8a <__sfputs_r+0x22>
 8005d7a:	463a      	mov	r2, r7
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d82:	f7ff ffdc 	bl	8005d3e <__sfputc_r>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d1f3      	bne.n	8005d72 <__sfputs_r+0xa>
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d8c <_vfiprintf_r>:
 8005d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	460d      	mov	r5, r1
 8005d92:	4614      	mov	r4, r2
 8005d94:	4698      	mov	r8, r3
 8005d96:	4606      	mov	r6, r0
 8005d98:	b09d      	sub	sp, #116	; 0x74
 8005d9a:	b118      	cbz	r0, 8005da4 <_vfiprintf_r+0x18>
 8005d9c:	6983      	ldr	r3, [r0, #24]
 8005d9e:	b90b      	cbnz	r3, 8005da4 <_vfiprintf_r+0x18>
 8005da0:	f000 fb10 	bl	80063c4 <__sinit>
 8005da4:	4b89      	ldr	r3, [pc, #548]	; (8005fcc <_vfiprintf_r+0x240>)
 8005da6:	429d      	cmp	r5, r3
 8005da8:	d11b      	bne.n	8005de2 <_vfiprintf_r+0x56>
 8005daa:	6875      	ldr	r5, [r6, #4]
 8005dac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dae:	07d9      	lsls	r1, r3, #31
 8005db0:	d405      	bmi.n	8005dbe <_vfiprintf_r+0x32>
 8005db2:	89ab      	ldrh	r3, [r5, #12]
 8005db4:	059a      	lsls	r2, r3, #22
 8005db6:	d402      	bmi.n	8005dbe <_vfiprintf_r+0x32>
 8005db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dba:	f000 fba1 	bl	8006500 <__retarget_lock_acquire_recursive>
 8005dbe:	89ab      	ldrh	r3, [r5, #12]
 8005dc0:	071b      	lsls	r3, r3, #28
 8005dc2:	d501      	bpl.n	8005dc8 <_vfiprintf_r+0x3c>
 8005dc4:	692b      	ldr	r3, [r5, #16]
 8005dc6:	b9eb      	cbnz	r3, 8005e04 <_vfiprintf_r+0x78>
 8005dc8:	4629      	mov	r1, r5
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f000 f96e 	bl	80060ac <__swsetup_r>
 8005dd0:	b1c0      	cbz	r0, 8005e04 <_vfiprintf_r+0x78>
 8005dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dd4:	07dc      	lsls	r4, r3, #31
 8005dd6:	d50e      	bpl.n	8005df6 <_vfiprintf_r+0x6a>
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	b01d      	add	sp, #116	; 0x74
 8005dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de2:	4b7b      	ldr	r3, [pc, #492]	; (8005fd0 <_vfiprintf_r+0x244>)
 8005de4:	429d      	cmp	r5, r3
 8005de6:	d101      	bne.n	8005dec <_vfiprintf_r+0x60>
 8005de8:	68b5      	ldr	r5, [r6, #8]
 8005dea:	e7df      	b.n	8005dac <_vfiprintf_r+0x20>
 8005dec:	4b79      	ldr	r3, [pc, #484]	; (8005fd4 <_vfiprintf_r+0x248>)
 8005dee:	429d      	cmp	r5, r3
 8005df0:	bf08      	it	eq
 8005df2:	68f5      	ldreq	r5, [r6, #12]
 8005df4:	e7da      	b.n	8005dac <_vfiprintf_r+0x20>
 8005df6:	89ab      	ldrh	r3, [r5, #12]
 8005df8:	0598      	lsls	r0, r3, #22
 8005dfa:	d4ed      	bmi.n	8005dd8 <_vfiprintf_r+0x4c>
 8005dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dfe:	f000 fb80 	bl	8006502 <__retarget_lock_release_recursive>
 8005e02:	e7e9      	b.n	8005dd8 <_vfiprintf_r+0x4c>
 8005e04:	2300      	movs	r3, #0
 8005e06:	9309      	str	r3, [sp, #36]	; 0x24
 8005e08:	2320      	movs	r3, #32
 8005e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e0e:	2330      	movs	r3, #48	; 0x30
 8005e10:	f04f 0901 	mov.w	r9, #1
 8005e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e18:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005fd8 <_vfiprintf_r+0x24c>
 8005e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e20:	4623      	mov	r3, r4
 8005e22:	469a      	mov	sl, r3
 8005e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e28:	b10a      	cbz	r2, 8005e2e <_vfiprintf_r+0xa2>
 8005e2a:	2a25      	cmp	r2, #37	; 0x25
 8005e2c:	d1f9      	bne.n	8005e22 <_vfiprintf_r+0x96>
 8005e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e32:	d00b      	beq.n	8005e4c <_vfiprintf_r+0xc0>
 8005e34:	465b      	mov	r3, fp
 8005e36:	4622      	mov	r2, r4
 8005e38:	4629      	mov	r1, r5
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f7ff ff94 	bl	8005d68 <__sfputs_r>
 8005e40:	3001      	adds	r0, #1
 8005e42:	f000 80aa 	beq.w	8005f9a <_vfiprintf_r+0x20e>
 8005e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e48:	445a      	add	r2, fp
 8005e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 80a2 	beq.w	8005f9a <_vfiprintf_r+0x20e>
 8005e56:	2300      	movs	r3, #0
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e60:	f10a 0a01 	add.w	sl, sl, #1
 8005e64:	9304      	str	r3, [sp, #16]
 8005e66:	9307      	str	r3, [sp, #28]
 8005e68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8005e6e:	4654      	mov	r4, sl
 8005e70:	2205      	movs	r2, #5
 8005e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e76:	4858      	ldr	r0, [pc, #352]	; (8005fd8 <_vfiprintf_r+0x24c>)
 8005e78:	f7ff f8d0 	bl	800501c <memchr>
 8005e7c:	9a04      	ldr	r2, [sp, #16]
 8005e7e:	b9d8      	cbnz	r0, 8005eb8 <_vfiprintf_r+0x12c>
 8005e80:	06d1      	lsls	r1, r2, #27
 8005e82:	bf44      	itt	mi
 8005e84:	2320      	movmi	r3, #32
 8005e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e8a:	0713      	lsls	r3, r2, #28
 8005e8c:	bf44      	itt	mi
 8005e8e:	232b      	movmi	r3, #43	; 0x2b
 8005e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e94:	f89a 3000 	ldrb.w	r3, [sl]
 8005e98:	2b2a      	cmp	r3, #42	; 0x2a
 8005e9a:	d015      	beq.n	8005ec8 <_vfiprintf_r+0x13c>
 8005e9c:	4654      	mov	r4, sl
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f04f 0c0a 	mov.w	ip, #10
 8005ea4:	9a07      	ldr	r2, [sp, #28]
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eac:	3b30      	subs	r3, #48	; 0x30
 8005eae:	2b09      	cmp	r3, #9
 8005eb0:	d94e      	bls.n	8005f50 <_vfiprintf_r+0x1c4>
 8005eb2:	b1b0      	cbz	r0, 8005ee2 <_vfiprintf_r+0x156>
 8005eb4:	9207      	str	r2, [sp, #28]
 8005eb6:	e014      	b.n	8005ee2 <_vfiprintf_r+0x156>
 8005eb8:	eba0 0308 	sub.w	r3, r0, r8
 8005ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	46a2      	mov	sl, r4
 8005ec4:	9304      	str	r3, [sp, #16]
 8005ec6:	e7d2      	b.n	8005e6e <_vfiprintf_r+0xe2>
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	1d19      	adds	r1, r3, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	9103      	str	r1, [sp, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bfbb      	ittet	lt
 8005ed4:	425b      	neglt	r3, r3
 8005ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eda:	9307      	strge	r3, [sp, #28]
 8005edc:	9307      	strlt	r3, [sp, #28]
 8005ede:	bfb8      	it	lt
 8005ee0:	9204      	strlt	r2, [sp, #16]
 8005ee2:	7823      	ldrb	r3, [r4, #0]
 8005ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ee6:	d10c      	bne.n	8005f02 <_vfiprintf_r+0x176>
 8005ee8:	7863      	ldrb	r3, [r4, #1]
 8005eea:	2b2a      	cmp	r3, #42	; 0x2a
 8005eec:	d135      	bne.n	8005f5a <_vfiprintf_r+0x1ce>
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	3402      	adds	r4, #2
 8005ef2:	1d1a      	adds	r2, r3, #4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	9203      	str	r2, [sp, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bfb8      	it	lt
 8005efc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f00:	9305      	str	r3, [sp, #20]
 8005f02:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005fdc <_vfiprintf_r+0x250>
 8005f06:	2203      	movs	r2, #3
 8005f08:	4650      	mov	r0, sl
 8005f0a:	7821      	ldrb	r1, [r4, #0]
 8005f0c:	f7ff f886 	bl	800501c <memchr>
 8005f10:	b140      	cbz	r0, 8005f24 <_vfiprintf_r+0x198>
 8005f12:	2340      	movs	r3, #64	; 0x40
 8005f14:	eba0 000a 	sub.w	r0, r0, sl
 8005f18:	fa03 f000 	lsl.w	r0, r3, r0
 8005f1c:	9b04      	ldr	r3, [sp, #16]
 8005f1e:	3401      	adds	r4, #1
 8005f20:	4303      	orrs	r3, r0
 8005f22:	9304      	str	r3, [sp, #16]
 8005f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f28:	2206      	movs	r2, #6
 8005f2a:	482d      	ldr	r0, [pc, #180]	; (8005fe0 <_vfiprintf_r+0x254>)
 8005f2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f30:	f7ff f874 	bl	800501c <memchr>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d03f      	beq.n	8005fb8 <_vfiprintf_r+0x22c>
 8005f38:	4b2a      	ldr	r3, [pc, #168]	; (8005fe4 <_vfiprintf_r+0x258>)
 8005f3a:	bb1b      	cbnz	r3, 8005f84 <_vfiprintf_r+0x1f8>
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	3307      	adds	r3, #7
 8005f40:	f023 0307 	bic.w	r3, r3, #7
 8005f44:	3308      	adds	r3, #8
 8005f46:	9303      	str	r3, [sp, #12]
 8005f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4a:	443b      	add	r3, r7
 8005f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f4e:	e767      	b.n	8005e20 <_vfiprintf_r+0x94>
 8005f50:	460c      	mov	r4, r1
 8005f52:	2001      	movs	r0, #1
 8005f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f58:	e7a5      	b.n	8005ea6 <_vfiprintf_r+0x11a>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f04f 0c0a 	mov.w	ip, #10
 8005f60:	4619      	mov	r1, r3
 8005f62:	3401      	adds	r4, #1
 8005f64:	9305      	str	r3, [sp, #20]
 8005f66:	4620      	mov	r0, r4
 8005f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f6c:	3a30      	subs	r2, #48	; 0x30
 8005f6e:	2a09      	cmp	r2, #9
 8005f70:	d903      	bls.n	8005f7a <_vfiprintf_r+0x1ee>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0c5      	beq.n	8005f02 <_vfiprintf_r+0x176>
 8005f76:	9105      	str	r1, [sp, #20]
 8005f78:	e7c3      	b.n	8005f02 <_vfiprintf_r+0x176>
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f82:	e7f0      	b.n	8005f66 <_vfiprintf_r+0x1da>
 8005f84:	ab03      	add	r3, sp, #12
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	462a      	mov	r2, r5
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <_vfiprintf_r+0x25c>)
 8005f8e:	a904      	add	r1, sp, #16
 8005f90:	f7fd fdda 	bl	8003b48 <_printf_float>
 8005f94:	4607      	mov	r7, r0
 8005f96:	1c78      	adds	r0, r7, #1
 8005f98:	d1d6      	bne.n	8005f48 <_vfiprintf_r+0x1bc>
 8005f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f9c:	07d9      	lsls	r1, r3, #31
 8005f9e:	d405      	bmi.n	8005fac <_vfiprintf_r+0x220>
 8005fa0:	89ab      	ldrh	r3, [r5, #12]
 8005fa2:	059a      	lsls	r2, r3, #22
 8005fa4:	d402      	bmi.n	8005fac <_vfiprintf_r+0x220>
 8005fa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fa8:	f000 faab 	bl	8006502 <__retarget_lock_release_recursive>
 8005fac:	89ab      	ldrh	r3, [r5, #12]
 8005fae:	065b      	lsls	r3, r3, #25
 8005fb0:	f53f af12 	bmi.w	8005dd8 <_vfiprintf_r+0x4c>
 8005fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fb6:	e711      	b.n	8005ddc <_vfiprintf_r+0x50>
 8005fb8:	ab03      	add	r3, sp, #12
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	462a      	mov	r2, r5
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <_vfiprintf_r+0x25c>)
 8005fc2:	a904      	add	r1, sp, #16
 8005fc4:	f7fe f85c 	bl	8004080 <_printf_i>
 8005fc8:	e7e4      	b.n	8005f94 <_vfiprintf_r+0x208>
 8005fca:	bf00      	nop
 8005fcc:	08006bac 	.word	0x08006bac
 8005fd0:	08006bcc 	.word	0x08006bcc
 8005fd4:	08006b8c 	.word	0x08006b8c
 8005fd8:	08006a34 	.word	0x08006a34
 8005fdc:	08006a3a 	.word	0x08006a3a
 8005fe0:	08006a3e 	.word	0x08006a3e
 8005fe4:	08003b49 	.word	0x08003b49
 8005fe8:	08005d69 	.word	0x08005d69

08005fec <__swbuf_r>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	460e      	mov	r6, r1
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	b118      	cbz	r0, 8005ffe <__swbuf_r+0x12>
 8005ff6:	6983      	ldr	r3, [r0, #24]
 8005ff8:	b90b      	cbnz	r3, 8005ffe <__swbuf_r+0x12>
 8005ffa:	f000 f9e3 	bl	80063c4 <__sinit>
 8005ffe:	4b21      	ldr	r3, [pc, #132]	; (8006084 <__swbuf_r+0x98>)
 8006000:	429c      	cmp	r4, r3
 8006002:	d12b      	bne.n	800605c <__swbuf_r+0x70>
 8006004:	686c      	ldr	r4, [r5, #4]
 8006006:	69a3      	ldr	r3, [r4, #24]
 8006008:	60a3      	str	r3, [r4, #8]
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	071a      	lsls	r2, r3, #28
 800600e:	d52f      	bpl.n	8006070 <__swbuf_r+0x84>
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	b36b      	cbz	r3, 8006070 <__swbuf_r+0x84>
 8006014:	6923      	ldr	r3, [r4, #16]
 8006016:	6820      	ldr	r0, [r4, #0]
 8006018:	b2f6      	uxtb	r6, r6
 800601a:	1ac0      	subs	r0, r0, r3
 800601c:	6963      	ldr	r3, [r4, #20]
 800601e:	4637      	mov	r7, r6
 8006020:	4283      	cmp	r3, r0
 8006022:	dc04      	bgt.n	800602e <__swbuf_r+0x42>
 8006024:	4621      	mov	r1, r4
 8006026:	4628      	mov	r0, r5
 8006028:	f000 f938 	bl	800629c <_fflush_r>
 800602c:	bb30      	cbnz	r0, 800607c <__swbuf_r+0x90>
 800602e:	68a3      	ldr	r3, [r4, #8]
 8006030:	3001      	adds	r0, #1
 8006032:	3b01      	subs	r3, #1
 8006034:	60a3      	str	r3, [r4, #8]
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	6022      	str	r2, [r4, #0]
 800603c:	701e      	strb	r6, [r3, #0]
 800603e:	6963      	ldr	r3, [r4, #20]
 8006040:	4283      	cmp	r3, r0
 8006042:	d004      	beq.n	800604e <__swbuf_r+0x62>
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	07db      	lsls	r3, r3, #31
 8006048:	d506      	bpl.n	8006058 <__swbuf_r+0x6c>
 800604a:	2e0a      	cmp	r6, #10
 800604c:	d104      	bne.n	8006058 <__swbuf_r+0x6c>
 800604e:	4621      	mov	r1, r4
 8006050:	4628      	mov	r0, r5
 8006052:	f000 f923 	bl	800629c <_fflush_r>
 8006056:	b988      	cbnz	r0, 800607c <__swbuf_r+0x90>
 8006058:	4638      	mov	r0, r7
 800605a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <__swbuf_r+0x9c>)
 800605e:	429c      	cmp	r4, r3
 8006060:	d101      	bne.n	8006066 <__swbuf_r+0x7a>
 8006062:	68ac      	ldr	r4, [r5, #8]
 8006064:	e7cf      	b.n	8006006 <__swbuf_r+0x1a>
 8006066:	4b09      	ldr	r3, [pc, #36]	; (800608c <__swbuf_r+0xa0>)
 8006068:	429c      	cmp	r4, r3
 800606a:	bf08      	it	eq
 800606c:	68ec      	ldreq	r4, [r5, #12]
 800606e:	e7ca      	b.n	8006006 <__swbuf_r+0x1a>
 8006070:	4621      	mov	r1, r4
 8006072:	4628      	mov	r0, r5
 8006074:	f000 f81a 	bl	80060ac <__swsetup_r>
 8006078:	2800      	cmp	r0, #0
 800607a:	d0cb      	beq.n	8006014 <__swbuf_r+0x28>
 800607c:	f04f 37ff 	mov.w	r7, #4294967295
 8006080:	e7ea      	b.n	8006058 <__swbuf_r+0x6c>
 8006082:	bf00      	nop
 8006084:	08006bac 	.word	0x08006bac
 8006088:	08006bcc 	.word	0x08006bcc
 800608c:	08006b8c 	.word	0x08006b8c

08006090 <__ascii_wctomb>:
 8006090:	4603      	mov	r3, r0
 8006092:	4608      	mov	r0, r1
 8006094:	b141      	cbz	r1, 80060a8 <__ascii_wctomb+0x18>
 8006096:	2aff      	cmp	r2, #255	; 0xff
 8006098:	d904      	bls.n	80060a4 <__ascii_wctomb+0x14>
 800609a:	228a      	movs	r2, #138	; 0x8a
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	4770      	bx	lr
 80060a4:	2001      	movs	r0, #1
 80060a6:	700a      	strb	r2, [r1, #0]
 80060a8:	4770      	bx	lr
	...

080060ac <__swsetup_r>:
 80060ac:	4b32      	ldr	r3, [pc, #200]	; (8006178 <__swsetup_r+0xcc>)
 80060ae:	b570      	push	{r4, r5, r6, lr}
 80060b0:	681d      	ldr	r5, [r3, #0]
 80060b2:	4606      	mov	r6, r0
 80060b4:	460c      	mov	r4, r1
 80060b6:	b125      	cbz	r5, 80060c2 <__swsetup_r+0x16>
 80060b8:	69ab      	ldr	r3, [r5, #24]
 80060ba:	b913      	cbnz	r3, 80060c2 <__swsetup_r+0x16>
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 f981 	bl	80063c4 <__sinit>
 80060c2:	4b2e      	ldr	r3, [pc, #184]	; (800617c <__swsetup_r+0xd0>)
 80060c4:	429c      	cmp	r4, r3
 80060c6:	d10f      	bne.n	80060e8 <__swsetup_r+0x3c>
 80060c8:	686c      	ldr	r4, [r5, #4]
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060d0:	0719      	lsls	r1, r3, #28
 80060d2:	d42c      	bmi.n	800612e <__swsetup_r+0x82>
 80060d4:	06dd      	lsls	r5, r3, #27
 80060d6:	d411      	bmi.n	80060fc <__swsetup_r+0x50>
 80060d8:	2309      	movs	r3, #9
 80060da:	6033      	str	r3, [r6, #0]
 80060dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060e0:	f04f 30ff 	mov.w	r0, #4294967295
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	e03e      	b.n	8006166 <__swsetup_r+0xba>
 80060e8:	4b25      	ldr	r3, [pc, #148]	; (8006180 <__swsetup_r+0xd4>)
 80060ea:	429c      	cmp	r4, r3
 80060ec:	d101      	bne.n	80060f2 <__swsetup_r+0x46>
 80060ee:	68ac      	ldr	r4, [r5, #8]
 80060f0:	e7eb      	b.n	80060ca <__swsetup_r+0x1e>
 80060f2:	4b24      	ldr	r3, [pc, #144]	; (8006184 <__swsetup_r+0xd8>)
 80060f4:	429c      	cmp	r4, r3
 80060f6:	bf08      	it	eq
 80060f8:	68ec      	ldreq	r4, [r5, #12]
 80060fa:	e7e6      	b.n	80060ca <__swsetup_r+0x1e>
 80060fc:	0758      	lsls	r0, r3, #29
 80060fe:	d512      	bpl.n	8006126 <__swsetup_r+0x7a>
 8006100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006102:	b141      	cbz	r1, 8006116 <__swsetup_r+0x6a>
 8006104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006108:	4299      	cmp	r1, r3
 800610a:	d002      	beq.n	8006112 <__swsetup_r+0x66>
 800610c:	4630      	mov	r0, r6
 800610e:	f7ff fb37 	bl	8005780 <_free_r>
 8006112:	2300      	movs	r3, #0
 8006114:	6363      	str	r3, [r4, #52]	; 0x34
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	2300      	movs	r3, #0
 8006120:	6063      	str	r3, [r4, #4]
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	89a3      	ldrh	r3, [r4, #12]
 8006128:	f043 0308 	orr.w	r3, r3, #8
 800612c:	81a3      	strh	r3, [r4, #12]
 800612e:	6923      	ldr	r3, [r4, #16]
 8006130:	b94b      	cbnz	r3, 8006146 <__swsetup_r+0x9a>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613c:	d003      	beq.n	8006146 <__swsetup_r+0x9a>
 800613e:	4621      	mov	r1, r4
 8006140:	4630      	mov	r0, r6
 8006142:	f000 fa05 	bl	8006550 <__smakebuf_r>
 8006146:	89a0      	ldrh	r0, [r4, #12]
 8006148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800614c:	f010 0301 	ands.w	r3, r0, #1
 8006150:	d00a      	beq.n	8006168 <__swsetup_r+0xbc>
 8006152:	2300      	movs	r3, #0
 8006154:	60a3      	str	r3, [r4, #8]
 8006156:	6963      	ldr	r3, [r4, #20]
 8006158:	425b      	negs	r3, r3
 800615a:	61a3      	str	r3, [r4, #24]
 800615c:	6923      	ldr	r3, [r4, #16]
 800615e:	b943      	cbnz	r3, 8006172 <__swsetup_r+0xc6>
 8006160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006164:	d1ba      	bne.n	80060dc <__swsetup_r+0x30>
 8006166:	bd70      	pop	{r4, r5, r6, pc}
 8006168:	0781      	lsls	r1, r0, #30
 800616a:	bf58      	it	pl
 800616c:	6963      	ldrpl	r3, [r4, #20]
 800616e:	60a3      	str	r3, [r4, #8]
 8006170:	e7f4      	b.n	800615c <__swsetup_r+0xb0>
 8006172:	2000      	movs	r0, #0
 8006174:	e7f7      	b.n	8006166 <__swsetup_r+0xba>
 8006176:	bf00      	nop
 8006178:	2000000c 	.word	0x2000000c
 800617c:	08006bac 	.word	0x08006bac
 8006180:	08006bcc 	.word	0x08006bcc
 8006184:	08006b8c 	.word	0x08006b8c

08006188 <abort>:
 8006188:	2006      	movs	r0, #6
 800618a:	b508      	push	{r3, lr}
 800618c:	f000 fa50 	bl	8006630 <raise>
 8006190:	2001      	movs	r0, #1
 8006192:	f7fb fba2 	bl	80018da <_exit>
	...

08006198 <__sflush_r>:
 8006198:	898a      	ldrh	r2, [r1, #12]
 800619a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619c:	4605      	mov	r5, r0
 800619e:	0710      	lsls	r0, r2, #28
 80061a0:	460c      	mov	r4, r1
 80061a2:	d457      	bmi.n	8006254 <__sflush_r+0xbc>
 80061a4:	684b      	ldr	r3, [r1, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	dc04      	bgt.n	80061b4 <__sflush_r+0x1c>
 80061aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dc01      	bgt.n	80061b4 <__sflush_r+0x1c>
 80061b0:	2000      	movs	r0, #0
 80061b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	d0fa      	beq.n	80061b0 <__sflush_r+0x18>
 80061ba:	2300      	movs	r3, #0
 80061bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061c0:	682f      	ldr	r7, [r5, #0]
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	d032      	beq.n	800622c <__sflush_r+0x94>
 80061c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	075a      	lsls	r2, r3, #29
 80061cc:	d505      	bpl.n	80061da <__sflush_r+0x42>
 80061ce:	6863      	ldr	r3, [r4, #4]
 80061d0:	1ac0      	subs	r0, r0, r3
 80061d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061d4:	b10b      	cbz	r3, 80061da <__sflush_r+0x42>
 80061d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061d8:	1ac0      	subs	r0, r0, r3
 80061da:	2300      	movs	r3, #0
 80061dc:	4602      	mov	r2, r0
 80061de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061e0:	4628      	mov	r0, r5
 80061e2:	6a21      	ldr	r1, [r4, #32]
 80061e4:	47b0      	blx	r6
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	d106      	bne.n	80061fa <__sflush_r+0x62>
 80061ec:	6829      	ldr	r1, [r5, #0]
 80061ee:	291d      	cmp	r1, #29
 80061f0:	d82c      	bhi.n	800624c <__sflush_r+0xb4>
 80061f2:	4a29      	ldr	r2, [pc, #164]	; (8006298 <__sflush_r+0x100>)
 80061f4:	40ca      	lsrs	r2, r1
 80061f6:	07d6      	lsls	r6, r2, #31
 80061f8:	d528      	bpl.n	800624c <__sflush_r+0xb4>
 80061fa:	2200      	movs	r2, #0
 80061fc:	6062      	str	r2, [r4, #4]
 80061fe:	6922      	ldr	r2, [r4, #16]
 8006200:	04d9      	lsls	r1, r3, #19
 8006202:	6022      	str	r2, [r4, #0]
 8006204:	d504      	bpl.n	8006210 <__sflush_r+0x78>
 8006206:	1c42      	adds	r2, r0, #1
 8006208:	d101      	bne.n	800620e <__sflush_r+0x76>
 800620a:	682b      	ldr	r3, [r5, #0]
 800620c:	b903      	cbnz	r3, 8006210 <__sflush_r+0x78>
 800620e:	6560      	str	r0, [r4, #84]	; 0x54
 8006210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006212:	602f      	str	r7, [r5, #0]
 8006214:	2900      	cmp	r1, #0
 8006216:	d0cb      	beq.n	80061b0 <__sflush_r+0x18>
 8006218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800621c:	4299      	cmp	r1, r3
 800621e:	d002      	beq.n	8006226 <__sflush_r+0x8e>
 8006220:	4628      	mov	r0, r5
 8006222:	f7ff faad 	bl	8005780 <_free_r>
 8006226:	2000      	movs	r0, #0
 8006228:	6360      	str	r0, [r4, #52]	; 0x34
 800622a:	e7c2      	b.n	80061b2 <__sflush_r+0x1a>
 800622c:	6a21      	ldr	r1, [r4, #32]
 800622e:	2301      	movs	r3, #1
 8006230:	4628      	mov	r0, r5
 8006232:	47b0      	blx	r6
 8006234:	1c41      	adds	r1, r0, #1
 8006236:	d1c7      	bne.n	80061c8 <__sflush_r+0x30>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0c4      	beq.n	80061c8 <__sflush_r+0x30>
 800623e:	2b1d      	cmp	r3, #29
 8006240:	d001      	beq.n	8006246 <__sflush_r+0xae>
 8006242:	2b16      	cmp	r3, #22
 8006244:	d101      	bne.n	800624a <__sflush_r+0xb2>
 8006246:	602f      	str	r7, [r5, #0]
 8006248:	e7b2      	b.n	80061b0 <__sflush_r+0x18>
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	e7ae      	b.n	80061b2 <__sflush_r+0x1a>
 8006254:	690f      	ldr	r7, [r1, #16]
 8006256:	2f00      	cmp	r7, #0
 8006258:	d0aa      	beq.n	80061b0 <__sflush_r+0x18>
 800625a:	0793      	lsls	r3, r2, #30
 800625c:	bf18      	it	ne
 800625e:	2300      	movne	r3, #0
 8006260:	680e      	ldr	r6, [r1, #0]
 8006262:	bf08      	it	eq
 8006264:	694b      	ldreq	r3, [r1, #20]
 8006266:	1bf6      	subs	r6, r6, r7
 8006268:	600f      	str	r7, [r1, #0]
 800626a:	608b      	str	r3, [r1, #8]
 800626c:	2e00      	cmp	r6, #0
 800626e:	dd9f      	ble.n	80061b0 <__sflush_r+0x18>
 8006270:	4633      	mov	r3, r6
 8006272:	463a      	mov	r2, r7
 8006274:	4628      	mov	r0, r5
 8006276:	6a21      	ldr	r1, [r4, #32]
 8006278:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800627c:	47e0      	blx	ip
 800627e:	2800      	cmp	r0, #0
 8006280:	dc06      	bgt.n	8006290 <__sflush_r+0xf8>
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	f04f 30ff 	mov.w	r0, #4294967295
 8006288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	e790      	b.n	80061b2 <__sflush_r+0x1a>
 8006290:	4407      	add	r7, r0
 8006292:	1a36      	subs	r6, r6, r0
 8006294:	e7ea      	b.n	800626c <__sflush_r+0xd4>
 8006296:	bf00      	nop
 8006298:	20400001 	.word	0x20400001

0800629c <_fflush_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	690b      	ldr	r3, [r1, #16]
 80062a0:	4605      	mov	r5, r0
 80062a2:	460c      	mov	r4, r1
 80062a4:	b913      	cbnz	r3, 80062ac <_fflush_r+0x10>
 80062a6:	2500      	movs	r5, #0
 80062a8:	4628      	mov	r0, r5
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	b118      	cbz	r0, 80062b6 <_fflush_r+0x1a>
 80062ae:	6983      	ldr	r3, [r0, #24]
 80062b0:	b90b      	cbnz	r3, 80062b6 <_fflush_r+0x1a>
 80062b2:	f000 f887 	bl	80063c4 <__sinit>
 80062b6:	4b14      	ldr	r3, [pc, #80]	; (8006308 <_fflush_r+0x6c>)
 80062b8:	429c      	cmp	r4, r3
 80062ba:	d11b      	bne.n	80062f4 <_fflush_r+0x58>
 80062bc:	686c      	ldr	r4, [r5, #4]
 80062be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ef      	beq.n	80062a6 <_fflush_r+0xa>
 80062c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062c8:	07d0      	lsls	r0, r2, #31
 80062ca:	d404      	bmi.n	80062d6 <_fflush_r+0x3a>
 80062cc:	0599      	lsls	r1, r3, #22
 80062ce:	d402      	bmi.n	80062d6 <_fflush_r+0x3a>
 80062d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062d2:	f000 f915 	bl	8006500 <__retarget_lock_acquire_recursive>
 80062d6:	4628      	mov	r0, r5
 80062d8:	4621      	mov	r1, r4
 80062da:	f7ff ff5d 	bl	8006198 <__sflush_r>
 80062de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062e0:	4605      	mov	r5, r0
 80062e2:	07da      	lsls	r2, r3, #31
 80062e4:	d4e0      	bmi.n	80062a8 <_fflush_r+0xc>
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	059b      	lsls	r3, r3, #22
 80062ea:	d4dd      	bmi.n	80062a8 <_fflush_r+0xc>
 80062ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ee:	f000 f908 	bl	8006502 <__retarget_lock_release_recursive>
 80062f2:	e7d9      	b.n	80062a8 <_fflush_r+0xc>
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <_fflush_r+0x70>)
 80062f6:	429c      	cmp	r4, r3
 80062f8:	d101      	bne.n	80062fe <_fflush_r+0x62>
 80062fa:	68ac      	ldr	r4, [r5, #8]
 80062fc:	e7df      	b.n	80062be <_fflush_r+0x22>
 80062fe:	4b04      	ldr	r3, [pc, #16]	; (8006310 <_fflush_r+0x74>)
 8006300:	429c      	cmp	r4, r3
 8006302:	bf08      	it	eq
 8006304:	68ec      	ldreq	r4, [r5, #12]
 8006306:	e7da      	b.n	80062be <_fflush_r+0x22>
 8006308:	08006bac 	.word	0x08006bac
 800630c:	08006bcc 	.word	0x08006bcc
 8006310:	08006b8c 	.word	0x08006b8c

08006314 <std>:
 8006314:	2300      	movs	r3, #0
 8006316:	b510      	push	{r4, lr}
 8006318:	4604      	mov	r4, r0
 800631a:	e9c0 3300 	strd	r3, r3, [r0]
 800631e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006322:	6083      	str	r3, [r0, #8]
 8006324:	8181      	strh	r1, [r0, #12]
 8006326:	6643      	str	r3, [r0, #100]	; 0x64
 8006328:	81c2      	strh	r2, [r0, #14]
 800632a:	6183      	str	r3, [r0, #24]
 800632c:	4619      	mov	r1, r3
 800632e:	2208      	movs	r2, #8
 8006330:	305c      	adds	r0, #92	; 0x5c
 8006332:	f7fd fb63 	bl	80039fc <memset>
 8006336:	4b05      	ldr	r3, [pc, #20]	; (800634c <std+0x38>)
 8006338:	6224      	str	r4, [r4, #32]
 800633a:	6263      	str	r3, [r4, #36]	; 0x24
 800633c:	4b04      	ldr	r3, [pc, #16]	; (8006350 <std+0x3c>)
 800633e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006340:	4b04      	ldr	r3, [pc, #16]	; (8006354 <std+0x40>)
 8006342:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006344:	4b04      	ldr	r3, [pc, #16]	; (8006358 <std+0x44>)
 8006346:	6323      	str	r3, [r4, #48]	; 0x30
 8006348:	bd10      	pop	{r4, pc}
 800634a:	bf00      	nop
 800634c:	08006669 	.word	0x08006669
 8006350:	0800668b 	.word	0x0800668b
 8006354:	080066c3 	.word	0x080066c3
 8006358:	080066e7 	.word	0x080066e7

0800635c <_cleanup_r>:
 800635c:	4901      	ldr	r1, [pc, #4]	; (8006364 <_cleanup_r+0x8>)
 800635e:	f000 b8af 	b.w	80064c0 <_fwalk_reent>
 8006362:	bf00      	nop
 8006364:	0800629d 	.word	0x0800629d

08006368 <__sfmoreglue>:
 8006368:	2268      	movs	r2, #104	; 0x68
 800636a:	b570      	push	{r4, r5, r6, lr}
 800636c:	1e4d      	subs	r5, r1, #1
 800636e:	4355      	muls	r5, r2
 8006370:	460e      	mov	r6, r1
 8006372:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006376:	f7ff fa6b 	bl	8005850 <_malloc_r>
 800637a:	4604      	mov	r4, r0
 800637c:	b140      	cbz	r0, 8006390 <__sfmoreglue+0x28>
 800637e:	2100      	movs	r1, #0
 8006380:	e9c0 1600 	strd	r1, r6, [r0]
 8006384:	300c      	adds	r0, #12
 8006386:	60a0      	str	r0, [r4, #8]
 8006388:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800638c:	f7fd fb36 	bl	80039fc <memset>
 8006390:	4620      	mov	r0, r4
 8006392:	bd70      	pop	{r4, r5, r6, pc}

08006394 <__sfp_lock_acquire>:
 8006394:	4801      	ldr	r0, [pc, #4]	; (800639c <__sfp_lock_acquire+0x8>)
 8006396:	f000 b8b3 	b.w	8006500 <__retarget_lock_acquire_recursive>
 800639a:	bf00      	nop
 800639c:	200002e5 	.word	0x200002e5

080063a0 <__sfp_lock_release>:
 80063a0:	4801      	ldr	r0, [pc, #4]	; (80063a8 <__sfp_lock_release+0x8>)
 80063a2:	f000 b8ae 	b.w	8006502 <__retarget_lock_release_recursive>
 80063a6:	bf00      	nop
 80063a8:	200002e5 	.word	0x200002e5

080063ac <__sinit_lock_acquire>:
 80063ac:	4801      	ldr	r0, [pc, #4]	; (80063b4 <__sinit_lock_acquire+0x8>)
 80063ae:	f000 b8a7 	b.w	8006500 <__retarget_lock_acquire_recursive>
 80063b2:	bf00      	nop
 80063b4:	200002e6 	.word	0x200002e6

080063b8 <__sinit_lock_release>:
 80063b8:	4801      	ldr	r0, [pc, #4]	; (80063c0 <__sinit_lock_release+0x8>)
 80063ba:	f000 b8a2 	b.w	8006502 <__retarget_lock_release_recursive>
 80063be:	bf00      	nop
 80063c0:	200002e6 	.word	0x200002e6

080063c4 <__sinit>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	4604      	mov	r4, r0
 80063c8:	f7ff fff0 	bl	80063ac <__sinit_lock_acquire>
 80063cc:	69a3      	ldr	r3, [r4, #24]
 80063ce:	b11b      	cbz	r3, 80063d8 <__sinit+0x14>
 80063d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d4:	f7ff bff0 	b.w	80063b8 <__sinit_lock_release>
 80063d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063dc:	6523      	str	r3, [r4, #80]	; 0x50
 80063de:	4b13      	ldr	r3, [pc, #76]	; (800642c <__sinit+0x68>)
 80063e0:	4a13      	ldr	r2, [pc, #76]	; (8006430 <__sinit+0x6c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80063e6:	42a3      	cmp	r3, r4
 80063e8:	bf08      	it	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	4620      	mov	r0, r4
 80063ee:	bf08      	it	eq
 80063f0:	61a3      	streq	r3, [r4, #24]
 80063f2:	f000 f81f 	bl	8006434 <__sfp>
 80063f6:	6060      	str	r0, [r4, #4]
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 f81b 	bl	8006434 <__sfp>
 80063fe:	60a0      	str	r0, [r4, #8]
 8006400:	4620      	mov	r0, r4
 8006402:	f000 f817 	bl	8006434 <__sfp>
 8006406:	2200      	movs	r2, #0
 8006408:	2104      	movs	r1, #4
 800640a:	60e0      	str	r0, [r4, #12]
 800640c:	6860      	ldr	r0, [r4, #4]
 800640e:	f7ff ff81 	bl	8006314 <std>
 8006412:	2201      	movs	r2, #1
 8006414:	2109      	movs	r1, #9
 8006416:	68a0      	ldr	r0, [r4, #8]
 8006418:	f7ff ff7c 	bl	8006314 <std>
 800641c:	2202      	movs	r2, #2
 800641e:	2112      	movs	r1, #18
 8006420:	68e0      	ldr	r0, [r4, #12]
 8006422:	f7ff ff77 	bl	8006314 <std>
 8006426:	2301      	movs	r3, #1
 8006428:	61a3      	str	r3, [r4, #24]
 800642a:	e7d1      	b.n	80063d0 <__sinit+0xc>
 800642c:	08006810 	.word	0x08006810
 8006430:	0800635d 	.word	0x0800635d

08006434 <__sfp>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	4607      	mov	r7, r0
 8006438:	f7ff ffac 	bl	8006394 <__sfp_lock_acquire>
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <__sfp+0x84>)
 800643e:	681e      	ldr	r6, [r3, #0]
 8006440:	69b3      	ldr	r3, [r6, #24]
 8006442:	b913      	cbnz	r3, 800644a <__sfp+0x16>
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff ffbd 	bl	80063c4 <__sinit>
 800644a:	3648      	adds	r6, #72	; 0x48
 800644c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006450:	3b01      	subs	r3, #1
 8006452:	d503      	bpl.n	800645c <__sfp+0x28>
 8006454:	6833      	ldr	r3, [r6, #0]
 8006456:	b30b      	cbz	r3, 800649c <__sfp+0x68>
 8006458:	6836      	ldr	r6, [r6, #0]
 800645a:	e7f7      	b.n	800644c <__sfp+0x18>
 800645c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006460:	b9d5      	cbnz	r5, 8006498 <__sfp+0x64>
 8006462:	4b16      	ldr	r3, [pc, #88]	; (80064bc <__sfp+0x88>)
 8006464:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006468:	60e3      	str	r3, [r4, #12]
 800646a:	6665      	str	r5, [r4, #100]	; 0x64
 800646c:	f000 f847 	bl	80064fe <__retarget_lock_init_recursive>
 8006470:	f7ff ff96 	bl	80063a0 <__sfp_lock_release>
 8006474:	2208      	movs	r2, #8
 8006476:	4629      	mov	r1, r5
 8006478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800647c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006480:	6025      	str	r5, [r4, #0]
 8006482:	61a5      	str	r5, [r4, #24]
 8006484:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006488:	f7fd fab8 	bl	80039fc <memset>
 800648c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006490:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006494:	4620      	mov	r0, r4
 8006496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006498:	3468      	adds	r4, #104	; 0x68
 800649a:	e7d9      	b.n	8006450 <__sfp+0x1c>
 800649c:	2104      	movs	r1, #4
 800649e:	4638      	mov	r0, r7
 80064a0:	f7ff ff62 	bl	8006368 <__sfmoreglue>
 80064a4:	4604      	mov	r4, r0
 80064a6:	6030      	str	r0, [r6, #0]
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d1d5      	bne.n	8006458 <__sfp+0x24>
 80064ac:	f7ff ff78 	bl	80063a0 <__sfp_lock_release>
 80064b0:	230c      	movs	r3, #12
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	e7ee      	b.n	8006494 <__sfp+0x60>
 80064b6:	bf00      	nop
 80064b8:	08006810 	.word	0x08006810
 80064bc:	ffff0001 	.word	0xffff0001

080064c0 <_fwalk_reent>:
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	4606      	mov	r6, r0
 80064c6:	4688      	mov	r8, r1
 80064c8:	2700      	movs	r7, #0
 80064ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064d2:	f1b9 0901 	subs.w	r9, r9, #1
 80064d6:	d505      	bpl.n	80064e4 <_fwalk_reent+0x24>
 80064d8:	6824      	ldr	r4, [r4, #0]
 80064da:	2c00      	cmp	r4, #0
 80064dc:	d1f7      	bne.n	80064ce <_fwalk_reent+0xe>
 80064de:	4638      	mov	r0, r7
 80064e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e4:	89ab      	ldrh	r3, [r5, #12]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d907      	bls.n	80064fa <_fwalk_reent+0x3a>
 80064ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064ee:	3301      	adds	r3, #1
 80064f0:	d003      	beq.n	80064fa <_fwalk_reent+0x3a>
 80064f2:	4629      	mov	r1, r5
 80064f4:	4630      	mov	r0, r6
 80064f6:	47c0      	blx	r8
 80064f8:	4307      	orrs	r7, r0
 80064fa:	3568      	adds	r5, #104	; 0x68
 80064fc:	e7e9      	b.n	80064d2 <_fwalk_reent+0x12>

080064fe <__retarget_lock_init_recursive>:
 80064fe:	4770      	bx	lr

08006500 <__retarget_lock_acquire_recursive>:
 8006500:	4770      	bx	lr

08006502 <__retarget_lock_release_recursive>:
 8006502:	4770      	bx	lr

08006504 <__swhatbuf_r>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	460e      	mov	r6, r1
 8006508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650c:	4614      	mov	r4, r2
 800650e:	2900      	cmp	r1, #0
 8006510:	461d      	mov	r5, r3
 8006512:	b096      	sub	sp, #88	; 0x58
 8006514:	da08      	bge.n	8006528 <__swhatbuf_r+0x24>
 8006516:	2200      	movs	r2, #0
 8006518:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800651c:	602a      	str	r2, [r5, #0]
 800651e:	061a      	lsls	r2, r3, #24
 8006520:	d410      	bmi.n	8006544 <__swhatbuf_r+0x40>
 8006522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006526:	e00e      	b.n	8006546 <__swhatbuf_r+0x42>
 8006528:	466a      	mov	r2, sp
 800652a:	f000 f903 	bl	8006734 <_fstat_r>
 800652e:	2800      	cmp	r0, #0
 8006530:	dbf1      	blt.n	8006516 <__swhatbuf_r+0x12>
 8006532:	9a01      	ldr	r2, [sp, #4]
 8006534:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006538:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800653c:	425a      	negs	r2, r3
 800653e:	415a      	adcs	r2, r3
 8006540:	602a      	str	r2, [r5, #0]
 8006542:	e7ee      	b.n	8006522 <__swhatbuf_r+0x1e>
 8006544:	2340      	movs	r3, #64	; 0x40
 8006546:	2000      	movs	r0, #0
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	b016      	add	sp, #88	; 0x58
 800654c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006550 <__smakebuf_r>:
 8006550:	898b      	ldrh	r3, [r1, #12]
 8006552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006554:	079d      	lsls	r5, r3, #30
 8006556:	4606      	mov	r6, r0
 8006558:	460c      	mov	r4, r1
 800655a:	d507      	bpl.n	800656c <__smakebuf_r+0x1c>
 800655c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	2301      	movs	r3, #1
 8006566:	6163      	str	r3, [r4, #20]
 8006568:	b002      	add	sp, #8
 800656a:	bd70      	pop	{r4, r5, r6, pc}
 800656c:	466a      	mov	r2, sp
 800656e:	ab01      	add	r3, sp, #4
 8006570:	f7ff ffc8 	bl	8006504 <__swhatbuf_r>
 8006574:	9900      	ldr	r1, [sp, #0]
 8006576:	4605      	mov	r5, r0
 8006578:	4630      	mov	r0, r6
 800657a:	f7ff f969 	bl	8005850 <_malloc_r>
 800657e:	b948      	cbnz	r0, 8006594 <__smakebuf_r+0x44>
 8006580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006584:	059a      	lsls	r2, r3, #22
 8006586:	d4ef      	bmi.n	8006568 <__smakebuf_r+0x18>
 8006588:	f023 0303 	bic.w	r3, r3, #3
 800658c:	f043 0302 	orr.w	r3, r3, #2
 8006590:	81a3      	strh	r3, [r4, #12]
 8006592:	e7e3      	b.n	800655c <__smakebuf_r+0xc>
 8006594:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <__smakebuf_r+0x7c>)
 8006596:	62b3      	str	r3, [r6, #40]	; 0x28
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	6020      	str	r0, [r4, #0]
 800659c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	9b00      	ldr	r3, [sp, #0]
 80065a4:	6120      	str	r0, [r4, #16]
 80065a6:	6163      	str	r3, [r4, #20]
 80065a8:	9b01      	ldr	r3, [sp, #4]
 80065aa:	b15b      	cbz	r3, 80065c4 <__smakebuf_r+0x74>
 80065ac:	4630      	mov	r0, r6
 80065ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065b2:	f000 f8d1 	bl	8006758 <_isatty_r>
 80065b6:	b128      	cbz	r0, 80065c4 <__smakebuf_r+0x74>
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	f023 0303 	bic.w	r3, r3, #3
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	89a0      	ldrh	r0, [r4, #12]
 80065c6:	4305      	orrs	r5, r0
 80065c8:	81a5      	strh	r5, [r4, #12]
 80065ca:	e7cd      	b.n	8006568 <__smakebuf_r+0x18>
 80065cc:	0800635d 	.word	0x0800635d

080065d0 <_malloc_usable_size_r>:
 80065d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d4:	1f18      	subs	r0, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bfbc      	itt	lt
 80065da:	580b      	ldrlt	r3, [r1, r0]
 80065dc:	18c0      	addlt	r0, r0, r3
 80065de:	4770      	bx	lr

080065e0 <_raise_r>:
 80065e0:	291f      	cmp	r1, #31
 80065e2:	b538      	push	{r3, r4, r5, lr}
 80065e4:	4604      	mov	r4, r0
 80065e6:	460d      	mov	r5, r1
 80065e8:	d904      	bls.n	80065f4 <_raise_r+0x14>
 80065ea:	2316      	movs	r3, #22
 80065ec:	6003      	str	r3, [r0, #0]
 80065ee:	f04f 30ff 	mov.w	r0, #4294967295
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065f6:	b112      	cbz	r2, 80065fe <_raise_r+0x1e>
 80065f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065fc:	b94b      	cbnz	r3, 8006612 <_raise_r+0x32>
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 f830 	bl	8006664 <_getpid_r>
 8006604:	462a      	mov	r2, r5
 8006606:	4601      	mov	r1, r0
 8006608:	4620      	mov	r0, r4
 800660a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800660e:	f000 b817 	b.w	8006640 <_kill_r>
 8006612:	2b01      	cmp	r3, #1
 8006614:	d00a      	beq.n	800662c <_raise_r+0x4c>
 8006616:	1c59      	adds	r1, r3, #1
 8006618:	d103      	bne.n	8006622 <_raise_r+0x42>
 800661a:	2316      	movs	r3, #22
 800661c:	6003      	str	r3, [r0, #0]
 800661e:	2001      	movs	r0, #1
 8006620:	e7e7      	b.n	80065f2 <_raise_r+0x12>
 8006622:	2400      	movs	r4, #0
 8006624:	4628      	mov	r0, r5
 8006626:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800662a:	4798      	blx	r3
 800662c:	2000      	movs	r0, #0
 800662e:	e7e0      	b.n	80065f2 <_raise_r+0x12>

08006630 <raise>:
 8006630:	4b02      	ldr	r3, [pc, #8]	; (800663c <raise+0xc>)
 8006632:	4601      	mov	r1, r0
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	f7ff bfd3 	b.w	80065e0 <_raise_r>
 800663a:	bf00      	nop
 800663c:	2000000c 	.word	0x2000000c

08006640 <_kill_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	2300      	movs	r3, #0
 8006644:	4d06      	ldr	r5, [pc, #24]	; (8006660 <_kill_r+0x20>)
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	4611      	mov	r1, r2
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	f7fb f934 	bl	80018ba <_kill>
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	d102      	bne.n	800665c <_kill_r+0x1c>
 8006656:	682b      	ldr	r3, [r5, #0]
 8006658:	b103      	cbz	r3, 800665c <_kill_r+0x1c>
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	bd38      	pop	{r3, r4, r5, pc}
 800665e:	bf00      	nop
 8006660:	200002e0 	.word	0x200002e0

08006664 <_getpid_r>:
 8006664:	f7fb b922 	b.w	80018ac <_getpid>

08006668 <__sread>:
 8006668:	b510      	push	{r4, lr}
 800666a:	460c      	mov	r4, r1
 800666c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006670:	f000 f894 	bl	800679c <_read_r>
 8006674:	2800      	cmp	r0, #0
 8006676:	bfab      	itete	ge
 8006678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800667a:	89a3      	ldrhlt	r3, [r4, #12]
 800667c:	181b      	addge	r3, r3, r0
 800667e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006682:	bfac      	ite	ge
 8006684:	6563      	strge	r3, [r4, #84]	; 0x54
 8006686:	81a3      	strhlt	r3, [r4, #12]
 8006688:	bd10      	pop	{r4, pc}

0800668a <__swrite>:
 800668a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	461f      	mov	r7, r3
 8006690:	898b      	ldrh	r3, [r1, #12]
 8006692:	4605      	mov	r5, r0
 8006694:	05db      	lsls	r3, r3, #23
 8006696:	460c      	mov	r4, r1
 8006698:	4616      	mov	r6, r2
 800669a:	d505      	bpl.n	80066a8 <__swrite+0x1e>
 800669c:	2302      	movs	r3, #2
 800669e:	2200      	movs	r2, #0
 80066a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a4:	f000 f868 	bl	8006778 <_lseek_r>
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	4632      	mov	r2, r6
 80066ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b0:	81a3      	strh	r3, [r4, #12]
 80066b2:	4628      	mov	r0, r5
 80066b4:	463b      	mov	r3, r7
 80066b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066be:	f000 b817 	b.w	80066f0 <_write_r>

080066c2 <__sseek>:
 80066c2:	b510      	push	{r4, lr}
 80066c4:	460c      	mov	r4, r1
 80066c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ca:	f000 f855 	bl	8006778 <_lseek_r>
 80066ce:	1c43      	adds	r3, r0, #1
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	bf15      	itete	ne
 80066d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80066d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066de:	81a3      	strheq	r3, [r4, #12]
 80066e0:	bf18      	it	ne
 80066e2:	81a3      	strhne	r3, [r4, #12]
 80066e4:	bd10      	pop	{r4, pc}

080066e6 <__sclose>:
 80066e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ea:	f000 b813 	b.w	8006714 <_close_r>
	...

080066f0 <_write_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	4611      	mov	r1, r2
 80066f8:	2200      	movs	r2, #0
 80066fa:	4d05      	ldr	r5, [pc, #20]	; (8006710 <_write_r+0x20>)
 80066fc:	602a      	str	r2, [r5, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f7fb f912 	bl	8001928 <_write>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_write_r+0x1e>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_write_r+0x1e>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	200002e0 	.word	0x200002e0

08006714 <_close_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	2300      	movs	r3, #0
 8006718:	4d05      	ldr	r5, [pc, #20]	; (8006730 <_close_r+0x1c>)
 800671a:	4604      	mov	r4, r0
 800671c:	4608      	mov	r0, r1
 800671e:	602b      	str	r3, [r5, #0]
 8006720:	f7fb f91e 	bl	8001960 <_close>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_close_r+0x1a>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_close_r+0x1a>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	200002e0 	.word	0x200002e0

08006734 <_fstat_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	2300      	movs	r3, #0
 8006738:	4d06      	ldr	r5, [pc, #24]	; (8006754 <_fstat_r+0x20>)
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	f7fb f918 	bl	8001976 <_fstat>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d102      	bne.n	8006750 <_fstat_r+0x1c>
 800674a:	682b      	ldr	r3, [r5, #0]
 800674c:	b103      	cbz	r3, 8006750 <_fstat_r+0x1c>
 800674e:	6023      	str	r3, [r4, #0]
 8006750:	bd38      	pop	{r3, r4, r5, pc}
 8006752:	bf00      	nop
 8006754:	200002e0 	.word	0x200002e0

08006758 <_isatty_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	2300      	movs	r3, #0
 800675c:	4d05      	ldr	r5, [pc, #20]	; (8006774 <_isatty_r+0x1c>)
 800675e:	4604      	mov	r4, r0
 8006760:	4608      	mov	r0, r1
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	f7fb f916 	bl	8001994 <_isatty>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d102      	bne.n	8006772 <_isatty_r+0x1a>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	b103      	cbz	r3, 8006772 <_isatty_r+0x1a>
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	200002e0 	.word	0x200002e0

08006778 <_lseek_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	4611      	mov	r1, r2
 8006780:	2200      	movs	r2, #0
 8006782:	4d05      	ldr	r5, [pc, #20]	; (8006798 <_lseek_r+0x20>)
 8006784:	602a      	str	r2, [r5, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f7fb f90e 	bl	80019a8 <_lseek>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_lseek_r+0x1e>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b103      	cbz	r3, 8006796 <_lseek_r+0x1e>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	200002e0 	.word	0x200002e0

0800679c <_read_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4604      	mov	r4, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	4611      	mov	r1, r2
 80067a4:	2200      	movs	r2, #0
 80067a6:	4d05      	ldr	r5, [pc, #20]	; (80067bc <_read_r+0x20>)
 80067a8:	602a      	str	r2, [r5, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	f7fb f89f 	bl	80018ee <_read>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d102      	bne.n	80067ba <_read_r+0x1e>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	b103      	cbz	r3, 80067ba <_read_r+0x1e>
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	bd38      	pop	{r3, r4, r5, pc}
 80067bc:	200002e0 	.word	0x200002e0

080067c0 <_init>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr

080067cc <_fini>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr
