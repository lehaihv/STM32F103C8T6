
Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b44  08003b44  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003b44  08003b44  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b44  08003b44  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000014  08003b60  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08003b60  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c29e  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5b  00000000  00000000  0002c2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  0002ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d08  00000000  00000000  0002f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e87f  00000000  00000000  000475b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9e4  00000000  00000000  00055e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0813  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003718  00000000  00000000  000e0864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002da0 	.word	0x08002da0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002da0 	.word	0x08002da0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd5c 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f828 	bl	80001a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f92c 	bl	80003b4 <MX_GPIO_Init>
  MX_TIM3_Init();
 800015c:	f000 f8dc 	bl	8000318 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000160:	f000 f88c 	bl	800027c <MX_TIM2_Init>
  MX_I2C2_Init();
 8000164:	f000 f85c 	bl	8000220 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 8000168:	480b      	ldr	r0, [pc, #44]	; (8000198 <main+0x4c>)
 800016a:	f002 fa43 	bl	80025f4 <HAL_TIM_Base_Start_IT>

  //Oled display
  if (SSD1306_Init () == 0) {HAL_TIM_Base_Start_IT(&htim2);};
 800016e:	f000 f987 	bl	8000480 <SSD1306_Init>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d102      	bne.n	800017e <main+0x32>
 8000178:	4808      	ldr	r0, [pc, #32]	; (800019c <main+0x50>)
 800017a:	f002 fa3b 	bl	80025f4 <HAL_TIM_Base_Start_IT>
  SSD1306_GotoXY (8,0);
 800017e:	2100      	movs	r1, #0
 8000180:	2008      	movs	r0, #8
 8000182:	f000 fae5 	bl	8000750 <SSD1306_GotoXY>
  SSD1306_Puts ("Hello!", &Font_11x18, 1);
 8000186:	2201      	movs	r2, #1
 8000188:	4905      	ldr	r1, [pc, #20]	; (80001a0 <main+0x54>)
 800018a:	4806      	ldr	r0, [pc, #24]	; (80001a4 <main+0x58>)
 800018c:	f000 fb76 	bl	800087c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000190:	f000 fa3a 	bl	8000608 <SSD1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000194:	e7fe      	b.n	8000194 <main+0x48>
 8000196:	bf00      	nop
 8000198:	200000cc 	.word	0x200000cc
 800019c:	20000084 	.word	0x20000084
 80001a0:	20000000 	.word	0x20000000
 80001a4:	08002db8 	.word	0x08002db8

080001a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b090      	sub	sp, #64	; 0x40
 80001ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	2228      	movs	r2, #40	; 0x28
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f002 fdea 	bl	8002d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]
 80001c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ca:	2302      	movs	r3, #2
 80001cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ce:	2301      	movs	r3, #1
 80001d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d2:	2310      	movs	r3, #16
 80001d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d6:	2300      	movs	r3, #0
 80001d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	4618      	mov	r0, r3
 80001e0:	f001 fdb2 	bl	8001d48 <HAL_RCC_OscConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ea:	f000 f943 	bl	8000474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ee:	230f      	movs	r3, #15
 80001f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f820 	bl	800224c <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000212:	f000 f92f 	bl	8000474 <Error_Handler>
  }
}
 8000216:	bf00      	nop
 8000218:	3740      	adds	r7, #64	; 0x40
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <MX_I2C2_Init+0x50>)
 8000226:	4a13      	ldr	r2, [pc, #76]	; (8000274 <MX_I2C2_Init+0x54>)
 8000228:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <MX_I2C2_Init+0x50>)
 800022c:	4a12      	ldr	r2, [pc, #72]	; (8000278 <MX_I2C2_Init+0x58>)
 800022e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <MX_I2C2_Init+0x50>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <MX_I2C2_Init+0x50>)
 8000238:	2200      	movs	r2, #0
 800023a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <MX_I2C2_Init+0x50>)
 800023e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000242:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <MX_I2C2_Init+0x50>)
 8000246:	2200      	movs	r2, #0
 8000248:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <MX_I2C2_Init+0x50>)
 800024c:	2200      	movs	r2, #0
 800024e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <MX_I2C2_Init+0x50>)
 8000252:	2200      	movs	r2, #0
 8000254:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <MX_I2C2_Init+0x50>)
 8000258:	2200      	movs	r2, #0
 800025a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <MX_I2C2_Init+0x50>)
 800025e:	f000 fffb 	bl	8001258 <HAL_I2C_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000268:	f000 f904 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000030 	.word	0x20000030
 8000274:	40005800 	.word	0x40005800
 8000278:	00061a80 	.word	0x00061a80

0800027c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000282:	f107 0308 	add.w	r3, r7, #8
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000290:	463b      	mov	r3, r7
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <MX_TIM2_Init+0x98>)
 800029a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80002a0:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <MX_TIM2_Init+0x98>)
 80002a2:	f240 321f 	movw	r2, #799	; 0x31f
 80002a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <MX_TIM2_Init+0x98>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000-1;
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <MX_TIM2_Init+0x98>)
 80002b0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80002b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <MX_TIM2_Init+0x98>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <MX_TIM2_Init+0x98>)
 80002be:	2200      	movs	r2, #0
 80002c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002c2:	4814      	ldr	r0, [pc, #80]	; (8000314 <MX_TIM2_Init+0x98>)
 80002c4:	f002 f946 	bl	8002554 <HAL_TIM_Base_Init>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002ce:	f000 f8d1 	bl	8000474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002d8:	f107 0308 	add.w	r3, r7, #8
 80002dc:	4619      	mov	r1, r3
 80002de:	480d      	ldr	r0, [pc, #52]	; (8000314 <MX_TIM2_Init+0x98>)
 80002e0:	f002 fae2 	bl	80028a8 <HAL_TIM_ConfigClockSource>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80002ea:	f000 f8c3 	bl	8000474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ee:	2300      	movs	r3, #0
 80002f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002f6:	463b      	mov	r3, r7
 80002f8:	4619      	mov	r1, r3
 80002fa:	4806      	ldr	r0, [pc, #24]	; (8000314 <MX_TIM2_Init+0x98>)
 80002fc:	f002 fcb4 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000306:	f000 f8b5 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800030a:	bf00      	nop
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000084 	.word	0x20000084

08000318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000334:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <MX_TIM3_Init+0x94>)
 8000336:	4a1e      	ldr	r2, [pc, #120]	; (80003b0 <MX_TIM3_Init+0x98>)
 8000338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <MX_TIM3_Init+0x94>)
 800033c:	f240 321f 	movw	r2, #799	; 0x31f
 8000340:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <MX_TIM3_Init+0x94>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000348:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_TIM3_Init+0x94>)
 800034a:	f242 720f 	movw	r2, #9999	; 0x270f
 800034e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <MX_TIM3_Init+0x94>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <MX_TIM3_Init+0x94>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800035c:	4813      	ldr	r0, [pc, #76]	; (80003ac <MX_TIM3_Init+0x94>)
 800035e:	f002 f8f9 	bl	8002554 <HAL_TIM_Base_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000368:	f000 f884 	bl	8000474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000370:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	4619      	mov	r1, r3
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <MX_TIM3_Init+0x94>)
 800037a:	f002 fa95 	bl	80028a8 <HAL_TIM_ConfigClockSource>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000384:	f000 f876 	bl	8000474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000388:	2300      	movs	r3, #0
 800038a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	4619      	mov	r1, r3
 8000394:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_TIM3_Init+0x94>)
 8000396:	f002 fc67 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80003a0:	f000 f868 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003a4:	bf00      	nop
 80003a6:	3718      	adds	r7, #24
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	200000cc 	.word	0x200000cc
 80003b0:	40000400 	.word	0x40000400

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_GPIO_Init+0x78>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a17      	ldr	r2, [pc, #92]	; (800042c <MX_GPIO_Init+0x78>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_GPIO_Init+0x78>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_GPIO_Init+0x78>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <MX_GPIO_Init+0x78>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_GPIO_Init+0x78>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_10, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f240 4101 	movw	r1, #1025	; 0x401
 80003fe:	480c      	ldr	r0, [pc, #48]	; (8000430 <MX_GPIO_Init+0x7c>)
 8000400:	f000 fef8 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8000404:	f240 4301 	movw	r3, #1025	; 0x401
 8000408:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2302      	movs	r3, #2
 8000414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	4619      	mov	r1, r3
 800041c:	4804      	ldr	r0, [pc, #16]	; (8000430 <MX_GPIO_Init+0x7c>)
 800041e:	f000 fd65 	bl	8000eec <HAL_GPIO_Init>

}
 8000422:	bf00      	nop
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	40010800 	.word	0x40010800

08000434 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim3)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d105      	bne.n	8000450 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000448:	4808      	ldr	r0, [pc, #32]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800044a:	f000 feeb 	bl	8001224 <HAL_GPIO_TogglePin>
  }
  else if (htim == &htim2)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
  }
}
 800044e:	e007      	b.n	8000460 <HAL_TIM_PeriodElapsedCallback+0x2c>
  else if (htim == &htim2)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a07      	ldr	r2, [pc, #28]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d103      	bne.n	8000460 <HAL_TIM_PeriodElapsedCallback+0x2c>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000458:	2101      	movs	r1, #1
 800045a:	4804      	ldr	r0, [pc, #16]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800045c:	f000 fee2 	bl	8001224 <HAL_GPIO_TogglePin>
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	200000cc 	.word	0x200000cc
 800046c:	40010800 	.word	0x40010800
 8000470:	20000084 	.word	0x20000084

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	e7fe      	b.n	800047c <Error_Handler+0x8>
	...

08000480 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000486:	f000 fa1f 	bl	80008c8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, ssd1306_I2C_TIMEOUT) != HAL_OK) {
 800048a:	f242 7310 	movw	r3, #10000	; 0x2710
 800048e:	2201      	movs	r2, #1
 8000490:	213c      	movs	r1, #60	; 0x3c
 8000492:	485b      	ldr	r0, [pc, #364]	; (8000600 <SSD1306_Init+0x180>)
 8000494:	f001 f922 	bl	80016dc <HAL_I2C_IsDeviceReady>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	e0a9      	b.n	80005f6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80004a2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80004a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004a8:	e002      	b.n	80004b0 <SSD1306_Init+0x30>
		p--;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d1f9      	bne.n	80004aa <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80004b6:	22ae      	movs	r2, #174	; 0xae
 80004b8:	2100      	movs	r1, #0
 80004ba:	203c      	movs	r0, #60	; 0x3c
 80004bc:	f000 fa7e 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80004c0:	2220      	movs	r2, #32
 80004c2:	2100      	movs	r1, #0
 80004c4:	203c      	movs	r0, #60	; 0x3c
 80004c6:	f000 fa79 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80004ca:	2210      	movs	r2, #16
 80004cc:	2100      	movs	r1, #0
 80004ce:	203c      	movs	r0, #60	; 0x3c
 80004d0:	f000 fa74 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80004d4:	22b0      	movs	r2, #176	; 0xb0
 80004d6:	2100      	movs	r1, #0
 80004d8:	203c      	movs	r0, #60	; 0x3c
 80004da:	f000 fa6f 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80004de:	22c8      	movs	r2, #200	; 0xc8
 80004e0:	2100      	movs	r1, #0
 80004e2:	203c      	movs	r0, #60	; 0x3c
 80004e4:	f000 fa6a 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80004e8:	2200      	movs	r2, #0
 80004ea:	2100      	movs	r1, #0
 80004ec:	203c      	movs	r0, #60	; 0x3c
 80004ee:	f000 fa65 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80004f2:	2210      	movs	r2, #16
 80004f4:	2100      	movs	r1, #0
 80004f6:	203c      	movs	r0, #60	; 0x3c
 80004f8:	f000 fa60 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80004fc:	2240      	movs	r2, #64	; 0x40
 80004fe:	2100      	movs	r1, #0
 8000500:	203c      	movs	r0, #60	; 0x3c
 8000502:	f000 fa5b 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000506:	2281      	movs	r2, #129	; 0x81
 8000508:	2100      	movs	r1, #0
 800050a:	203c      	movs	r0, #60	; 0x3c
 800050c:	f000 fa56 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000510:	22ff      	movs	r2, #255	; 0xff
 8000512:	2100      	movs	r1, #0
 8000514:	203c      	movs	r0, #60	; 0x3c
 8000516:	f000 fa51 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800051a:	22a1      	movs	r2, #161	; 0xa1
 800051c:	2100      	movs	r1, #0
 800051e:	203c      	movs	r0, #60	; 0x3c
 8000520:	f000 fa4c 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000524:	22a6      	movs	r2, #166	; 0xa6
 8000526:	2100      	movs	r1, #0
 8000528:	203c      	movs	r0, #60	; 0x3c
 800052a:	f000 fa47 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800052e:	22a8      	movs	r2, #168	; 0xa8
 8000530:	2100      	movs	r1, #0
 8000532:	203c      	movs	r0, #60	; 0x3c
 8000534:	f000 fa42 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000538:	223f      	movs	r2, #63	; 0x3f
 800053a:	2100      	movs	r1, #0
 800053c:	203c      	movs	r0, #60	; 0x3c
 800053e:	f000 fa3d 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000542:	22a4      	movs	r2, #164	; 0xa4
 8000544:	2100      	movs	r1, #0
 8000546:	203c      	movs	r0, #60	; 0x3c
 8000548:	f000 fa38 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800054c:	22d3      	movs	r2, #211	; 0xd3
 800054e:	2100      	movs	r1, #0
 8000550:	203c      	movs	r0, #60	; 0x3c
 8000552:	f000 fa33 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	203c      	movs	r0, #60	; 0x3c
 800055c:	f000 fa2e 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000560:	22d5      	movs	r2, #213	; 0xd5
 8000562:	2100      	movs	r1, #0
 8000564:	203c      	movs	r0, #60	; 0x3c
 8000566:	f000 fa29 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800056a:	22f0      	movs	r2, #240	; 0xf0
 800056c:	2100      	movs	r1, #0
 800056e:	203c      	movs	r0, #60	; 0x3c
 8000570:	f000 fa24 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000574:	22d9      	movs	r2, #217	; 0xd9
 8000576:	2100      	movs	r1, #0
 8000578:	203c      	movs	r0, #60	; 0x3c
 800057a:	f000 fa1f 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800057e:	2222      	movs	r2, #34	; 0x22
 8000580:	2100      	movs	r1, #0
 8000582:	203c      	movs	r0, #60	; 0x3c
 8000584:	f000 fa1a 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000588:	22da      	movs	r2, #218	; 0xda
 800058a:	2100      	movs	r1, #0
 800058c:	203c      	movs	r0, #60	; 0x3c
 800058e:	f000 fa15 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000592:	2212      	movs	r2, #18
 8000594:	2100      	movs	r1, #0
 8000596:	203c      	movs	r0, #60	; 0x3c
 8000598:	f000 fa10 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800059c:	22db      	movs	r2, #219	; 0xdb
 800059e:	2100      	movs	r1, #0
 80005a0:	203c      	movs	r0, #60	; 0x3c
 80005a2:	f000 fa0b 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80005a6:	2220      	movs	r2, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	203c      	movs	r0, #60	; 0x3c
 80005ac:	f000 fa06 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80005b0:	228d      	movs	r2, #141	; 0x8d
 80005b2:	2100      	movs	r1, #0
 80005b4:	203c      	movs	r0, #60	; 0x3c
 80005b6:	f000 fa01 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80005ba:	2214      	movs	r2, #20
 80005bc:	2100      	movs	r1, #0
 80005be:	203c      	movs	r0, #60	; 0x3c
 80005c0:	f000 f9fc 	bl	80009bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80005c4:	22af      	movs	r2, #175	; 0xaf
 80005c6:	2100      	movs	r1, #0
 80005c8:	203c      	movs	r0, #60	; 0x3c
 80005ca:	f000 f9f7 	bl	80009bc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80005ce:	222e      	movs	r2, #46	; 0x2e
 80005d0:	2100      	movs	r1, #0
 80005d2:	203c      	movs	r0, #60	; 0x3c
 80005d4:	f000 f9f2 	bl	80009bc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 f843 	bl	8000664 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80005de:	f000 f813 	bl	8000608 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <SSD1306_Init+0x184>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <SSD1306_Init+0x184>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <SSD1306_Init+0x184>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80005f4:	2301      	movs	r3, #1
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000030 	.word	0x20000030
 8000604:	20000314 	.word	0x20000314

08000608 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]
 8000612:	e01d      	b.n	8000650 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	3b50      	subs	r3, #80	; 0x50
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	203c      	movs	r0, #60	; 0x3c
 8000620:	f000 f9cc 	bl	80009bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	203c      	movs	r0, #60	; 0x3c
 800062a:	f000 f9c7 	bl	80009bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800062e:	2210      	movs	r2, #16
 8000630:	2100      	movs	r1, #0
 8000632:	203c      	movs	r0, #60	; 0x3c
 8000634:	f000 f9c2 	bl	80009bc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	01db      	lsls	r3, r3, #7
 800063c:	4a08      	ldr	r2, [pc, #32]	; (8000660 <SSD1306_UpdateScreen+0x58>)
 800063e:	441a      	add	r2, r3
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	2140      	movs	r1, #64	; 0x40
 8000644:	203c      	movs	r0, #60	; 0x3c
 8000646:	f000 f953 	bl	80008f0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	3301      	adds	r3, #1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b07      	cmp	r3, #7
 8000654:	d9de      	bls.n	8000614 <SSD1306_UpdateScreen+0xc>
	}
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000114 	.word	0x20000114

08000664 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <SSD1306_Fill+0x14>
 8000674:	2300      	movs	r3, #0
 8000676:	e000      	b.n	800067a <SSD1306_Fill+0x16>
 8000678:	23ff      	movs	r3, #255	; 0xff
 800067a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067e:	4619      	mov	r1, r3
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <SSD1306_Fill+0x2c>)
 8000682:	f002 fb85 	bl	8002d90 <memset>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000114 	.word	0x20000114

08000694 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
 800069e:	460b      	mov	r3, r1
 80006a0:	80bb      	strh	r3, [r7, #4]
 80006a2:	4613      	mov	r3, r2
 80006a4:	70fb      	strb	r3, [r7, #3]
	if (
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	2b7f      	cmp	r3, #127	; 0x7f
 80006aa:	d848      	bhi.n	800073e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80006ac:	88bb      	ldrh	r3, [r7, #4]
 80006ae:	2b1f      	cmp	r3, #31
 80006b0:	d845      	bhi.n	800073e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SSD1306_DrawPixel+0xb4>)
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf0c      	ite	eq
 80006c0:	2301      	moveq	r3, #1
 80006c2:	2300      	movne	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d11a      	bne.n	8000704 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80006ce:	88fa      	ldrh	r2, [r7, #6]
 80006d0:	88bb      	ldrh	r3, [r7, #4]
 80006d2:	08db      	lsrs	r3, r3, #3
 80006d4:	b298      	uxth	r0, r3
 80006d6:	4603      	mov	r3, r0
 80006d8:	01db      	lsls	r3, r3, #7
 80006da:	4413      	add	r3, r2
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <SSD1306_DrawPixel+0xb8>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	88bb      	ldrh	r3, [r7, #4]
 80006e4:	f003 0307 	and.w	r3, r3, #7
 80006e8:	2101      	movs	r1, #1
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b259      	sxtb	r1, r3
 80006f4:	88fa      	ldrh	r2, [r7, #6]
 80006f6:	4603      	mov	r3, r0
 80006f8:	01db      	lsls	r3, r3, #7
 80006fa:	4413      	add	r3, r2
 80006fc:	b2c9      	uxtb	r1, r1
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <SSD1306_DrawPixel+0xb8>)
 8000700:	54d1      	strb	r1, [r2, r3]
 8000702:	e01d      	b.n	8000740 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000704:	88fa      	ldrh	r2, [r7, #6]
 8000706:	88bb      	ldrh	r3, [r7, #4]
 8000708:	08db      	lsrs	r3, r3, #3
 800070a:	b298      	uxth	r0, r3
 800070c:	4603      	mov	r3, r0
 800070e:	01db      	lsls	r3, r3, #7
 8000710:	4413      	add	r3, r2
 8000712:	4a0e      	ldr	r2, [pc, #56]	; (800074c <SSD1306_DrawPixel+0xb8>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	b25a      	sxtb	r2, r3
 8000718:	88bb      	ldrh	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	2101      	movs	r1, #1
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	b25b      	sxtb	r3, r3
 8000726:	43db      	mvns	r3, r3
 8000728:	b25b      	sxtb	r3, r3
 800072a:	4013      	ands	r3, r2
 800072c:	b259      	sxtb	r1, r3
 800072e:	88fa      	ldrh	r2, [r7, #6]
 8000730:	4603      	mov	r3, r0
 8000732:	01db      	lsls	r3, r3, #7
 8000734:	4413      	add	r3, r2
 8000736:	b2c9      	uxtb	r1, r1
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <SSD1306_DrawPixel+0xb8>)
 800073a:	54d1      	strb	r1, [r2, r3]
 800073c:	e000      	b.n	8000740 <SSD1306_DrawPixel+0xac>
		return;
 800073e:	bf00      	nop
	}
}
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000314 	.word	0x20000314
 800074c:	20000114 	.word	0x20000114

08000750 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	460a      	mov	r2, r1
 800075a:	80fb      	strh	r3, [r7, #6]
 800075c:	4613      	mov	r3, r2
 800075e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SSD1306_GotoXY+0x28>)
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <SSD1306_GotoXY+0x28>)
 8000768:	88bb      	ldrh	r3, [r7, #4]
 800076a:	8053      	strh	r3, [r2, #2]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000314 	.word	0x20000314

0800077c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	4613      	mov	r3, r2
 800078a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800078c:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <SSD1306_Putc+0xfc>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
	if (
 8000798:	2b7f      	cmp	r3, #127	; 0x7f
 800079a:	dc07      	bgt.n	80007ac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800079c:	4b36      	ldr	r3, [pc, #216]	; (8000878 <SSD1306_Putc+0xfc>)
 800079e:	885b      	ldrh	r3, [r3, #2]
 80007a0:	461a      	mov	r2, r3
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	dd01      	ble.n	80007b0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e05e      	b.n	800086e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	e04b      	b.n	800084e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	3b20      	subs	r3, #32
 80007be:	6839      	ldr	r1, [r7, #0]
 80007c0:	7849      	ldrb	r1, [r1, #1]
 80007c2:	fb01 f303 	mul.w	r3, r1, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	e030      	b.n	800083c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d010      	beq.n	800080c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <SSD1306_Putc+0xfc>)
 80007ec:	881a      	ldrh	r2, [r3, #0]
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	4413      	add	r3, r2
 80007f4:	b298      	uxth	r0, r3
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <SSD1306_Putc+0xfc>)
 80007f8:	885a      	ldrh	r2, [r3, #2]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	4413      	add	r3, r2
 8000800:	b29b      	uxth	r3, r3
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	4619      	mov	r1, r3
 8000806:	f7ff ff45 	bl	8000694 <SSD1306_DrawPixel>
 800080a:	e014      	b.n	8000836 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <SSD1306_Putc+0xfc>)
 800080e:	881a      	ldrh	r2, [r3, #0]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	b29b      	uxth	r3, r3
 8000814:	4413      	add	r3, r2
 8000816:	b298      	uxth	r0, r3
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <SSD1306_Putc+0xfc>)
 800081a:	885a      	ldrh	r2, [r3, #2]
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	b29b      	uxth	r3, r3
 8000820:	4413      	add	r3, r2
 8000822:	b299      	uxth	r1, r3
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	2b00      	cmp	r3, #0
 8000828:	bf0c      	ite	eq
 800082a:	2301      	moveq	r3, #1
 800082c:	2300      	movne	r3, #0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	f7ff ff2f 	bl	8000694 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	3301      	adds	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	4293      	cmp	r3, r2
 8000846:	d3c8      	bcc.n	80007da <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	3301      	adds	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	785b      	ldrb	r3, [r3, #1]
 8000852:	461a      	mov	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	4293      	cmp	r3, r2
 8000858:	d3ad      	bcc.n	80007b6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <SSD1306_Putc+0xfc>)
 800085c:	881a      	ldrh	r2, [r3, #0]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b29b      	uxth	r3, r3
 8000864:	4413      	add	r3, r2
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <SSD1306_Putc+0xfc>)
 800086a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800086c:	79fb      	ldrb	r3, [r7, #7]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000314 	.word	0x20000314

0800087c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	4613      	mov	r3, r2
 8000888:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800088a:	e012      	b.n	80008b2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	68b9      	ldr	r1, [r7, #8]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff71 	bl	800077c <SSD1306_Putc>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d002      	beq.n	80008ac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	e008      	b.n	80008be <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1e8      	bne.n	800088c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	781b      	ldrb	r3, [r3, #0]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <ssd1306_I2C_Init+0x24>)
 80008d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008d2:	e002      	b.n	80008da <ssd1306_I2C_Init+0x12>
		p--;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1f9      	bne.n	80008d4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	0003d090 	.word	0x0003d090

080008f0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b0c7      	sub	sp, #284	; 0x11c
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	4604      	mov	r4, r0
 80008f8:	4608      	mov	r0, r1
 80008fa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80008fe:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000902:	600a      	str	r2, [r1, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800090a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800090e:	4622      	mov	r2, r4
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000916:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800091a:	4602      	mov	r2, r0
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000926:	460a      	mov	r2, r1
 8000928:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 800092a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800092e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000932:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000936:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 800093e:	2300      	movs	r3, #0
 8000940:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000944:	e015      	b.n	8000972 <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8000946:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800094a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800094e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	441a      	add	r2, r3
 8000956:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800095a:	3301      	adds	r3, #1
 800095c:	7811      	ldrb	r1, [r2, #0]
 800095e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000962:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000966:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000968:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800096c:	3301      	adds	r3, #1
 800096e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000972:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000976:	b29b      	uxth	r3, r3
 8000978:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800097c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000980:	8812      	ldrh	r2, [r2, #0]
 8000982:	429a      	cmp	r2, r3
 8000984:	d8df      	bhi.n	8000946 <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8000986:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b299      	uxth	r1, r3
 8000992:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000996:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	b29b      	uxth	r3, r3
 80009a0:	f107 020c 	add.w	r2, r7, #12
 80009a4:	200a      	movs	r0, #10
 80009a6:	9000      	str	r0, [sp, #0]
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <ssd1306_I2C_WriteMulti+0xc8>)
 80009aa:	f000 fd99 	bl	80014e0 <HAL_I2C_Master_Transmit>
}
 80009ae:	bf00      	nop
 80009b0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	20000030 	.word	0x20000030

080009bc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
 80009c6:	460b      	mov	r3, r1
 80009c8:	71bb      	strb	r3, [r7, #6]
 80009ca:	4613      	mov	r3, r2
 80009cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80009d2:	797b      	ldrb	r3, [r7, #5]
 80009d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	b299      	uxth	r1, r3
 80009da:	f107 020c 	add.w	r2, r7, #12
 80009de:	230a      	movs	r3, #10
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2302      	movs	r3, #2
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <ssd1306_I2C_Write+0x38>)
 80009e6:	f000 fd7b 	bl	80014e0 <HAL_I2C_Master_Transmit>
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000030 	.word	0x20000030

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_MspInit+0x40>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <HAL_MspInit+0x40>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6193      	str	r3, [r2, #24]
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x40>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x40>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_MspInit+0x40>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_MspInit+0x40>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <HAL_I2C_MspInit+0x74>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d124      	bne.n	8000aa6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_I2C_MspInit+0x78>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <HAL_I2C_MspInit+0x78>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_I2C_MspInit+0x78>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7a:	2312      	movs	r3, #18
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4619      	mov	r1, r3
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <HAL_I2C_MspInit+0x7c>)
 8000a8a:	f000 fa2f 	bl	8000eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_I2C_MspInit+0x78>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_I2C_MspInit+0x78>)
 8000a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_I2C_MspInit+0x78>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40005800 	.word	0x40005800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010c00 	.word	0x40010c00

08000abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000acc:	d114      	bne.n	8000af8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_TIM_Base_MspInit+0x78>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <HAL_TIM_Base_MspInit+0x78>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_TIM_Base_MspInit+0x78>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	201c      	movs	r0, #28
 8000aec:	f000 f9c7 	bl	8000e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000af0:	201c      	movs	r0, #28
 8000af2:	f000 f9e0 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000af6:	e018      	b.n	8000b2a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_TIM_Base_MspInit+0x7c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d113      	bne.n	8000b2a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_TIM_Base_MspInit+0x78>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <HAL_TIM_Base_MspInit+0x78>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	61d3      	str	r3, [r2, #28]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_TIM_Base_MspInit+0x78>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	201d      	movs	r0, #29
 8000b20:	f000 f9ad 	bl	8000e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b24:	201d      	movs	r0, #29
 8000b26:	f000 f9c6 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40000400 	.word	0x40000400

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b82:	f000 f889 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <TIM2_IRQHandler+0x10>)
 8000b92:	f001 fd81 	bl	8002698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000084 	.word	0x20000084

08000ba0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <TIM3_IRQHandler+0x10>)
 8000ba6:	f001 fd77 	bl	8002698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000cc 	.word	0x200000cc

08000bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <Reset_Handler>:
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LoopFillZerobss+0x12>)
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <LoopFillZerobss+0x1a>)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:
 8000bca:	58d4      	ldr	r4, [r2, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:
 8000bd0:	18c4      	adds	r4, r0, r3
 8000bd2:	428c      	cmp	r4, r1
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopFillZerobss+0x1e>)
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	; (8000c04 <LoopFillZerobss+0x22>)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:
 8000be2:	42a2      	cmp	r2, r4
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>
 8000be6:	f7ff ffe5 	bl	8000bb4 <SystemInit>
 8000bea:	f002 f8ad 	bl	8002d48 <__libc_init_array>
 8000bee:	f7ff faad 	bl	800014c <main>
 8000bf2:	4770      	bx	lr
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000014 	.word	0x20000014
 8000bfc:	08003b4c 	.word	0x08003b4c
 8000c00:	20000014 	.word	0x20000014
 8000c04:	20000320 	.word	0x20000320

08000c08 <ADC1_2_IRQHandler>:
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x28>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x28>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f923 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	200f      	movs	r0, #15
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fee6 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40022000 	.word	0x40022000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f93b 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f903 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000010 	.word	0x20000010
 8000c94:	2000000c 	.word	0x2000000c

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x20>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <HAL_IncTick+0x20>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000010 	.word	0x20000010
 8000cb8:	2000031c 	.word	0x2000031c

08000cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <HAL_GetTick+0x10>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	2000031c 	.word	0x2000031c

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4906      	ldr	r1, [pc, #24]	; (8000d68 <__NVIC_EnableIRQ+0x34>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff90 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff2d 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff42 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff90 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5f 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff35 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b08b      	sub	sp, #44	; 0x2c
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efe:	e169      	b.n	80011d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f00:	2201      	movs	r2, #1
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8158 	bne.w	80011ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4a9a      	ldr	r2, [pc, #616]	; (800118c <HAL_GPIO_Init+0x2a0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d05e      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f28:	4a98      	ldr	r2, [pc, #608]	; (800118c <HAL_GPIO_Init+0x2a0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d875      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f2e:	4a98      	ldr	r2, [pc, #608]	; (8001190 <HAL_GPIO_Init+0x2a4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d058      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f34:	4a96      	ldr	r2, [pc, #600]	; (8001190 <HAL_GPIO_Init+0x2a4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d86f      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f3a:	4a96      	ldr	r2, [pc, #600]	; (8001194 <HAL_GPIO_Init+0x2a8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d052      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f40:	4a94      	ldr	r2, [pc, #592]	; (8001194 <HAL_GPIO_Init+0x2a8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d869      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f46:	4a94      	ldr	r2, [pc, #592]	; (8001198 <HAL_GPIO_Init+0x2ac>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d04c      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f4c:	4a92      	ldr	r2, [pc, #584]	; (8001198 <HAL_GPIO_Init+0x2ac>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d863      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f52:	4a92      	ldr	r2, [pc, #584]	; (800119c <HAL_GPIO_Init+0x2b0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d046      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f58:	4a90      	ldr	r2, [pc, #576]	; (800119c <HAL_GPIO_Init+0x2b0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d85d      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f5e:	2b12      	cmp	r3, #18
 8000f60:	d82a      	bhi.n	8000fb8 <HAL_GPIO_Init+0xcc>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d859      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f66:	a201      	add	r2, pc, #4	; (adr r2, 8000f6c <HAL_GPIO_Init+0x80>)
 8000f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6c:	08000fe7 	.word	0x08000fe7
 8000f70:	08000fc1 	.word	0x08000fc1
 8000f74:	08000fd3 	.word	0x08000fd3
 8000f78:	08001015 	.word	0x08001015
 8000f7c:	0800101b 	.word	0x0800101b
 8000f80:	0800101b 	.word	0x0800101b
 8000f84:	0800101b 	.word	0x0800101b
 8000f88:	0800101b 	.word	0x0800101b
 8000f8c:	0800101b 	.word	0x0800101b
 8000f90:	0800101b 	.word	0x0800101b
 8000f94:	0800101b 	.word	0x0800101b
 8000f98:	0800101b 	.word	0x0800101b
 8000f9c:	0800101b 	.word	0x0800101b
 8000fa0:	0800101b 	.word	0x0800101b
 8000fa4:	0800101b 	.word	0x0800101b
 8000fa8:	0800101b 	.word	0x0800101b
 8000fac:	0800101b 	.word	0x0800101b
 8000fb0:	08000fc9 	.word	0x08000fc9
 8000fb4:	08000fdd 	.word	0x08000fdd
 8000fb8:	4a79      	ldr	r2, [pc, #484]	; (80011a0 <HAL_GPIO_Init+0x2b4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fbe:	e02c      	b.n	800101a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e029      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e024      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e01f      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	330c      	adds	r3, #12
 8000fe2:	623b      	str	r3, [r7, #32]
          break;
 8000fe4:	e01a      	b.n	800101c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e013      	b.n	800101c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	611a      	str	r2, [r3, #16]
          break;
 8001006:	e009      	b.n	800101c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001008:	2308      	movs	r3, #8
 800100a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	615a      	str	r2, [r3, #20]
          break;
 8001012:	e003      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x130>
          break;
 800101a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2bff      	cmp	r3, #255	; 0xff
 8001020:	d801      	bhi.n	8001026 <HAL_GPIO_Init+0x13a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	e001      	b.n	800102a <HAL_GPIO_Init+0x13e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3304      	adds	r3, #4
 800102a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	2bff      	cmp	r3, #255	; 0xff
 8001030:	d802      	bhi.n	8001038 <HAL_GPIO_Init+0x14c>
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x152>
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	3b08      	subs	r3, #8
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	210f      	movs	r1, #15
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	401a      	ands	r2, r3
 8001050:	6a39      	ldr	r1, [r7, #32]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	431a      	orrs	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80b1 	beq.w	80011ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800106c:	4b4d      	ldr	r3, [pc, #308]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a4c      	ldr	r2, [pc, #304]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b4a      	ldr	r3, [pc, #296]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001084:	4a48      	ldr	r2, [pc, #288]	; (80011a8 <HAL_GPIO_Init+0x2bc>)
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a40      	ldr	r2, [pc, #256]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d013      	beq.n	80010d8 <HAL_GPIO_Init+0x1ec>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a3f      	ldr	r2, [pc, #252]	; (80011b0 <HAL_GPIO_Init+0x2c4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d00d      	beq.n	80010d4 <HAL_GPIO_Init+0x1e8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a3e      	ldr	r2, [pc, #248]	; (80011b4 <HAL_GPIO_Init+0x2c8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d007      	beq.n	80010d0 <HAL_GPIO_Init+0x1e4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a3d      	ldr	r2, [pc, #244]	; (80011b8 <HAL_GPIO_Init+0x2cc>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d101      	bne.n	80010cc <HAL_GPIO_Init+0x1e0>
 80010c8:	2303      	movs	r3, #3
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010cc:	2304      	movs	r3, #4
 80010ce:	e004      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010d8:	2300      	movs	r3, #0
 80010da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ea:	492f      	ldr	r1, [pc, #188]	; (80011a8 <HAL_GPIO_Init+0x2bc>)
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	492c      	ldr	r1, [pc, #176]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	600b      	str	r3, [r1, #0]
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	43db      	mvns	r3, r3
 800111a:	4928      	ldr	r1, [pc, #160]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800111c:	4013      	ands	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4922      	ldr	r1, [pc, #136]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	43db      	mvns	r3, r3
 8001142:	491e      	ldr	r1, [pc, #120]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001144:	4013      	ands	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	4918      	ldr	r1, [pc, #96]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	608b      	str	r3, [r1, #8]
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	43db      	mvns	r3, r3
 800116a:	4914      	ldr	r1, [pc, #80]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800116c:	4013      	ands	r3, r2
 800116e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d021      	beq.n	80011c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	490e      	ldr	r1, [pc, #56]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	60cb      	str	r3, [r1, #12]
 8001188:	e021      	b.n	80011ce <HAL_GPIO_Init+0x2e2>
 800118a:	bf00      	nop
 800118c:	10320000 	.word	0x10320000
 8001190:	10310000 	.word	0x10310000
 8001194:	10220000 	.word	0x10220000
 8001198:	10210000 	.word	0x10210000
 800119c:	10120000 	.word	0x10120000
 80011a0:	10110000 	.word	0x10110000
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40011000 	.word	0x40011000
 80011b8:	40011400 	.word	0x40011400
 80011bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_GPIO_Init+0x304>)
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	4909      	ldr	r1, [pc, #36]	; (80011f0 <HAL_GPIO_Init+0x304>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	3301      	adds	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	fa22 f303 	lsr.w	r3, r2, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f47f ae8e 	bne.w	8000f00 <HAL_GPIO_Init+0x14>
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	372c      	adds	r7, #44	; 0x2c
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40010400 	.word	0x40010400

080011f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
 8001200:	4613      	mov	r3, r2
 8001202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001210:	e003      	b.n	800121a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	041a      	lsls	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	611a      	str	r2, [r3, #16]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4013      	ands	r3, r2
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43d9      	mvns	r1, r3
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	400b      	ands	r3, r1
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	611a      	str	r2, [r3, #16]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
	...

08001258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e12b      	b.n	80014c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d106      	bne.n	8001284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fbdc 	bl	8000a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2224      	movs	r2, #36	; 0x24
 8001288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012bc:	f001 f918 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 80012c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4a81      	ldr	r2, [pc, #516]	; (80014cc <HAL_I2C_Init+0x274>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d807      	bhi.n	80012dc <HAL_I2C_Init+0x84>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4a80      	ldr	r2, [pc, #512]	; (80014d0 <HAL_I2C_Init+0x278>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	bf94      	ite	ls
 80012d4:	2301      	movls	r3, #1
 80012d6:	2300      	movhi	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	e006      	b.n	80012ea <HAL_I2C_Init+0x92>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4a7d      	ldr	r2, [pc, #500]	; (80014d4 <HAL_I2C_Init+0x27c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	bf94      	ite	ls
 80012e4:	2301      	movls	r3, #1
 80012e6:	2300      	movhi	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0e7      	b.n	80014c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4a78      	ldr	r2, [pc, #480]	; (80014d8 <HAL_I2C_Init+0x280>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0c9b      	lsrs	r3, r3, #18
 80012fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	430a      	orrs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a6a      	ldr	r2, [pc, #424]	; (80014cc <HAL_I2C_Init+0x274>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d802      	bhi.n	800132c <HAL_I2C_Init+0xd4>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3301      	adds	r3, #1
 800132a:	e009      	b.n	8001340 <HAL_I2C_Init+0xe8>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	4a69      	ldr	r2, [pc, #420]	; (80014dc <HAL_I2C_Init+0x284>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	099b      	lsrs	r3, r3, #6
 800133e:	3301      	adds	r3, #1
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	430b      	orrs	r3, r1
 8001346:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001352:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	495c      	ldr	r1, [pc, #368]	; (80014cc <HAL_I2C_Init+0x274>)
 800135c:	428b      	cmp	r3, r1
 800135e:	d819      	bhi.n	8001394 <HAL_I2C_Init+0x13c>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1e59      	subs	r1, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fbb1 f3f3 	udiv	r3, r1, r3
 800136e:	1c59      	adds	r1, r3, #1
 8001370:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001374:	400b      	ands	r3, r1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <HAL_I2C_Init+0x138>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1e59      	subs	r1, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fbb1 f3f3 	udiv	r3, r1, r3
 8001388:	3301      	adds	r3, #1
 800138a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138e:	e051      	b.n	8001434 <HAL_I2C_Init+0x1dc>
 8001390:	2304      	movs	r3, #4
 8001392:	e04f      	b.n	8001434 <HAL_I2C_Init+0x1dc>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d111      	bne.n	80013c0 <HAL_I2C_Init+0x168>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1e58      	subs	r0, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6859      	ldr	r1, [r3, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	440b      	add	r3, r1
 80013aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ae:	3301      	adds	r3, #1
 80013b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	e012      	b.n	80013e6 <HAL_I2C_Init+0x18e>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1e58      	subs	r0, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6859      	ldr	r1, [r3, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	0099      	lsls	r1, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_I2C_Init+0x196>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e022      	b.n	8001434 <HAL_I2C_Init+0x1dc>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10e      	bne.n	8001414 <HAL_I2C_Init+0x1bc>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1e58      	subs	r0, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6859      	ldr	r1, [r3, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	440b      	add	r3, r1
 8001404:	fbb0 f3f3 	udiv	r3, r0, r3
 8001408:	3301      	adds	r3, #1
 800140a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001412:	e00f      	b.n	8001434 <HAL_I2C_Init+0x1dc>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1e58      	subs	r0, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	0099      	lsls	r1, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	fbb0 f3f3 	udiv	r3, r0, r3
 800142a:	3301      	adds	r3, #1
 800142c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	6809      	ldr	r1, [r1, #0]
 8001438:	4313      	orrs	r3, r2
 800143a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69da      	ldr	r2, [r3, #28]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6911      	ldr	r1, [r2, #16]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68d2      	ldr	r2, [r2, #12]
 800146e:	4311      	orrs	r1, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	430b      	orrs	r3, r1
 8001476:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2220      	movs	r2, #32
 80014ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	000186a0 	.word	0x000186a0
 80014d0:	001e847f 	.word	0x001e847f
 80014d4:	003d08ff 	.word	0x003d08ff
 80014d8:	431bde83 	.word	0x431bde83
 80014dc:	10624dd3 	.word	0x10624dd3

080014e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	461a      	mov	r2, r3
 80014ec:	460b      	mov	r3, r1
 80014ee:	817b      	strh	r3, [r7, #10]
 80014f0:	4613      	mov	r3, r2
 80014f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff fbe2 	bl	8000cbc <HAL_GetTick>
 80014f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b20      	cmp	r3, #32
 8001504:	f040 80e0 	bne.w	80016c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2319      	movs	r3, #25
 800150e:	2201      	movs	r2, #1
 8001510:	4970      	ldr	r1, [pc, #448]	; (80016d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 fa92 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800151e:	2302      	movs	r3, #2
 8001520:	e0d3      	b.n	80016ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_I2C_Master_Transmit+0x50>
 800152c:	2302      	movs	r3, #2
 800152e:	e0cc      	b.n	80016ca <HAL_I2C_Master_Transmit+0x1ea>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b01      	cmp	r3, #1
 8001544:	d007      	beq.n	8001556 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 0201 	orr.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001564:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2221      	movs	r2, #33	; 0x21
 800156a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2210      	movs	r2, #16
 8001572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	893a      	ldrh	r2, [r7, #8]
 8001586:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a50      	ldr	r2, [pc, #320]	; (80016d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001598:	8979      	ldrh	r1, [r7, #10]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	6a3a      	ldr	r2, [r7, #32]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 f9ca 	bl	8001938 <I2C_MasterRequestWrite>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e08d      	b.n	80016ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015c4:	e066      	b.n	8001694 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	6a39      	ldr	r1, [r7, #32]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 fb0c 	bl	8001be8 <I2C_WaitOnTXEFlagUntilTimeout>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00d      	beq.n	80015f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d107      	bne.n	80015ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06b      	b.n	80016ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160c:	b29b      	uxth	r3, r3
 800160e:	3b01      	subs	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	3b01      	subs	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b04      	cmp	r3, #4
 800162e:	d11b      	bne.n	8001668 <HAL_I2C_Master_Transmit+0x188>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001634:	2b00      	cmp	r3, #0
 8001636:	d017      	beq.n	8001668 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001652:	b29b      	uxth	r3, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001660:	3b01      	subs	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	6a39      	ldr	r1, [r7, #32]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fafc 	bl	8001c6a <I2C_WaitOnBTFFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00d      	beq.n	8001694 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	2b04      	cmp	r3, #4
 800167e:	d107      	bne.n	8001690 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e01a      	b.n	80016ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d194      	bne.n	80015c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2220      	movs	r2, #32
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e000      	b.n	80016ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016c8:	2302      	movs	r3, #2
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	00100002 	.word	0x00100002
 80016d8:	ffff0000 	.word	0xffff0000

080016dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	460b      	mov	r3, r1
 80016ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff fae6 	bl	8000cbc <HAL_GetTick>
 80016f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b20      	cmp	r3, #32
 8001700:	f040 8111 	bne.w	8001926 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2319      	movs	r3, #25
 800170a:	2201      	movs	r2, #1
 800170c:	4988      	ldr	r1, [pc, #544]	; (8001930 <HAL_I2C_IsDeviceReady+0x254>)
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f994 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800171a:	2302      	movs	r3, #2
 800171c:	e104      	b.n	8001928 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_I2C_IsDeviceReady+0x50>
 8001728:	2302      	movs	r3, #2
 800172a:	e0fd      	b.n	8001928 <HAL_I2C_IsDeviceReady+0x24c>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b01      	cmp	r3, #1
 8001740:	d007      	beq.n	8001752 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0201 	orr.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001760:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2224      	movs	r2, #36	; 0x24
 8001766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a70      	ldr	r2, [pc, #448]	; (8001934 <HAL_I2C_IsDeviceReady+0x258>)
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001784:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2200      	movs	r2, #0
 800178e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f952 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00d      	beq.n	80017ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ac:	d103      	bne.n	80017b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0b6      	b.n	8001928 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017ba:	897b      	ldrh	r3, [r7, #10]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa77 	bl	8000cbc <HAL_GetTick>
 80017ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	bf0c      	ite	eq
 80017de:	2301      	moveq	r3, #1
 80017e0:	2300      	movne	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f4:	bf0c      	ite	eq
 80017f6:	2301      	moveq	r3, #1
 80017f8:	2300      	movne	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80017fe:	e025      	b.n	800184c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001800:	f7ff fa5c 	bl	8000cbc <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d302      	bcc.n	8001816 <HAL_I2C_IsDeviceReady+0x13a>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d103      	bne.n	800181e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	22a0      	movs	r2, #160	; 0xa0
 800181a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b02      	cmp	r3, #2
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2ba0      	cmp	r3, #160	; 0xa0
 8001856:	d005      	beq.n	8001864 <HAL_I2C_IsDeviceReady+0x188>
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_I2C_IsDeviceReady+0x188>
 800185e:	7dbb      	ldrb	r3, [r7, #22]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0cd      	beq.n	8001800 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2220      	movs	r2, #32
 8001868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b02      	cmp	r3, #2
 8001878:	d129      	bne.n	80018ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001888:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2319      	movs	r3, #25
 80018a6:	2201      	movs	r2, #1
 80018a8:	4921      	ldr	r1, [pc, #132]	; (8001930 <HAL_I2C_IsDeviceReady+0x254>)
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f8c6 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e036      	b.n	8001928 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e02c      	b.n	8001928 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2319      	movs	r3, #25
 80018ee:	2201      	movs	r2, #1
 80018f0:	490f      	ldr	r1, [pc, #60]	; (8001930 <HAL_I2C_IsDeviceReady+0x254>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f8a2 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e012      	b.n	8001928 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	3301      	adds	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	f4ff af32 	bcc.w	8001776 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001926:	2302      	movs	r3, #2
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	00100002 	.word	0x00100002
 8001934:	ffff0000 	.word	0xffff0000

08001938 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af02      	add	r7, sp, #8
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	460b      	mov	r3, r1
 8001946:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b08      	cmp	r3, #8
 8001952:	d006      	beq.n	8001962 <I2C_MasterRequestWrite+0x2a>
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d003      	beq.n	8001962 <I2C_MasterRequestWrite+0x2a>
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001960:	d108      	bne.n	8001974 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e00b      	b.n	800198c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	2b12      	cmp	r3, #18
 800197a:	d107      	bne.n	800198c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f84f 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00d      	beq.n	80019c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b2:	d103      	bne.n	80019bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e035      	b.n	8001a2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019c8:	d108      	bne.n	80019dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	e01b      	b.n	8001a14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	11db      	asrs	r3, r3, #7
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f003 0306 	and.w	r3, r3, #6
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f063 030f 	orn	r3, r3, #15
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	490e      	ldr	r1, [pc, #56]	; (8001a34 <I2C_MasterRequestWrite+0xfc>)
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f875 	bl	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e010      	b.n	8001a2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a0a:	897b      	ldrh	r3, [r7, #10]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4907      	ldr	r1, [pc, #28]	; (8001a38 <I2C_MasterRequestWrite+0x100>)
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f865 	bl	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	00010008 	.word	0x00010008
 8001a38:	00010002 	.word	0x00010002

08001a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a4c:	e025      	b.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d021      	beq.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a56:	f7ff f931 	bl	8000cbc <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d302      	bcc.n	8001a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d116      	bne.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2220      	movs	r2, #32
 8001a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f043 0220 	orr.w	r2, r3, #32
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e023      	b.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d10d      	bne.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	e00c      	b.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4013      	ands	r3, r2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d0b6      	beq.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001af8:	e051      	b.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b08:	d123      	bne.n	8001b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f043 0204 	orr.w	r2, r3, #4
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e046      	b.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d021      	beq.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7ff f8af 	bl	8000cbc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d116      	bne.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f043 0220 	orr.w	r2, r3, #32
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e020      	b.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d10c      	bne.n	8001bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	e00b      	b.n	8001bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	43da      	mvns	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d18d      	bne.n	8001afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bf4:	e02d      	b.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f878 	bl	8001cec <I2C_IsAcknowledgeFailed>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e02d      	b.n	8001c62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d021      	beq.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0e:	f7ff f855 	bl	8000cbc <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d302      	bcc.n	8001c24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d116      	bne.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f043 0220 	orr.w	r2, r3, #32
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e007      	b.n	8001c62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b80      	cmp	r3, #128	; 0x80
 8001c5e:	d1ca      	bne.n	8001bf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c76:	e02d      	b.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f837 	bl	8001cec <I2C_IsAcknowledgeFailed>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e02d      	b.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d021      	beq.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c90:	f7ff f814 	bl	8000cbc <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d302      	bcc.n	8001ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d116      	bne.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e007      	b.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d1ca      	bne.n	8001c78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d02:	d11b      	bne.n	8001d3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0204 	orr.w	r2, r3, #4
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e272      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d00c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d74:	4b8f      	ldr	r3, [pc, #572]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d112      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
 8001d80:	4b8c      	ldr	r3, [pc, #560]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	4b89      	ldr	r3, [pc, #548]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d06c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x12c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d168      	bne.n	8001e74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e24c      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x76>
 8001db0:	4b80      	ldr	r3, [pc, #512]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a7f      	ldr	r2, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e02e      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x98>
 8001dc6:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7a      	ldr	r2, [pc, #488]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b78      	ldr	r3, [pc, #480]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a77      	ldr	r2, [pc, #476]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0xbc>
 8001dea:	4b72      	ldr	r3, [pc, #456]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a71      	ldr	r2, [pc, #452]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6e      	ldr	r2, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001e04:	4b6b      	ldr	r3, [pc, #428]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b68      	ldr	r3, [pc, #416]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a67      	ldr	r2, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7fe ff4a 	bl	8000cbc <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7fe ff46 	bl	8000cbc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e200      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe4>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ff36 	bl	8000cbc <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7fe ff32 	bl	8000cbc <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1ec      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x10c>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e82:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e8e:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d11c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d116      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e1c0      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4939      	ldr	r1, [pc, #228]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	e03a      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7fe feeb 	bl	8000cbc <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7fe fee7 	bl	8000cbc <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1a1      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4927      	ldr	r1, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe feca 	bl	8000cbc <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2c:	f7fe fec6 	bl	8000cbc <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e180      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03a      	beq.n	8001fcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f64:	f7fe feaa 	bl	8000cbc <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7fe fea6 	bl	8000cbc <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e160      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 fac4 	bl	8002518 <RCC_Delay>
 8001f90:	e01c      	b.n	8001fcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7fe fe90 	bl	8000cbc <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9e:	e00f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7fe fe8c 	bl	8000cbc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e146      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	42420000 	.word	0x42420000
 8001fbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	4b92      	ldr	r3, [pc, #584]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e9      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a6 	beq.w	8002126 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b8b      	ldr	r3, [pc, #556]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a87      	ldr	r2, [pc, #540]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b85      	ldr	r3, [pc, #532]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	4b82      	ldr	r3, [pc, #520]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002012:	4b7f      	ldr	r3, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7e      	ldr	r2, [pc, #504]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7fe fe4d 	bl	8000cbc <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7fe fe49 	bl	8000cbc <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	; 0x64
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e103      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b75      	ldr	r3, [pc, #468]	; (8002210 <HAL_RCC_OscConfig+0x4c8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x312>
 800204c:	4b6f      	ldr	r3, [pc, #444]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a6e      	ldr	r2, [pc, #440]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e02d      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x334>
 8002062:	4b6a      	ldr	r3, [pc, #424]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a69      	ldr	r2, [pc, #420]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a66      	ldr	r2, [pc, #408]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	e01c      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x356>
 8002084:	4b61      	ldr	r3, [pc, #388]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a60      	ldr	r2, [pc, #384]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	4b5e      	ldr	r3, [pc, #376]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a5d      	ldr	r2, [pc, #372]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800209e:	4b5b      	ldr	r3, [pc, #364]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a5a      	ldr	r2, [pc, #360]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b58      	ldr	r3, [pc, #352]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a57      	ldr	r2, [pc, #348]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7fe fdfd 	bl	8000cbc <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe fdf9 	bl	8000cbc <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0b1      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b4b      	ldr	r3, [pc, #300]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCC_OscConfig+0x37e>
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fde7 	bl	8000cbc <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7fe fde3 	bl	8000cbc <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e09b      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	4b40      	ldr	r3, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b3c      	ldr	r3, [pc, #240]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a3b      	ldr	r2, [pc, #236]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8087 	beq.w	800223e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002130:	4b36      	ldr	r3, [pc, #216]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d061      	beq.n	8002200 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d146      	bne.n	80021d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_RCC_OscConfig+0x4cc>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7fe fdb7 	bl	8000cbc <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002152:	f7fe fdb3 	bl	8000cbc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e06d      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d108      	bne.n	800218c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	4921      	ldr	r1, [pc, #132]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a19      	ldr	r1, [r3, #32]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	430b      	orrs	r3, r1
 800219e:	491b      	ldr	r1, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fd87 	bl	8000cbc <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe fd83 	bl	8000cbc <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e03d      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x46a>
 80021d0:	e035      	b.n	800223e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_OscConfig+0x4cc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7fe fd70 	bl	8000cbc <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe fd6c 	bl	8000cbc <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e026      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x498>
 80021fe:	e01e      	b.n	800223e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e019      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
 8002214:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_OscConfig+0x500>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	429a      	cmp	r2, r3
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000

0800224c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0d0      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d910      	bls.n	8002290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4965      	ldr	r1, [pc, #404]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0b8      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	494d      	ldr	r1, [pc, #308]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d040      	beq.n	800236c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e073      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06b      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4936      	ldr	r1, [pc, #216]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800233c:	f7fe fcbe 	bl	8000cbc <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7fe fcba 	bl	8000cbc <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e053      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d210      	bcs.n	800239c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4922      	ldr	r1, [pc, #136]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e032      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4916      	ldr	r1, [pc, #88]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023da:	f000 f821 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	490a      	ldr	r1, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	5ccb      	ldrb	r3, [r1, r3]
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1cc>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fc1c 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40022000 	.word	0x40022000
 8002410:	40021000 	.word	0x40021000
 8002414:	08003b2c 	.word	0x08003b2c
 8002418:	20000008 	.word	0x20000008
 800241c:	2000000c 	.word	0x2000000c

08002420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002420:	b490      	push	{r4, r7}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_RCC_GetSysClockFreq+0xac>)
 8002428:	1d3c      	adds	r4, r7, #4
 800242a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800242c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002430:	f240 2301 	movw	r3, #513	; 0x201
 8002434:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x40>
 800245a:	2b08      	cmp	r3, #8
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x46>
 800245e:	e02b      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002462:	623b      	str	r3, [r7, #32]
      break;
 8002464:	e02b      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	0c9b      	lsrs	r3, r3, #18
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3328      	adds	r3, #40	; 0x28
 8002470:	443b      	add	r3, r7
 8002472:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002476:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d012      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	0c5b      	lsrs	r3, r3, #17
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	3328      	adds	r3, #40	; 0x28
 800248e:	443b      	add	r3, r7
 8002490:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002494:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800249a:	fb03 f202 	mul.w	r2, r3, r2
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
 80024a6:	e004      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	623b      	str	r3, [r7, #32]
      break;
 80024b6:	e002      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ba:	623b      	str	r3, [r7, #32]
      break;
 80024bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024be:	6a3b      	ldr	r3, [r7, #32]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3728      	adds	r7, #40	; 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc90      	pop	{r4, r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	08002dc0 	.word	0x08002dc0
 80024d0:	40021000 	.word	0x40021000
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	003d0900 	.word	0x003d0900

080024dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e0:	4b02      	ldr	r3, [pc, #8]	; (80024ec <HAL_RCC_GetHCLKFreq+0x10>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	20000008 	.word	0x20000008

080024f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024f4:	f7ff fff2 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4903      	ldr	r1, [pc, #12]	; (8002514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	08003b3c 	.word	0x08003b3c

08002518 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <RCC_Delay+0x34>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <RCC_Delay+0x38>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	0a5b      	lsrs	r3, r3, #9
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002534:	bf00      	nop
  }
  while (Delay --);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1e5a      	subs	r2, r3, #1
 800253a:	60fa      	str	r2, [r7, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f9      	bne.n	8002534 <RCC_Delay+0x1c>
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	20000008 	.word	0x20000008
 8002550:	10624dd3 	.word	0x10624dd3

08002554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e041      	b.n	80025ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fa9e 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3304      	adds	r3, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f000 fa70 	bl	8002a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d001      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e03a      	b.n	8002682 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_TIM_Base_Start_IT+0x98>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00e      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x58>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002636:	d009      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x58>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <HAL_TIM_Base_Start_IT+0x9c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x58>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <HAL_TIM_Base_Start_IT+0xa0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d111      	bne.n	8002670 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b06      	cmp	r3, #6
 800265c:	d010      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0201 	orr.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266e:	e007      	b.n	8002680 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800

08002698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d122      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0202 	mvn.w	r2, #2
 80026c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f9b1 	bl	8002a42 <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f9a4 	bl	8002a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f9b3 	bl	8002a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b04      	cmp	r3, #4
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0204 	mvn.w	r2, #4
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f987 	bl	8002a42 <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f97a 	bl	8002a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f989 	bl	8002a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b08      	cmp	r3, #8
 8002754:	d122      	bne.n	800279c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b08      	cmp	r3, #8
 8002762:	d11b      	bne.n	800279c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0208 	mvn.w	r2, #8
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2204      	movs	r2, #4
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f95d 	bl	8002a42 <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f950 	bl	8002a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f95f 	bl	8002a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d122      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d11b      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0210 	mvn.w	r2, #16
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2208      	movs	r2, #8
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f933 	bl	8002a42 <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f926 	bl	8002a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f935 	bl	8002a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0201 	mvn.w	r2, #1
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fd fe0c 	bl	8000434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fa77 	bl	8002d36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002860:	2b40      	cmp	r3, #64	; 0x40
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f8f9 	bl	8002a66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b20      	cmp	r3, #32
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b20      	cmp	r3, #32
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0220 	mvn.w	r2, #32
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa42 	bl	8002d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_TIM_ConfigClockSource+0x18>
 80028bc:	2302      	movs	r3, #2
 80028be:	e0b3      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x180>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f8:	d03e      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0xd0>
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fe:	f200 8087 	bhi.w	8002a10 <HAL_TIM_ConfigClockSource+0x168>
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002906:	f000 8085 	beq.w	8002a14 <HAL_TIM_ConfigClockSource+0x16c>
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290e:	d87f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x168>
 8002910:	2b70      	cmp	r3, #112	; 0x70
 8002912:	d01a      	beq.n	800294a <HAL_TIM_ConfigClockSource+0xa2>
 8002914:	2b70      	cmp	r3, #112	; 0x70
 8002916:	d87b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x168>
 8002918:	2b60      	cmp	r3, #96	; 0x60
 800291a:	d050      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x116>
 800291c:	2b60      	cmp	r3, #96	; 0x60
 800291e:	d877      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x168>
 8002920:	2b50      	cmp	r3, #80	; 0x50
 8002922:	d03c      	beq.n	800299e <HAL_TIM_ConfigClockSource+0xf6>
 8002924:	2b50      	cmp	r3, #80	; 0x50
 8002926:	d873      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x168>
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d058      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x136>
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d86f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x168>
 8002930:	2b30      	cmp	r3, #48	; 0x30
 8002932:	d064      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x156>
 8002934:	2b30      	cmp	r3, #48	; 0x30
 8002936:	d86b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x168>
 8002938:	2b20      	cmp	r3, #32
 800293a:	d060      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x156>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d867      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x168>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05c      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x156>
 8002944:	2b10      	cmp	r3, #16
 8002946:	d05a      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002948:	e062      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f000 f966 	bl	8002c2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800296c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	609a      	str	r2, [r3, #8]
      break;
 8002976:	e04e      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f000 f94f 	bl	8002c2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800299a:	609a      	str	r2, [r3, #8]
      break;
 800299c:	e03b      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f000 f8c6 	bl	8002b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2150      	movs	r1, #80	; 0x50
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f91d 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 80029bc:	e02b      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 f8e4 	bl	8002b98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2160      	movs	r1, #96	; 0x60
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f90d 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 80029dc:	e01b      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 f8a6 	bl	8002b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2140      	movs	r1, #64	; 0x40
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f8fd 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 80029fc:	e00b      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f000 f8f4 	bl	8002bf6 <TIM_ITRx_SetConfig>
        break;
 8002a0e:	e002      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a10:	bf00      	nop
 8002a12:	e000      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a29      	ldr	r2, [pc, #164]	; (8002b30 <TIM_Base_SetConfig+0xb8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00b      	beq.n	8002aa8 <TIM_Base_SetConfig+0x30>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a96:	d007      	beq.n	8002aa8 <TIM_Base_SetConfig+0x30>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <TIM_Base_SetConfig+0xbc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <TIM_Base_SetConfig+0x30>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a25      	ldr	r2, [pc, #148]	; (8002b38 <TIM_Base_SetConfig+0xc0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d108      	bne.n	8002aba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <TIM_Base_SetConfig+0xb8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <TIM_Base_SetConfig+0x62>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac8:	d007      	beq.n	8002ada <TIM_Base_SetConfig+0x62>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <TIM_Base_SetConfig+0xbc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_Base_SetConfig+0x62>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <TIM_Base_SetConfig+0xc0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <TIM_Base_SetConfig+0xb8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d103      	bne.n	8002b20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	615a      	str	r2, [r3, #20]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800

08002b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f023 0201 	bic.w	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 030a 	bic.w	r3, r3, #10
 8002b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f023 0210 	bic.w	r2, r3, #16
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	031b      	lsls	r3, r3, #12
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	621a      	str	r2, [r3, #32]
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f043 0307 	orr.w	r3, r3, #7
 8002c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	609a      	str	r2, [r3, #8]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	021a      	lsls	r2, r3, #8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	609a      	str	r2, [r3, #8]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e046      	b.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d009      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10c      	bne.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800

08002d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	2600      	movs	r6, #0
 8002d4c:	4d0c      	ldr	r5, [pc, #48]	; (8002d80 <__libc_init_array+0x38>)
 8002d4e:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d50:	1b64      	subs	r4, r4, r5
 8002d52:	10a4      	asrs	r4, r4, #2
 8002d54:	42a6      	cmp	r6, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	f000 f822 	bl	8002da0 <_init>
 8002d5c:	2600      	movs	r6, #0
 8002d5e:	4d0a      	ldr	r5, [pc, #40]	; (8002d88 <__libc_init_array+0x40>)
 8002d60:	4c0a      	ldr	r4, [pc, #40]	; (8002d8c <__libc_init_array+0x44>)
 8002d62:	1b64      	subs	r4, r4, r5
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	42a6      	cmp	r6, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d70:	4798      	blx	r3
 8002d72:	3601      	adds	r6, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7a:	4798      	blx	r3
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08003b44 	.word	0x08003b44
 8002d84:	08003b44 	.word	0x08003b44
 8002d88:	08003b44 	.word	0x08003b44
 8002d8c:	08003b48 	.word	0x08003b48

08002d90 <memset>:
 8002d90:	4603      	mov	r3, r0
 8002d92:	4402      	add	r2, r0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d100      	bne.n	8002d9a <memset+0xa>
 8002d98:	4770      	bx	lr
 8002d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9e:	e7f9      	b.n	8002d94 <memset+0x4>

08002da0 <_init>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	bf00      	nop
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr

08002dac <_fini>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr
