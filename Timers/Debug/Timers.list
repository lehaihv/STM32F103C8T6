
Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006d00  08006d00  00016d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800712c  0800712c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800712c  0800712c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800712c  0800712c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001dc  08007310  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08007310  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb0b  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a6  00000000  00000000  0002cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  0002eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  0002fcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192a9  00000000  00000000  00030a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edeb  00000000  00000000  00049cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b74  00000000  00000000  00058aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca4  00000000  00000000  000e9668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ce8 	.word	0x08006ce8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006ce8 	.word	0x08006ce8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000f88:	201e      	movs	r0, #30
 8000f8a:	f000 fe87 	bl	8001c9c <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	481c      	ldr	r0, [pc, #112]	; (8001008 <lcd_init+0x84>)
 8000f96:	f001 fd39 	bl	8002a0c <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	4819      	ldr	r0, [pc, #100]	; (8001008 <lcd_init+0x84>)
 8000fa2:	f001 fd33 	bl	8002a0c <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fac:	4816      	ldr	r0, [pc, #88]	; (8001008 <lcd_init+0x84>)
 8000fae:	f001 fd2d 	bl	8002a0c <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <lcd_init+0x84>)
 8000fba:	f001 fd27 	bl	8002a0c <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <lcd_init+0x84>)
 8000fc6:	f001 fd21 	bl	8002a0c <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <lcd_init+0x84>)
 8000fd2:	f001 fd1b 	bl	8002a0c <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fdc:	480a      	ldr	r0, [pc, #40]	; (8001008 <lcd_init+0x84>)
 8000fde:	f001 fd15 	bl	8002a0c <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8000fe2:	2128      	movs	r1, #40	; 0x28
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 f811 	bl	800100c <lcd_write>
	lcd_write(0,0x0c);
 8000fea:	210c      	movs	r1, #12
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 f80d 	bl	800100c <lcd_write>
	lcd_write(0,0x06);
 8000ff2:	2106      	movs	r1, #6
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f809 	bl	800100c <lcd_write>
	lcd_write(0,0x01);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f805 	bl	800100c <lcd_write>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40010c00 	.word	0x40010c00

0800100c <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 800101c:	2002      	movs	r0, #2
 800101e:	f000 fe3d 	bl	8001c9c <HAL_Delay>
	if(type)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <lcd_write+0x2a>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102e:	485a      	ldr	r0, [pc, #360]	; (8001198 <lcd_write+0x18c>)
 8001030:	f001 fcec 	bl	8002a0c <HAL_GPIO_WritePin>
 8001034:	e005      	b.n	8001042 <lcd_write+0x36>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800103c:	4856      	ldr	r0, [pc, #344]	; (8001198 <lcd_write+0x18c>)
 800103e:	f001 fce5 	bl	8002a0c <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8001042:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001046:	2b00      	cmp	r3, #0
 8001048:	da06      	bge.n	8001058 <lcd_write+0x4c>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001050:	4851      	ldr	r0, [pc, #324]	; (8001198 <lcd_write+0x18c>)
 8001052:	f001 fcdb 	bl	8002a0c <HAL_GPIO_WritePin>
 8001056:	e005      	b.n	8001064 <lcd_write+0x58>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	484e      	ldr	r0, [pc, #312]	; (8001198 <lcd_write+0x18c>)
 8001060:	f001 fcd4 	bl	8002a0c <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <lcd_write+0x70>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	4848      	ldr	r0, [pc, #288]	; (8001198 <lcd_write+0x18c>)
 8001076:	f001 fcc9 	bl	8002a0c <HAL_GPIO_WritePin>
 800107a:	e005      	b.n	8001088 <lcd_write+0x7c>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001082:	4845      	ldr	r0, [pc, #276]	; (8001198 <lcd_write+0x18c>)
 8001084:	f001 fcc2 	bl	8002a0c <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	2b00      	cmp	r3, #0
 8001090:	d006      	beq.n	80010a0 <lcd_write+0x94>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001098:	483f      	ldr	r0, [pc, #252]	; (8001198 <lcd_write+0x18c>)
 800109a:	f001 fcb7 	bl	8002a0c <HAL_GPIO_WritePin>
 800109e:	e005      	b.n	80010ac <lcd_write+0xa0>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a6:	483c      	ldr	r0, [pc, #240]	; (8001198 <lcd_write+0x18c>)
 80010a8:	f001 fcb0 	bl	8002a0c <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <lcd_write+0xb8>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 80010b6:	2201      	movs	r2, #1
 80010b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010bc:	4836      	ldr	r0, [pc, #216]	; (8001198 <lcd_write+0x18c>)
 80010be:	f001 fca5 	bl	8002a0c <HAL_GPIO_WritePin>
 80010c2:	e005      	b.n	80010d0 <lcd_write+0xc4>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ca:	4833      	ldr	r0, [pc, #204]	; (8001198 <lcd_write+0x18c>)
 80010cc:	f001 fc9e 	bl	8002a0c <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d6:	4830      	ldr	r0, [pc, #192]	; (8001198 <lcd_write+0x18c>)
 80010d8:	f001 fc98 	bl	8002a0c <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <lcd_write+0x18c>)
 80010e4:	f001 fc92 	bl	8002a0c <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <lcd_write+0xf4>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f8:	4827      	ldr	r0, [pc, #156]	; (8001198 <lcd_write+0x18c>)
 80010fa:	f001 fc87 	bl	8002a0c <HAL_GPIO_WritePin>
 80010fe:	e005      	b.n	800110c <lcd_write+0x100>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001106:	4824      	ldr	r0, [pc, #144]	; (8001198 <lcd_write+0x18c>)
 8001108:	f001 fc80 	bl	8002a0c <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <lcd_write+0x118>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	481e      	ldr	r0, [pc, #120]	; (8001198 <lcd_write+0x18c>)
 800111e:	f001 fc75 	bl	8002a0c <HAL_GPIO_WritePin>
 8001122:	e005      	b.n	8001130 <lcd_write+0x124>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <lcd_write+0x18c>)
 800112c:	f001 fc6e 	bl	8002a0c <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <lcd_write+0x13c>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001140:	4815      	ldr	r0, [pc, #84]	; (8001198 <lcd_write+0x18c>)
 8001142:	f001 fc63 	bl	8002a0c <HAL_GPIO_WritePin>
 8001146:	e005      	b.n	8001154 <lcd_write+0x148>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114e:	4812      	ldr	r0, [pc, #72]	; (8001198 <lcd_write+0x18c>)
 8001150:	f001 fc5c 	bl	8002a0c <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <lcd_write+0x160>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <lcd_write+0x18c>)
 8001166:	f001 fc51 	bl	8002a0c <HAL_GPIO_WritePin>
 800116a:	e005      	b.n	8001178 <lcd_write+0x16c>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <lcd_write+0x18c>)
 8001174:	f001 fc4a 	bl	8002a0c <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <lcd_write+0x18c>)
 8001180:	f001 fc44 	bl	8002a0c <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <lcd_write+0x18c>)
 800118c:	f001 fc3e 	bl	8002a0c <HAL_GPIO_WritePin>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010c00 	.word	0x40010c00

0800119c <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	603a      	str	r2, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	460b      	mov	r3, r1
 80011aa:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d836      	bhi.n	8001220 <lcd_puts+0x84>
 80011b2:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <lcd_puts+0x1c>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011d9 	.word	0x080011d9
 80011c0:	080011e9 	.word	0x080011e9
 80011c4:	080011f9 	.word	0x080011f9
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	3b80      	subs	r3, #128	; 0x80
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff ff1b 	bl	800100c <lcd_write>
			break;
 80011d6:	e017      	b.n	8001208 <lcd_puts+0x6c>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	3b40      	subs	r3, #64	; 0x40
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff ff13 	bl	800100c <lcd_write>
			break;
 80011e6:	e00f      	b.n	8001208 <lcd_puts+0x6c>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	3b70      	subs	r3, #112	; 0x70
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ff0b 	bl	800100c <lcd_write>
			break;
 80011f6:	e007      	b.n	8001208 <lcd_puts+0x6c>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	3b30      	subs	r3, #48	; 0x30
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff03 	bl	800100c <lcd_write>
			break;
 8001206:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8001208:	e00a      	b.n	8001220 <lcd_puts+0x84>
	{
		lcd_write(1,*string);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	f993 3000 	ldrsb.w	r3, [r3]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fef9 	bl	800100c <lcd_write>
		string++;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	603b      	str	r3, [r7, #0]
	while(*string)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f993 3000 	ldrsb.w	r3, [r3]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ef      	bne.n	800120a <lcd_puts+0x6e>
	}
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001238:	f000 fcce 	bl	8001bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f88a 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f000 f9e4 	bl	800160c <MX_GPIO_Init>
  MX_TIM3_Init();
 8001244:	f000 f96a 	bl	800151c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001248:	f000 f91a 	bl	8001480 <MX_TIM2_Init>
  MX_ADC1_Init();
 800124c:	f000 f8da 	bl	8001404 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001250:	f000 f9b2 	bl	80015b8 <MX_USART1_UART_Init>
  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim3);

  //ADC
  //HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_ADC_Start_IT(&hadc1);
 8001254:	4833      	ldr	r0, [pc, #204]	; (8001324 <main+0xf0>)
 8001256:	f000 fe1d 	bl	8001e94 <HAL_ADC_Start_IT>
  SSD1306_GotoXY (8,0);
  SSD1306_Puts ("Hello!", &Font_11x18, 1);
  SSD1306_UpdateScreen();*/

  //LCD 16x2
  lcd_init();
 800125a:	f7ff fe93 	bl	8000f84 <lcd_init>
  lcd_puts (0,0,(int8_t*)"ADC: ");
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <main+0xf4>)
 8001260:	2100      	movs	r1, #0
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff ff9a 	bl	800119c <lcd_puts>
  lcd_puts (1,0,(int8_t*)"Volts: ");
 8001268:	4a30      	ldr	r2, [pc, #192]	; (800132c <main+0xf8>)
 800126a:	2100      	movs	r1, #0
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff ff95 	bl	800119c <lcd_puts>
    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
	  //HAL_Delay(100);
	  //lcd_clear();
	  HAL_ADC_Start_IT(&hadc1);
 8001272:	482c      	ldr	r0, [pc, #176]	; (8001324 <main+0xf0>)
 8001274:	f000 fe0e 	bl	8001e94 <HAL_ADC_Start_IT>
	  sprintf(msg, "%hu", value_adc);
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <main+0xfc>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	492d      	ldr	r1, [pc, #180]	; (8001334 <main+0x100>)
 8001280:	482d      	ldr	r0, [pc, #180]	; (8001338 <main+0x104>)
 8001282:	f003 fab7 	bl	80047f4 <siprintf>
	  lcd_puts(0,4, (int8_t*)msg ); ///
 8001286:	4a2c      	ldr	r2, [pc, #176]	; (8001338 <main+0x104>)
 8001288:	2104      	movs	r1, #4
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ff86 	bl	800119c <lcd_puts>
	  volts = ((float)value_adc)*3300/4096;
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <main+0xfc>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fcad 	bl	8000bf4 <__aeabi_ui2f>
 800129a:	4603      	mov	r3, r0
 800129c:	4927      	ldr	r1, [pc, #156]	; (800133c <main+0x108>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fd00 	bl	8000ca4 <__aeabi_fmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fdae 	bl	8000e0c <__aeabi_fdiv>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <main+0x10c>)
 80012b6:	601a      	str	r2, [r3, #0]
	  //sprintf(msg1, "%d", (uint16_t)(volts));
	  //lcd_puts(1,6, (int8_t*)msg1);

	  //sprintf(msg1, "%d", (uint16_t)(volts));
	  sprintf(msg1, "%d", (uint16_t)(volts)/100);
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <main+0x10c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe41 	bl	8000f44 <__aeabi_f2uiz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <main+0x110>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	491d      	ldr	r1, [pc, #116]	; (8001348 <main+0x114>)
 80012d4:	481d      	ldr	r0, [pc, #116]	; (800134c <main+0x118>)
 80012d6:	f003 fa8d 	bl	80047f4 <siprintf>
	  lcd_puts(1,6, (int8_t*)msg1);
 80012da:	4a1c      	ldr	r2, [pc, #112]	; (800134c <main+0x118>)
 80012dc:	2106      	movs	r1, #6
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff ff5c 	bl	800119c <lcd_puts>
	  lcd_puts(1,7, (int8_t*)".");
 80012e4:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <main+0x11c>)
 80012e6:	2107      	movs	r1, #7
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff ff57 	bl	800119c <lcd_puts>
	  sprintf(msg1, "%d", (uint16_t)(volts)%100);
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <main+0x10c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe26 	bl	8000f44 <__aeabi_f2uiz>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <main+0x110>)
 80012fe:	fba2 1203 	umull	r1, r2, r2, r3
 8001302:	0952      	lsrs	r2, r2, #5
 8001304:	2164      	movs	r1, #100	; 0x64
 8001306:	fb01 f202 	mul.w	r2, r1, r2
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	461a      	mov	r2, r3
 8001310:	490d      	ldr	r1, [pc, #52]	; (8001348 <main+0x114>)
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <main+0x118>)
 8001314:	f003 fa6e 	bl	80047f4 <siprintf>
	  lcd_puts(1,8, (int8_t*)msg1);
 8001318:	4a0c      	ldr	r2, [pc, #48]	; (800134c <main+0x118>)
 800131a:	2108      	movs	r1, #8
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff ff3d 	bl	800119c <lcd_puts>
	  HAL_ADC_Start_IT(&hadc1);
 8001322:	e7a6      	b.n	8001272 <main+0x3e>
 8001324:	200001f8 	.word	0x200001f8
 8001328:	08006d00 	.word	0x08006d00
 800132c:	08006d08 	.word	0x08006d08
 8001330:	200002fc 	.word	0x200002fc
 8001334:	08006d10 	.word	0x08006d10
 8001338:	20000304 	.word	0x20000304
 800133c:	454e4000 	.word	0x454e4000
 8001340:	20000300 	.word	0x20000300
 8001344:	51eb851f 	.word	0x51eb851f
 8001348:	08006d14 	.word	0x08006d14
 800134c:	20000314 	.word	0x20000314
 8001350:	08006d18 	.word	0x08006d18

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	; 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	2228      	movs	r2, #40	; 0x28
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fdde 	bl	8003f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001384:	2302      	movs	r3, #2
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138c:	2310      	movs	r3, #16
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001390:	2302      	movs	r3, #2
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001394:	2300      	movs	r3, #0
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001398:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800139c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fb64 	bl	8002a70 <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80013ae:	f000 f9db 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	230f      	movs	r3, #15
 80013b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2101      	movs	r1, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fdd0 	bl	8002f74 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013da:	f000 f9c5 	bl	8001768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013de:	2302      	movs	r3, #2
 80013e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80013e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 ff5a 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013f6:	f000 f9b7 	bl	8001768 <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	; 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_ADC1_Init+0x74>)
 8001416:	4a19      	ldr	r2, [pc, #100]	; (800147c <MX_ADC1_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_ADC1_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_ADC1_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_ADC1_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_ADC1_Init+0x74>)
 800142e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001432:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_ADC1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_ADC1_Init+0x74>)
 800143c:	2201      	movs	r2, #1
 800143e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_ADC1_Init+0x74>)
 8001442:	f000 fc4f 	bl	8001ce4 <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800144c:	f000 f98c 	bl	8001768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001450:	2309      	movs	r3, #9
 8001452:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001454:	2301      	movs	r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001458:	2305      	movs	r3, #5
 800145a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_ADC1_Init+0x74>)
 8001462:	f000 fea5 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800146c:	f000 f97c 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200001f8 	.word	0x200001f8
 800147c:	40012400 	.word	0x40012400

08001480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_TIM2_Init+0x98>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_TIM2_Init+0x98>)
 80014a6:	f240 321f 	movw	r2, #799	; 0x31f
 80014aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_TIM2_Init+0x98>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000-1;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_TIM2_Init+0x98>)
 80014b4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80014b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_TIM2_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_TIM2_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c6:	4814      	ldr	r0, [pc, #80]	; (8001518 <MX_TIM2_Init+0x98>)
 80014c8:	f001 ffa2 	bl	8003410 <HAL_TIM_Base_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014d2:	f000 f949 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	4619      	mov	r1, r3
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <MX_TIM2_Init+0x98>)
 80014e4:	f002 f8eb 	bl	80036be <HAL_TIM_ConfigClockSource>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014ee:	f000 f93b 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fa:	463b      	mov	r3, r7
 80014fc:	4619      	mov	r1, r3
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <MX_TIM2_Init+0x98>)
 8001500:	f002 fabe 	bl	8003a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800150a:	f000 f92d 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000228 	.word	0x20000228

0800151c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <MX_TIM3_Init+0x94>)
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <MX_TIM3_Init+0x98>)
 800153c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_TIM3_Init+0x94>)
 8001540:	f240 321f 	movw	r2, #799	; 0x31f
 8001544:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_TIM3_Init+0x94>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_TIM3_Init+0x94>)
 800154e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001552:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_TIM3_Init+0x94>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_TIM3_Init+0x94>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <MX_TIM3_Init+0x94>)
 8001562:	f001 ff55 	bl	8003410 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800156c:	f000 f8fc 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_TIM3_Init+0x94>)
 800157e:	f002 f89e 	bl	80036be <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001588:	f000 f8ee 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_TIM3_Init+0x94>)
 800159a:	f002 fa71 	bl	8003a80 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015a4:	f000 f8e0 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000270 	.word	0x20000270
 80015b4:	40000400 	.word	0x40000400

080015b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USART1_UART_Init+0x4c>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <MX_USART1_UART_Init+0x50>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_USART1_UART_Init+0x4c>)
 80015c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USART1_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USART1_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USART1_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USART1_UART_Init+0x4c>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USART1_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USART1_UART_Init+0x4c>)
 80015f0:	f002 fab6 	bl	8003b60 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015fa:	f000 f8b5 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200002b8 	.word	0x200002b8
 8001608:	40013800 	.word	0x40013800

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <MX_GPIO_Init+0xb8>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a27      	ldr	r2, [pc, #156]	; (80016c4 <MX_GPIO_Init+0xb8>)
 8001626:	f043 0320 	orr.w	r3, r3, #32
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <MX_GPIO_Init+0xb8>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0320 	and.w	r3, r3, #32
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <MX_GPIO_Init+0xb8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <MX_GPIO_Init+0xb8>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <MX_GPIO_Init+0xb8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <MX_GPIO_Init+0xb8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <MX_GPIO_Init+0xb8>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <MX_GPIO_Init+0xb8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_10, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f240 4101 	movw	r1, #1025	; 0x401
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <MX_GPIO_Init+0xbc>)
 8001670:	f001 f9cc 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800167a:	4814      	ldr	r0, [pc, #80]	; (80016cc <MX_GPIO_Init+0xc0>)
 800167c:	f001 f9c6 	bl	8002a0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8001680:	f240 4301 	movw	r3, #1025	; 0x401
 8001684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2302      	movs	r3, #2
 8001690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4619      	mov	r1, r3
 8001698:	480b      	ldr	r0, [pc, #44]	; (80016c8 <MX_GPIO_Init+0xbc>)
 800169a:	f001 f833 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800169e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80016a2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_GPIO_Init+0xc0>)
 80016b8:	f001 f824 	bl	8002704 <HAL_GPIO_Init>

}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010800 	.word	0x40010800
 80016cc:	40010c00 	.word	0x40010c00

080016d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//Timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d105      	bne.n	80016ec <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80016e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016e6:	f001 f9a9 	bl	8002a3c <HAL_GPIO_TogglePin>
  }
  else if (htim == &htim2)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
  }
}
 80016ea:	e007      	b.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x2c>
  else if (htim == &htim2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d103      	bne.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x2c>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80016f4:	2101      	movs	r1, #1
 80016f6:	4804      	ldr	r0, [pc, #16]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016f8:	f001 f9a0 	bl	8002a3c <HAL_GPIO_TogglePin>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000270 	.word	0x20000270
 8001708:	40010800 	.word	0x40010800
 800170c:	20000228 	.word	0x20000228

08001710 <HAL_ADC_ConvCpltCallback>:

//ADC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	value_adc = HAL_ADC_GetValue(&hadc1);
 8001718:	480e      	ldr	r0, [pc, #56]	; (8001754 <HAL_ADC_ConvCpltCallback+0x44>)
 800171a:	f000 fc71 	bl	8002000 <HAL_ADC_GetValue>
 800171e:	4603      	mov	r3, r0
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_ADC_ConvCpltCallback+0x48>)
 8001724:	801a      	strh	r2, [r3, #0]
	sprintf(msg, "rawValue: %d\r\n", value_adc);
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_ADC_ConvCpltCallback+0x48>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	490b      	ldr	r1, [pc, #44]	; (800175c <HAL_ADC_ConvCpltCallback+0x4c>)
 800172e:	480c      	ldr	r0, [pc, #48]	; (8001760 <HAL_ADC_ConvCpltCallback+0x50>)
 8001730:	f003 f860 	bl	80047f4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001734:	480a      	ldr	r0, [pc, #40]	; (8001760 <HAL_ADC_ConvCpltCallback+0x50>)
 8001736:	f7fe fd0b 	bl	8000150 <strlen>
 800173a:	4603      	mov	r3, r0
 800173c:	b29a      	uxth	r2, r3
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	4907      	ldr	r1, [pc, #28]	; (8001760 <HAL_ADC_ConvCpltCallback+0x50>)
 8001744:	4807      	ldr	r0, [pc, #28]	; (8001764 <HAL_ADC_ConvCpltCallback+0x54>)
 8001746:	f002 fa58 	bl	8003bfa <HAL_UART_Transmit>
	//value_adc++;
	//value_adc = 2047;

}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001f8 	.word	0x200001f8
 8001758:	200002fc 	.word	0x200002fc
 800175c:	08006d1c 	.word	0x08006d1c
 8001760:	20000304 	.word	0x20000304
 8001764:	200002b8 	.word	0x200002b8

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001770:	e7fe      	b.n	8001770 <Error_Handler+0x8>
	...

08001774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_MspInit+0x40>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <HAL_MspInit+0x40>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6193      	str	r3, [r2, #24]
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_MspInit+0x40>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_MspInit+0x40>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_MspInit+0x40>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_MspInit+0x40>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_ADC_MspInit+0x7c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d129      	bne.n	800182c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_ADC_MspInit+0x80>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a16      	ldr	r2, [pc, #88]	; (8001838 <HAL_ADC_MspInit+0x80>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <HAL_ADC_MspInit+0x80>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_ADC_MspInit+0x80>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_ADC_MspInit+0x80>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_ADC_MspInit+0x80>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180c:	2303      	movs	r3, #3
 800180e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4619      	mov	r1, r3
 8001816:	4809      	ldr	r0, [pc, #36]	; (800183c <HAL_ADC_MspInit+0x84>)
 8001818:	f000 ff74 	bl	8002704 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2012      	movs	r0, #18
 8001822:	f000 ff38 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001826:	2012      	movs	r0, #18
 8001828:	f000 ff51 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40012400 	.word	0x40012400
 8001838:	40021000 	.word	0x40021000
 800183c:	40010c00 	.word	0x40010c00

08001840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001850:	d114      	bne.n	800187c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_TIM_Base_MspInit+0x78>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <HAL_TIM_Base_MspInit+0x78>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <HAL_TIM_Base_MspInit+0x78>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	201c      	movs	r0, #28
 8001870:	f000 ff11 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001874:	201c      	movs	r0, #28
 8001876:	f000 ff2a 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800187a:	e018      	b.n	80018ae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <HAL_TIM_Base_MspInit+0x7c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d113      	bne.n	80018ae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_TIM_Base_MspInit+0x78>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_TIM_Base_MspInit+0x78>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_TIM_Base_MspInit+0x78>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	201d      	movs	r0, #29
 80018a4:	f000 fef7 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018a8:	201d      	movs	r0, #29
 80018aa:	f000 ff10 	bl	80026ce <HAL_NVIC_EnableIRQ>
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40000400 	.word	0x40000400

080018c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a22      	ldr	r2, [pc, #136]	; (8001964 <HAL_UART_MspInit+0xa4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d13d      	bne.n	800195c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_UART_MspInit+0xa8>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a20      	ldr	r2, [pc, #128]	; (8001968 <HAL_UART_MspInit+0xa8>)
 80018e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_UART_MspInit+0xa8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_UART_MspInit+0xa8>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <HAL_UART_MspInit+0xa8>)
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_UART_MspInit+0xa8>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001910:	2340      	movs	r3, #64	; 0x40
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4812      	ldr	r0, [pc, #72]	; (800196c <HAL_UART_MspInit+0xac>)
 8001924:	f000 feee 	bl	8002704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	480c      	ldr	r0, [pc, #48]	; (800196c <HAL_UART_MspInit+0xac>)
 800193c:	f000 fee2 	bl	8002704 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_UART_MspInit+0xb0>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_UART_MspInit+0xb0>)
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013800 	.word	0x40013800
 8001968:	40021000 	.word	0x40021000
 800196c:	40010c00 	.word	0x40010c00
 8001970:	40010000 	.word	0x40010000

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ba:	f000 f953 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <ADC1_2_IRQHandler+0x10>)
 80019ca:	f000 fb25 	bl	8002018 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200001f8 	.word	0x200001f8

080019d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM2_IRQHandler+0x10>)
 80019de:	f001 fd66 	bl	80034ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000228 	.word	0x20000228

080019ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <TIM3_IRQHandler+0x10>)
 80019f2:	f001 fd5c 	bl	80034ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000270 	.word	0x20000270

08001a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return 1;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <_kill>:

int _kill(int pid, int sig)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a18:	f002 fa5a 	bl	8003ed0 <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2216      	movs	r2, #22
 8001a20:	601a      	str	r2, [r3, #0]
  return -1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_exit>:

void _exit (int status)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a36:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffe7 	bl	8001a0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a40:	e7fe      	b.n	8001a40 <_exit+0x12>

08001a42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e00a      	b.n	8001a6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a54:	f3af 8000 	nop.w
 8001a58:	4601      	mov	r1, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	60ba      	str	r2, [r7, #8]
 8001a60:	b2ca      	uxtb	r2, r1
 8001a62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dbf0      	blt.n	8001a54 <_read+0x12>
  }

  return len;
 8001a72:	687b      	ldr	r3, [r7, #4]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e009      	b.n	8001aa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	60ba      	str	r2, [r7, #8]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbf1      	blt.n	8001a8e <_write+0x12>
  }
  return len;
 8001aaa:	687b      	ldr	r3, [r7, #4]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_close>:

int _close(int file)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ada:	605a      	str	r2, [r3, #4]
  return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <_isatty>:

int _isatty(int file)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <_sbrk+0x5c>)
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <_sbrk+0x60>)
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <_sbrk+0x64>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <_sbrk+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d207      	bcs.n	8001b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b44:	f002 f9c4 	bl	8003ed0 <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	e009      	b.n	8001b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <_sbrk+0x64>)
 8001b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20005000 	.word	0x20005000
 8001b74:	00000400 	.word	0x00000400
 8001b78:	20000324 	.word	0x20000324
 8001b7c:	20000340 	.word	0x20000340

08001b80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <Reset_Handler>:
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <LoopFillZerobss+0x12>)
 8001b8e:	490d      	ldr	r1, [pc, #52]	; (8001bc4 <LoopFillZerobss+0x16>)
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <LoopFillZerobss+0x1a>)
 8001b92:	2300      	movs	r3, #0
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:
 8001b96:	58d4      	ldr	r4, [r2, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:
 8001b9c:	18c4      	adds	r4, r0, r3
 8001b9e:	428c      	cmp	r4, r1
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <LoopFillZerobss+0x1e>)
 8001ba4:	4c0a      	ldr	r4, [pc, #40]	; (8001bd0 <LoopFillZerobss+0x22>)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:
 8001bae:	42a2      	cmp	r2, r4
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>
 8001bb2:	f7ff ffe5 	bl	8001b80 <SystemInit>
 8001bb6:	f002 f991 	bl	8003edc <__libc_init_array>
 8001bba:	f7ff fb3b 	bl	8001234 <main>
 8001bbe:	4770      	bx	lr
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	200001dc 	.word	0x200001dc
 8001bc8:	08007134 	.word	0x08007134
 8001bcc:	200001dc 	.word	0x200001dc
 8001bd0:	2000033c 	.word	0x2000033c

08001bd4 <CAN1_RX1_IRQHandler>:
 8001bd4:	e7fe      	b.n	8001bd4 <CAN1_RX1_IRQHandler>
	...

08001bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_Init+0x28>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_Init+0x28>)
 8001be2:	f043 0310 	orr.w	r3, r3, #16
 8001be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 fd49 	bl	8002680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	200f      	movs	r0, #15
 8001bf0:	f000 f808 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fdbe 	bl	8001774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x54>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fd61 	bl	80026ea <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 fd29 	bl	8002696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <HAL_InitTick+0x5c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_IncTick+0x1c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_IncTick+0x20>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a03      	ldr	r2, [pc, #12]	; (8001c84 <HAL_IncTick+0x20>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000328 	.word	0x20000328

08001c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b02      	ldr	r3, [pc, #8]	; (8001c98 <HAL_GetTick+0x10>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	20000328 	.word	0x20000328

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffe0 	bl	8001c88 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0be      	b.n	8001e84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fd48 	bl	80017b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fb93 	bl	8002454 <ADC_ConversionStop_Disable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 8099 	bne.w	8001e72 <HAL_ADC_Init+0x18e>
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8095 	bne.w	8001e72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d50:	f023 0302 	bic.w	r3, r3, #2
 8001d54:	f043 0202 	orr.w	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7b1b      	ldrb	r3, [r3, #12]
 8001d6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d7c:	d003      	beq.n	8001d86 <HAL_ADC_Init+0xa2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_ADC_Init+0xa8>
 8001d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8a:	e000      	b.n	8001d8e <HAL_ADC_Init+0xaa>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7d1b      	ldrb	r3, [r3, #20]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d119      	bne.n	8001dd0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7b1b      	ldrb	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	035a      	lsls	r2, r3, #13
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	e00b      	b.n	8001dd0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	f043 0220 	orr.w	r2, r3, #32
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <HAL_ADC_Init+0x1a8>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e00:	d003      	beq.n	8001e0a <HAL_ADC_Init+0x126>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d104      	bne.n	8001e14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	051b      	lsls	r3, r3, #20
 8001e12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_ADC_Init+0x1ac>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10b      	bne.n	8001e50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	f023 0303 	bic.w	r3, r3, #3
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e4e:	e018      	b.n	8001e82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	f023 0312 	bic.w	r3, r3, #18
 8001e58:	f043 0210 	orr.w	r2, r3, #16
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e70:	e007      	b.n	8001e82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e90:	ff1f0efe 	.word	0xff1f0efe

08001e94 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_Start_IT+0x1a>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e0a0      	b.n	8001ff0 <HAL_ADC_Start_IT+0x15c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fa72 	bl	80023a0 <ADC_Enable>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f040 808f 	bne.w	8001fe6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a45      	ldr	r2, [pc, #276]	; (8001ff8 <HAL_ADC_Start_IT+0x164>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d105      	bne.n	8001ef2 <HAL_ADC_Start_IT+0x5e>
 8001ee6:	4b45      	ldr	r3, [pc, #276]	; (8001ffc <HAL_ADC_Start_IT+0x168>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d115      	bne.n	8001f1e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d026      	beq.n	8001f5a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f1c:	e01d      	b.n	8001f5a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a33      	ldr	r2, [pc, #204]	; (8001ffc <HAL_ADC_Start_IT+0x168>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <HAL_ADC_Start_IT+0xaa>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a2f      	ldr	r2, [pc, #188]	; (8001ff8 <HAL_ADC_Start_IT+0x164>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <HAL_ADC_Start_IT+0xc6>
 8001f3e:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <HAL_ADC_Start_IT+0x168>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	f023 0206 	bic.w	r2, r3, #6
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f72:	e002      	b.n	8001f7a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0202 	mvn.w	r2, #2
 8001f8a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fa6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001faa:	d113      	bne.n	8001fd4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fb0:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <HAL_ADC_Start_IT+0x164>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d105      	bne.n	8001fc2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_ADC_Start_IT+0x168>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d108      	bne.n	8001fd4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	e00c      	b.n	8001fee <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	e003      	b.n	8001fee <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40012800 	.word	0x40012800
 8001ffc:	40012400 	.word	0x40012400

08002000 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b20      	cmp	r3, #32
 800202c:	d140      	bne.n	80020b0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b02      	cmp	r3, #2
 800203a:	d139      	bne.n	80020b0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800205e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002062:	d11d      	bne.n	80020a0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002068:	2b00      	cmp	r3, #0
 800206a:	d119      	bne.n	80020a0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0220 	bic.w	r2, r2, #32
 800207a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff fb35 	bl	8001710 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f06f 0212 	mvn.w	r2, #18
 80020ae:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ba:	2b80      	cmp	r3, #128	; 0x80
 80020bc:	d14f      	bne.n	800215e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d148      	bne.n	800215e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80020ee:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80020f2:	d012      	beq.n	800211a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d125      	bne.n	800214e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800210c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002110:	d11d      	bne.n	800214e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002116:	2b00      	cmp	r3, #0
 8002118:	d119      	bne.n	800214e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002128:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f9c1 	bl	80024d6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 020c 	mvn.w	r2, #12
 800215c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002168:	2b40      	cmp	r3, #64	; 0x40
 800216a:	d114      	bne.n	8002196 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d10d      	bne.n	8002196 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f809 	bl	800219e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0201 	mvn.w	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x20>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0dc      	b.n	800238a <HAL_ADC_ConfigChannel+0x1da>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d81c      	bhi.n	800221a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b05      	subs	r3, #5
 80021f2:	221f      	movs	r2, #31
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	4019      	ands	r1, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3b05      	subs	r3, #5
 800220c:	fa00 f203 	lsl.w	r2, r0, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	635a      	str	r2, [r3, #52]	; 0x34
 8002218:	e03c      	b.n	8002294 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d81c      	bhi.n	800225c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	3b23      	subs	r3, #35	; 0x23
 8002234:	221f      	movs	r2, #31
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	4019      	ands	r1, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b23      	subs	r3, #35	; 0x23
 800224e:	fa00 f203 	lsl.w	r2, r0, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
 800225a:	e01b      	b.n	8002294 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	3b41      	subs	r3, #65	; 0x41
 800226e:	221f      	movs	r2, #31
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	4019      	ands	r1, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	3b41      	subs	r3, #65	; 0x41
 8002288:	fa00 f203 	lsl.w	r2, r0, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b09      	cmp	r3, #9
 800229a:	d91c      	bls.n	80022d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68d9      	ldr	r1, [r3, #12]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	3b1e      	subs	r3, #30
 80022ae:	2207      	movs	r2, #7
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4019      	ands	r1, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6898      	ldr	r0, [r3, #8]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	3b1e      	subs	r3, #30
 80022c8:	fa00 f203 	lsl.w	r2, r0, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	e019      	b.n	800230a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6919      	ldr	r1, [r3, #16]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	2207      	movs	r2, #7
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	4019      	ands	r1, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6898      	ldr	r0, [r3, #8]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b10      	cmp	r3, #16
 8002310:	d003      	beq.n	800231a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002316:	2b11      	cmp	r3, #17
 8002318:	d132      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_ADC_ConfigChannel+0x1e4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d125      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d126      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002340:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b10      	cmp	r3, #16
 8002348:	d11a      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_ADC_ConfigChannel+0x1e8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a13      	ldr	r2, [pc, #76]	; (800239c <HAL_ADC_ConfigChannel+0x1ec>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	0c9a      	lsrs	r2, r3, #18
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002360:	e002      	b.n	8002368 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3b01      	subs	r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x1b2>
 800236e:	e007      	b.n	8002380 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40012400 	.word	0x40012400
 8002398:	20000000 	.word	0x20000000
 800239c:	431bde83 	.word	0x431bde83

080023a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d040      	beq.n	8002440 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <ADC_Enable+0xac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <ADC_Enable+0xb0>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9b      	lsrs	r3, r3, #18
 80023da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023dc:	e002      	b.n	80023e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f9      	bne.n	80023de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023ea:	f7ff fc4d 	bl	8001c88 <HAL_GetTick>
 80023ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023f0:	e01f      	b.n	8002432 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023f2:	f7ff fc49 	bl	8001c88 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d918      	bls.n	8002432 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d011      	beq.n	8002432 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f043 0210 	orr.w	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e007      	b.n	8002442 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d1d8      	bne.n	80023f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000000 	.word	0x20000000
 8002450:	431bde83 	.word	0x431bde83

08002454 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b01      	cmp	r3, #1
 800246c:	d12e      	bne.n	80024cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800247e:	f7ff fc03 	bl	8001c88 <HAL_GetTick>
 8002482:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002484:	e01b      	b.n	80024be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002486:	f7ff fbff 	bl	8001c88 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d914      	bls.n	80024be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10d      	bne.n	80024be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	f043 0210 	orr.w	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e007      	b.n	80024ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d0dc      	beq.n	8002486 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db0b      	blt.n	8002576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4906      	ldr	r1, [pc, #24]	; (8002580 <__NVIC_EnableIRQ+0x34>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2001      	movs	r0, #1
 800256e:	fa00 f202 	lsl.w	r2, r0, r2
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db0a      	blt.n	80025ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	490c      	ldr	r1, [pc, #48]	; (80025d0 <__NVIC_SetPriority+0x4c>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ac:	e00a      	b.n	80025c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	; (80025d4 <__NVIC_SetPriority+0x50>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3b04      	subs	r3, #4
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	761a      	strb	r2, [r3, #24]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	bf28      	it	cs
 80025f6:	2304      	movcs	r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d902      	bls.n	8002608 <NVIC_EncodePriority+0x30>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b03      	subs	r3, #3
 8002606:	e000      	b.n	800260a <NVIC_EncodePriority+0x32>
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43d9      	mvns	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	4313      	orrs	r3, r2
         );
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800264c:	d301      	bcc.n	8002652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264e:	2301      	movs	r3, #1
 8002650:	e00f      	b.n	8002672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <SysTick_Config+0x40>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265a:	210f      	movs	r1, #15
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f7ff ff90 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <SysTick_Config+0x40>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266a:	4b04      	ldr	r3, [pc, #16]	; (800267c <SysTick_Config+0x40>)
 800266c:	2207      	movs	r2, #7
 800266e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000e010 	.word	0xe000e010

08002680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff2d 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a8:	f7ff ff42 	bl	8002530 <__NVIC_GetPriorityGrouping>
 80026ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7ff ff90 	bl	80025d8 <NVIC_EncodePriority>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff5f 	bl	8002584 <__NVIC_SetPriority>
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff35 	bl	800254c <__NVIC_EnableIRQ>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ffa2 	bl	800263c <SysTick_Config>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b480      	push	{r7}
 8002706:	b08b      	sub	sp, #44	; 0x2c
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002716:	e169      	b.n	80029ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002718:	2201      	movs	r2, #1
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 8158 	bne.w	80029e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a9a      	ldr	r2, [pc, #616]	; (80029a4 <HAL_GPIO_Init+0x2a0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d05e      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002740:	4a98      	ldr	r2, [pc, #608]	; (80029a4 <HAL_GPIO_Init+0x2a0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d875      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002746:	4a98      	ldr	r2, [pc, #608]	; (80029a8 <HAL_GPIO_Init+0x2a4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d058      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 800274c:	4a96      	ldr	r2, [pc, #600]	; (80029a8 <HAL_GPIO_Init+0x2a4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d86f      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002752:	4a96      	ldr	r2, [pc, #600]	; (80029ac <HAL_GPIO_Init+0x2a8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d052      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002758:	4a94      	ldr	r2, [pc, #592]	; (80029ac <HAL_GPIO_Init+0x2a8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d869      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800275e:	4a94      	ldr	r2, [pc, #592]	; (80029b0 <HAL_GPIO_Init+0x2ac>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d04c      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002764:	4a92      	ldr	r2, [pc, #584]	; (80029b0 <HAL_GPIO_Init+0x2ac>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d863      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800276a:	4a92      	ldr	r2, [pc, #584]	; (80029b4 <HAL_GPIO_Init+0x2b0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d046      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002770:	4a90      	ldr	r2, [pc, #576]	; (80029b4 <HAL_GPIO_Init+0x2b0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d85d      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002776:	2b12      	cmp	r3, #18
 8002778:	d82a      	bhi.n	80027d0 <HAL_GPIO_Init+0xcc>
 800277a:	2b12      	cmp	r3, #18
 800277c:	d859      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800277e:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <HAL_GPIO_Init+0x80>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	080027ff 	.word	0x080027ff
 8002788:	080027d9 	.word	0x080027d9
 800278c:	080027eb 	.word	0x080027eb
 8002790:	0800282d 	.word	0x0800282d
 8002794:	08002833 	.word	0x08002833
 8002798:	08002833 	.word	0x08002833
 800279c:	08002833 	.word	0x08002833
 80027a0:	08002833 	.word	0x08002833
 80027a4:	08002833 	.word	0x08002833
 80027a8:	08002833 	.word	0x08002833
 80027ac:	08002833 	.word	0x08002833
 80027b0:	08002833 	.word	0x08002833
 80027b4:	08002833 	.word	0x08002833
 80027b8:	08002833 	.word	0x08002833
 80027bc:	08002833 	.word	0x08002833
 80027c0:	08002833 	.word	0x08002833
 80027c4:	08002833 	.word	0x08002833
 80027c8:	080027e1 	.word	0x080027e1
 80027cc:	080027f5 	.word	0x080027f5
 80027d0:	4a79      	ldr	r2, [pc, #484]	; (80029b8 <HAL_GPIO_Init+0x2b4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027d6:	e02c      	b.n	8002832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	623b      	str	r3, [r7, #32]
          break;
 80027de:	e029      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	3304      	adds	r3, #4
 80027e6:	623b      	str	r3, [r7, #32]
          break;
 80027e8:	e024      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	3308      	adds	r3, #8
 80027f0:	623b      	str	r3, [r7, #32]
          break;
 80027f2:	e01f      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	330c      	adds	r3, #12
 80027fa:	623b      	str	r3, [r7, #32]
          break;
 80027fc:	e01a      	b.n	8002834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002806:	2304      	movs	r3, #4
 8002808:	623b      	str	r3, [r7, #32]
          break;
 800280a:	e013      	b.n	8002834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002814:	2308      	movs	r3, #8
 8002816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	611a      	str	r2, [r3, #16]
          break;
 800281e:	e009      	b.n	8002834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002820:	2308      	movs	r3, #8
 8002822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	615a      	str	r2, [r3, #20]
          break;
 800282a:	e003      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
          break;
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x130>
          break;
 8002832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2bff      	cmp	r3, #255	; 0xff
 8002838:	d801      	bhi.n	800283e <HAL_GPIO_Init+0x13a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	e001      	b.n	8002842 <HAL_GPIO_Init+0x13e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2bff      	cmp	r3, #255	; 0xff
 8002848:	d802      	bhi.n	8002850 <HAL_GPIO_Init+0x14c>
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	e002      	b.n	8002856 <HAL_GPIO_Init+0x152>
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	3b08      	subs	r3, #8
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	210f      	movs	r1, #15
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	401a      	ands	r2, r3
 8002868:	6a39      	ldr	r1, [r7, #32]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	431a      	orrs	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80b1 	beq.w	80029e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002884:	4b4d      	ldr	r3, [pc, #308]	; (80029bc <HAL_GPIO_Init+0x2b8>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <HAL_GPIO_Init+0x2b8>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <HAL_GPIO_Init+0x2b8>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800289c:	4a48      	ldr	r2, [pc, #288]	; (80029c0 <HAL_GPIO_Init+0x2bc>)
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a40      	ldr	r2, [pc, #256]	; (80029c4 <HAL_GPIO_Init+0x2c0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <HAL_GPIO_Init+0x1ec>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3f      	ldr	r2, [pc, #252]	; (80029c8 <HAL_GPIO_Init+0x2c4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00d      	beq.n	80028ec <HAL_GPIO_Init+0x1e8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3e      	ldr	r2, [pc, #248]	; (80029cc <HAL_GPIO_Init+0x2c8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <HAL_GPIO_Init+0x1e4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3d      	ldr	r2, [pc, #244]	; (80029d0 <HAL_GPIO_Init+0x2cc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d101      	bne.n	80028e4 <HAL_GPIO_Init+0x1e0>
 80028e0:	2303      	movs	r3, #3
 80028e2:	e006      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028e4:	2304      	movs	r3, #4
 80028e6:	e004      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e002      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028f0:	2300      	movs	r3, #0
 80028f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f4:	f002 0203 	and.w	r2, r2, #3
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	4093      	lsls	r3, r2
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002902:	492f      	ldr	r1, [pc, #188]	; (80029c0 <HAL_GPIO_Init+0x2bc>)
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	492c      	ldr	r1, [pc, #176]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
 8002928:	e006      	b.n	8002938 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800292a:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	43db      	mvns	r3, r3
 8002932:	4928      	ldr	r1, [pc, #160]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002934:	4013      	ands	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4922      	ldr	r1, [pc, #136]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	43db      	mvns	r3, r3
 800295a:	491e      	ldr	r1, [pc, #120]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800295c:	4013      	ands	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	4918      	ldr	r1, [pc, #96]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	4914      	ldr	r1, [pc, #80]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002984:	4013      	ands	r3, r2
 8002986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d021      	beq.n	80029d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
 80029a0:	e021      	b.n	80029e6 <HAL_GPIO_Init+0x2e2>
 80029a2:	bf00      	nop
 80029a4:	10320000 	.word	0x10320000
 80029a8:	10310000 	.word	0x10310000
 80029ac:	10220000 	.word	0x10220000
 80029b0:	10210000 	.word	0x10210000
 80029b4:	10120000 	.word	0x10120000
 80029b8:	10110000 	.word	0x10110000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40010800 	.word	0x40010800
 80029c8:	40010c00 	.word	0x40010c00
 80029cc:	40011000 	.word	0x40011000
 80029d0:	40011400 	.word	0x40011400
 80029d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_GPIO_Init+0x304>)
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	43db      	mvns	r3, r3
 80029e0:	4909      	ldr	r1, [pc, #36]	; (8002a08 <HAL_GPIO_Init+0x304>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	3301      	adds	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f47f ae8e 	bne.w	8002718 <HAL_GPIO_Init+0x14>
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	372c      	adds	r7, #44	; 0x2c
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40010400 	.word	0x40010400

08002a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1c:	787b      	ldrb	r3, [r7, #1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a28:	e003      	b.n	8002a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	041a      	lsls	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4013      	ands	r3, r2
 8002a54:	041a      	lsls	r2, r3, #16
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	43d9      	mvns	r1, r3
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	400b      	ands	r3, r1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	611a      	str	r2, [r3, #16]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e272      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8087 	beq.w	8002b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a90:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a9c:	4b8f      	ldr	r3, [pc, #572]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d112      	bne.n	8002ace <HAL_RCC_OscConfig+0x5e>
 8002aa8:	4b8c      	ldr	r3, [pc, #560]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d10b      	bne.n	8002ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab6:	4b89      	ldr	r3, [pc, #548]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d06c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x12c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d168      	bne.n	8002b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e24c      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x76>
 8002ad8:	4b80      	ldr	r3, [pc, #512]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a7f      	ldr	r2, [pc, #508]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	e02e      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x98>
 8002aee:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7a      	ldr	r2, [pc, #488]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b78      	ldr	r3, [pc, #480]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0xbc>
 8002b12:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a71      	ldr	r2, [pc, #452]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b2c:	4b6b      	ldr	r3, [pc, #428]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a67      	ldr	r2, [pc, #412]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff f89c 	bl	8001c88 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff f898 	bl	8001c88 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e200      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b5d      	ldr	r3, [pc, #372]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0xe4>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff f888 	bl	8001c88 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7ff f884 	bl	8001c88 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1ec      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x10c>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002baa:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bb6:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d11c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x18c>
 8002bc2:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1c0      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4939      	ldr	r1, [pc, #228]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e03a      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7ff f83d 	bl	8001c88 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7ff f839 	bl	8001c88 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1a1      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4927      	ldr	r1, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f81c 	bl	8001c88 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c54:	f7ff f818 	bl	8001c88 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e180      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03a      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d019      	beq.n	8002cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fffc 	bl	8001c88 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fe fff8 	bl	8001c88 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e160      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f000 fad8 	bl	8003268 <RCC_Delay>
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7fe ffe2 	bl	8001c88 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7fe ffde 	bl	8001c88 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d908      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e146      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	42420000 	.word	0x42420000
 8002ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e9      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a6 	beq.w	8002e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d06:	4b8b      	ldr	r3, [pc, #556]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10d      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a87      	ldr	r2, [pc, #540]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	61d3      	str	r3, [r2, #28]
 8002d1e:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d46:	f7fe ff9f 	bl	8001c88 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7fe ff9b 	bl	8001c88 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	; 0x64
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e103      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x312>
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e02d      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x334>
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	e01c      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x356>
 8002dac:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a60      	ldr	r2, [pc, #384]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	e00b      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d015      	beq.n	8002e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe ff4f 	bl	8001c88 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe ff4b 	bl	8001c88 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0b1      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ee      	beq.n	8002dee <HAL_RCC_OscConfig+0x37e>
 8002e10:	e014      	b.n	8002e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7fe ff39 	bl	8001c88 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fe ff35 	bl	8001c88 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e09b      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ee      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8087 	beq.w	8002f66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d061      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d146      	bne.n	8002efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6c:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe ff09 	bl	8001c88 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe ff05 	bl	8001c88 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e06d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8c:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4921      	ldr	r1, [pc, #132]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a19      	ldr	r1, [r3, #32]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	491b      	ldr	r1, [pc, #108]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fed9 	bl	8001c88 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fed5 	bl	8001c88 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e03d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x46a>
 8002ef8:	e035      	b.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fec2 	bl	8001c88 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe febe 	bl	8001c88 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e026      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x498>
 8002f26:	e01e      	b.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e019      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x500>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d0      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b67      	ldr	r3, [pc, #412]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	4965      	ldr	r1, [pc, #404]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ff2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d040      	beq.n	8003094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d115      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07f      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e073      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06b      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7fe fe10 	bl	8001c88 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe fe0c 	bl	8001c88 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e053      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d210      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	4922      	ldr	r1, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4916      	ldr	r1, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f821 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	490a      	ldr	r1, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1cc>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1d0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fd6e 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40022000 	.word	0x40022000
 8003138:	40021000 	.word	0x40021000
 800313c:	08006d3c 	.word	0x08006d3c
 8003140:	20000000 	.word	0x20000000
 8003144:	20000004 	.word	0x20000004

08003148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	b490      	push	{r4, r7}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800314e:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003150:	1d3c      	adds	r4, r7, #4
 8003152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003158:	f240 2301 	movw	r3, #513	; 0x201
 800315c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b04      	cmp	r3, #4
 8003180:	d002      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x40>
 8003182:	2b08      	cmp	r3, #8
 8003184:	d003      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x46>
 8003186:	e02b      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800318a:	623b      	str	r3, [r7, #32]
      break;
 800318c:	e02b      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	0c9b      	lsrs	r3, r3, #18
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	3328      	adds	r3, #40	; 0x28
 8003198:	443b      	add	r3, r7
 800319a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800319e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d012      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0c5b      	lsrs	r3, r3, #17
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	3328      	adds	r3, #40	; 0x28
 80031b6:	443b      	add	r3, r7
 80031b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80031c2:	fb03 f202 	mul.w	r2, r3, r2
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	e004      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	623b      	str	r3, [r7, #32]
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80031e2:	623b      	str	r3, [r7, #32]
      break;
 80031e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e6:	6a3b      	ldr	r3, [r7, #32]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3728      	adds	r7, #40	; 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc90      	pop	{r4, r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	08006d2c 	.word	0x08006d2c
 80031f8:	40021000 	.word	0x40021000
 80031fc:	007a1200 	.word	0x007a1200
 8003200:	003d0900 	.word	0x003d0900

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <HAL_RCC_GetHCLKFreq+0x10>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	20000000 	.word	0x20000000

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff2 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	; (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	08006d4c 	.word	0x08006d4c

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffde 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	0adb      	lsrs	r3, r3, #11
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	08006d4c 	.word	0x08006d4c

08003268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <RCC_Delay+0x34>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <RCC_Delay+0x38>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a5b      	lsrs	r3, r3, #9
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003284:	bf00      	nop
  }
  while (Delay --);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	60fa      	str	r2, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f9      	bne.n	8003284 <RCC_Delay+0x1c>
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000000 	.word	0x20000000
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d07d      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c4:	4b4f      	ldr	r3, [pc, #316]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d0:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4a4b      	ldr	r2, [pc, #300]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032da:	61d3      	str	r3, [r2, #28]
 80032dc:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e8:	2301      	movs	r3, #1
 80032ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b46      	ldr	r3, [pc, #280]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d118      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f8:	4b43      	ldr	r3, [pc, #268]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a42      	ldr	r2, [pc, #264]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003304:	f7fe fcc0 	bl	8001c88 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	e008      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7fe fcbc 	bl	8001c88 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e06d      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800332a:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02e      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	429a      	cmp	r2, r3
 8003346:	d027      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003348:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003358:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d014      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fe fc8b 	bl	8001c88 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe fc87 	bl	8001c88 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e036      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ee      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4917      	ldr	r1, [pc, #92]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a13      	ldr	r2, [pc, #76]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	490b      	ldr	r1, [pc, #44]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4904      	ldr	r1, [pc, #16]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	42420440 	.word	0x42420440

08003410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e041      	b.n	80034a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fa02 	bl	8001840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f000 fa1e 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d122      	bne.n	800350a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d11b      	bne.n	800350a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 0202 	mvn.w	r2, #2
 80034da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f9b1 	bl	8003858 <HAL_TIM_IC_CaptureCallback>
 80034f6:	e005      	b.n	8003504 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f9a4 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f9b3 	bl	800386a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d122      	bne.n	800355e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d11b      	bne.n	800355e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f06f 0204 	mvn.w	r2, #4
 800352e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f987 	bl	8003858 <HAL_TIM_IC_CaptureCallback>
 800354a:	e005      	b.n	8003558 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f97a 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f989 	bl	800386a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d122      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d11b      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0208 	mvn.w	r2, #8
 8003582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2204      	movs	r2, #4
 8003588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f95d 	bl	8003858 <HAL_TIM_IC_CaptureCallback>
 800359e:	e005      	b.n	80035ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f950 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f95f 	bl	800386a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d122      	bne.n	8003606 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d11b      	bne.n	8003606 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0210 	mvn.w	r2, #16
 80035d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2208      	movs	r2, #8
 80035dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f933 	bl	8003858 <HAL_TIM_IC_CaptureCallback>
 80035f2:	e005      	b.n	8003600 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f926 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f935 	bl	800386a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10e      	bne.n	8003632 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0201 	mvn.w	r2, #1
 800362a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fe f84f 	bl	80016d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b80      	cmp	r3, #128	; 0x80
 800363e:	d10e      	bne.n	800365e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d107      	bne.n	800365e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fa78 	bl	8003b4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d10e      	bne.n	800368a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d107      	bne.n	800368a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f8f9 	bl	800387c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b20      	cmp	r3, #32
 8003696:	d10e      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0220 	mvn.w	r2, #32
 80036ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fa43 	bl	8003b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_ConfigClockSource+0x18>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e0b3      	b.n	800383e <HAL_TIM_ConfigClockSource+0x180>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370e:	d03e      	beq.n	800378e <HAL_TIM_ConfigClockSource+0xd0>
 8003710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003714:	f200 8087 	bhi.w	8003826 <HAL_TIM_ConfigClockSource+0x168>
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371c:	f000 8085 	beq.w	800382a <HAL_TIM_ConfigClockSource+0x16c>
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003724:	d87f      	bhi.n	8003826 <HAL_TIM_ConfigClockSource+0x168>
 8003726:	2b70      	cmp	r3, #112	; 0x70
 8003728:	d01a      	beq.n	8003760 <HAL_TIM_ConfigClockSource+0xa2>
 800372a:	2b70      	cmp	r3, #112	; 0x70
 800372c:	d87b      	bhi.n	8003826 <HAL_TIM_ConfigClockSource+0x168>
 800372e:	2b60      	cmp	r3, #96	; 0x60
 8003730:	d050      	beq.n	80037d4 <HAL_TIM_ConfigClockSource+0x116>
 8003732:	2b60      	cmp	r3, #96	; 0x60
 8003734:	d877      	bhi.n	8003826 <HAL_TIM_ConfigClockSource+0x168>
 8003736:	2b50      	cmp	r3, #80	; 0x50
 8003738:	d03c      	beq.n	80037b4 <HAL_TIM_ConfigClockSource+0xf6>
 800373a:	2b50      	cmp	r3, #80	; 0x50
 800373c:	d873      	bhi.n	8003826 <HAL_TIM_ConfigClockSource+0x168>
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d058      	beq.n	80037f4 <HAL_TIM_ConfigClockSource+0x136>
 8003742:	2b40      	cmp	r3, #64	; 0x40
 8003744:	d86f      	bhi.n	8003826 <HAL_TIM_ConfigClockSource+0x168>
 8003746:	2b30      	cmp	r3, #48	; 0x30
 8003748:	d064      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0x156>
 800374a:	2b30      	cmp	r3, #48	; 0x30
 800374c:	d86b      	bhi.n	8003826 <HAL_TIM_ConfigClockSource+0x168>
 800374e:	2b20      	cmp	r3, #32
 8003750:	d060      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0x156>
 8003752:	2b20      	cmp	r3, #32
 8003754:	d867      	bhi.n	8003826 <HAL_TIM_ConfigClockSource+0x168>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d05c      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0x156>
 800375a:	2b10      	cmp	r3, #16
 800375c:	d05a      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800375e:	e062      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6899      	ldr	r1, [r3, #8]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f000 f967 	bl	8003a42 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003782:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	609a      	str	r2, [r3, #8]
      break;
 800378c:	e04e      	b.n	800382c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f000 f950 	bl	8003a42 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b0:	609a      	str	r2, [r3, #8]
      break;
 80037b2:	e03b      	b.n	800382c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f000 f8c7 	bl	8003954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2150      	movs	r1, #80	; 0x50
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f91e 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 80037d2:	e02b      	b.n	800382c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	461a      	mov	r2, r3
 80037e2:	f000 f8e5 	bl	80039b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2160      	movs	r1, #96	; 0x60
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f90e 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 80037f2:	e01b      	b.n	800382c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	461a      	mov	r2, r3
 8003802:	f000 f8a7 	bl	8003954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2140      	movs	r1, #64	; 0x40
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f8fe 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 8003812:	e00b      	b.n	800382c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f000 f8f5 	bl	8003a0e <TIM_ITRx_SetConfig>
        break;
 8003824:	e002      	b.n	800382c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800382a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
	...

08003890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a29      	ldr	r2, [pc, #164]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_Base_SetConfig+0x30>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d007      	beq.n	80038c0 <TIM_Base_SetConfig+0x30>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a26      	ldr	r2, [pc, #152]	; (800394c <TIM_Base_SetConfig+0xbc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0x30>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a25      	ldr	r2, [pc, #148]	; (8003950 <TIM_Base_SetConfig+0xc0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0x62>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0x62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <TIM_Base_SetConfig+0xbc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0x62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <TIM_Base_SetConfig+0xc0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a07      	ldr	r2, [pc, #28]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d103      	bne.n	8003938 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	615a      	str	r2, [r3, #20]
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800

08003954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	f023 0201 	bic.w	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f023 030a 	bic.w	r3, r3, #10
 8003990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 0210 	bic.w	r2, r3, #16
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	031b      	lsls	r3, r3, #12
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	621a      	str	r2, [r3, #32]
}
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f043 0307 	orr.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	609a      	str	r2, [r3, #8]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b087      	sub	sp, #28
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	021a      	lsls	r2, r3, #8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	609a      	str	r2, [r3, #8]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e046      	b.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a16      	ldr	r2, [pc, #88]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d009      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a10      	ldr	r2, [pc, #64]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d10c      	bne.n	8003b14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	40012c00 	.word	0x40012c00
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800

08003b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e03f      	b.n	8003bf2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd fe9a 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	; 0x24
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f905 	bl	8003db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b08a      	sub	sp, #40	; 0x28
 8003bfe:	af02      	add	r7, sp, #8
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d17c      	bne.n	8003d14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_UART_Transmit+0x2c>
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e075      	b.n	8003d16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Transmit+0x3e>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e06e      	b.n	8003d16 <HAL_UART_Transmit+0x11c>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2221      	movs	r2, #33	; 0x21
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c4e:	f7fe f81b 	bl	8001c88 <HAL_GetTick>
 8003c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	88fa      	ldrh	r2, [r7, #6]
 8003c5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c68:	d108      	bne.n	8003c7c <HAL_UART_Transmit+0x82>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d104      	bne.n	8003c7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	e003      	b.n	8003c84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c8c:	e02a      	b.n	8003ce4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2200      	movs	r2, #0
 8003c96:	2180      	movs	r1, #128	; 0x80
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f840 	bl	8003d1e <UART_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e036      	b.n	8003d16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10b      	bne.n	8003cc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	e007      	b.n	8003cd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1cf      	bne.n	8003c8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2140      	movs	r1, #64	; 0x40
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f810 	bl	8003d1e <UART_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e006      	b.n	8003d16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2e:	e02c      	b.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d028      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d3e:	f7fd ffa3 	bl	8001c88 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d21d      	bcs.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e00f      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	bf0c      	ite	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	2300      	movne	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d0c3      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dee:	f023 030c 	bic.w	r3, r3, #12
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2c      	ldr	r2, [pc, #176]	; (8003ec8 <UART_SetConfig+0x114>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d103      	bne.n	8003e24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7ff fa10 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	e002      	b.n	8003e2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7ff f9f8 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8003e28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009a      	lsls	r2, r3, #2
 8003e34:	441a      	add	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <UART_SetConfig+0x118>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	0119      	lsls	r1, r3, #4
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009a      	lsls	r2, r3, #2
 8003e54:	441a      	add	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e60:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <UART_SetConfig+0x118>)
 8003e62:	fba3 0302 	umull	r0, r3, r3, r2
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	2064      	movs	r0, #100	; 0x64
 8003e6a:	fb00 f303 	mul.w	r3, r0, r3
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	3332      	adds	r3, #50	; 0x32
 8003e74:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <UART_SetConfig+0x118>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e80:	4419      	add	r1, r3
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009a      	lsls	r2, r3, #2
 8003e8c:	441a      	add	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <UART_SetConfig+0x118>)
 8003e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2064      	movs	r0, #100	; 0x64
 8003ea2:	fb00 f303 	mul.w	r3, r0, r3
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	3332      	adds	r3, #50	; 0x32
 8003eac:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <UART_SetConfig+0x118>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	f003 020f 	and.w	r2, r3, #15
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40013800 	.word	0x40013800
 8003ecc:	51eb851f 	.word	0x51eb851f

08003ed0 <__errno>:
 8003ed0:	4b01      	ldr	r3, [pc, #4]	; (8003ed8 <__errno+0x8>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	2000000c 	.word	0x2000000c

08003edc <__libc_init_array>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	2600      	movs	r6, #0
 8003ee0:	4d0c      	ldr	r5, [pc, #48]	; (8003f14 <__libc_init_array+0x38>)
 8003ee2:	4c0d      	ldr	r4, [pc, #52]	; (8003f18 <__libc_init_array+0x3c>)
 8003ee4:	1b64      	subs	r4, r4, r5
 8003ee6:	10a4      	asrs	r4, r4, #2
 8003ee8:	42a6      	cmp	r6, r4
 8003eea:	d109      	bne.n	8003f00 <__libc_init_array+0x24>
 8003eec:	f002 fefc 	bl	8006ce8 <_init>
 8003ef0:	2600      	movs	r6, #0
 8003ef2:	4d0a      	ldr	r5, [pc, #40]	; (8003f1c <__libc_init_array+0x40>)
 8003ef4:	4c0a      	ldr	r4, [pc, #40]	; (8003f20 <__libc_init_array+0x44>)
 8003ef6:	1b64      	subs	r4, r4, r5
 8003ef8:	10a4      	asrs	r4, r4, #2
 8003efa:	42a6      	cmp	r6, r4
 8003efc:	d105      	bne.n	8003f0a <__libc_init_array+0x2e>
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f04:	4798      	blx	r3
 8003f06:	3601      	adds	r6, #1
 8003f08:	e7ee      	b.n	8003ee8 <__libc_init_array+0xc>
 8003f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0e:	4798      	blx	r3
 8003f10:	3601      	adds	r6, #1
 8003f12:	e7f2      	b.n	8003efa <__libc_init_array+0x1e>
 8003f14:	0800712c 	.word	0x0800712c
 8003f18:	0800712c 	.word	0x0800712c
 8003f1c:	0800712c 	.word	0x0800712c
 8003f20:	08007130 	.word	0x08007130

08003f24 <memset>:
 8003f24:	4603      	mov	r3, r0
 8003f26:	4402      	add	r2, r0
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d100      	bne.n	8003f2e <memset+0xa>
 8003f2c:	4770      	bx	lr
 8003f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f32:	e7f9      	b.n	8003f28 <memset+0x4>

08003f34 <__cvt>:
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3a:	461f      	mov	r7, r3
 8003f3c:	bfbb      	ittet	lt
 8003f3e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f42:	461f      	movlt	r7, r3
 8003f44:	2300      	movge	r3, #0
 8003f46:	232d      	movlt	r3, #45	; 0x2d
 8003f48:	b088      	sub	sp, #32
 8003f4a:	4614      	mov	r4, r2
 8003f4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f50:	7013      	strb	r3, [r2, #0]
 8003f52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f54:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003f58:	f023 0820 	bic.w	r8, r3, #32
 8003f5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f60:	d005      	beq.n	8003f6e <__cvt+0x3a>
 8003f62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f66:	d100      	bne.n	8003f6a <__cvt+0x36>
 8003f68:	3501      	adds	r5, #1
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e000      	b.n	8003f70 <__cvt+0x3c>
 8003f6e:	2303      	movs	r3, #3
 8003f70:	aa07      	add	r2, sp, #28
 8003f72:	9204      	str	r2, [sp, #16]
 8003f74:	aa06      	add	r2, sp, #24
 8003f76:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f7a:	e9cd 3500 	strd	r3, r5, [sp]
 8003f7e:	4622      	mov	r2, r4
 8003f80:	463b      	mov	r3, r7
 8003f82:	f000 fce5 	bl	8004950 <_dtoa_r>
 8003f86:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f8a:	4606      	mov	r6, r0
 8003f8c:	d102      	bne.n	8003f94 <__cvt+0x60>
 8003f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f90:	07db      	lsls	r3, r3, #31
 8003f92:	d522      	bpl.n	8003fda <__cvt+0xa6>
 8003f94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f98:	eb06 0905 	add.w	r9, r6, r5
 8003f9c:	d110      	bne.n	8003fc0 <__cvt+0x8c>
 8003f9e:	7833      	ldrb	r3, [r6, #0]
 8003fa0:	2b30      	cmp	r3, #48	; 0x30
 8003fa2:	d10a      	bne.n	8003fba <__cvt+0x86>
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	4620      	mov	r0, r4
 8003faa:	4639      	mov	r1, r7
 8003fac:	f7fc fcfc 	bl	80009a8 <__aeabi_dcmpeq>
 8003fb0:	b918      	cbnz	r0, 8003fba <__cvt+0x86>
 8003fb2:	f1c5 0501 	rsb	r5, r5, #1
 8003fb6:	f8ca 5000 	str.w	r5, [sl]
 8003fba:	f8da 3000 	ldr.w	r3, [sl]
 8003fbe:	4499      	add	r9, r3
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	4639      	mov	r1, r7
 8003fc8:	f7fc fcee 	bl	80009a8 <__aeabi_dcmpeq>
 8003fcc:	b108      	cbz	r0, 8003fd2 <__cvt+0x9e>
 8003fce:	f8cd 901c 	str.w	r9, [sp, #28]
 8003fd2:	2230      	movs	r2, #48	; 0x30
 8003fd4:	9b07      	ldr	r3, [sp, #28]
 8003fd6:	454b      	cmp	r3, r9
 8003fd8:	d307      	bcc.n	8003fea <__cvt+0xb6>
 8003fda:	4630      	mov	r0, r6
 8003fdc:	9b07      	ldr	r3, [sp, #28]
 8003fde:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003fe0:	1b9b      	subs	r3, r3, r6
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	b008      	add	sp, #32
 8003fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fea:	1c59      	adds	r1, r3, #1
 8003fec:	9107      	str	r1, [sp, #28]
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	e7f0      	b.n	8003fd4 <__cvt+0xa0>

08003ff2 <__exponent>:
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	f803 2b02 	strb.w	r2, [r3], #2
 8003ffc:	bfb6      	itet	lt
 8003ffe:	222d      	movlt	r2, #45	; 0x2d
 8004000:	222b      	movge	r2, #43	; 0x2b
 8004002:	4249      	neglt	r1, r1
 8004004:	2909      	cmp	r1, #9
 8004006:	7042      	strb	r2, [r0, #1]
 8004008:	dd2b      	ble.n	8004062 <__exponent+0x70>
 800400a:	f10d 0407 	add.w	r4, sp, #7
 800400e:	46a4      	mov	ip, r4
 8004010:	270a      	movs	r7, #10
 8004012:	fb91 f6f7 	sdiv	r6, r1, r7
 8004016:	460a      	mov	r2, r1
 8004018:	46a6      	mov	lr, r4
 800401a:	fb07 1516 	mls	r5, r7, r6, r1
 800401e:	2a63      	cmp	r2, #99	; 0x63
 8004020:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004024:	4631      	mov	r1, r6
 8004026:	f104 34ff 	add.w	r4, r4, #4294967295
 800402a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800402e:	dcf0      	bgt.n	8004012 <__exponent+0x20>
 8004030:	3130      	adds	r1, #48	; 0x30
 8004032:	f1ae 0502 	sub.w	r5, lr, #2
 8004036:	f804 1c01 	strb.w	r1, [r4, #-1]
 800403a:	4629      	mov	r1, r5
 800403c:	1c44      	adds	r4, r0, #1
 800403e:	4561      	cmp	r1, ip
 8004040:	d30a      	bcc.n	8004058 <__exponent+0x66>
 8004042:	f10d 0209 	add.w	r2, sp, #9
 8004046:	eba2 020e 	sub.w	r2, r2, lr
 800404a:	4565      	cmp	r5, ip
 800404c:	bf88      	it	hi
 800404e:	2200      	movhi	r2, #0
 8004050:	4413      	add	r3, r2
 8004052:	1a18      	subs	r0, r3, r0
 8004054:	b003      	add	sp, #12
 8004056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004058:	f811 2b01 	ldrb.w	r2, [r1], #1
 800405c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004060:	e7ed      	b.n	800403e <__exponent+0x4c>
 8004062:	2330      	movs	r3, #48	; 0x30
 8004064:	3130      	adds	r1, #48	; 0x30
 8004066:	7083      	strb	r3, [r0, #2]
 8004068:	70c1      	strb	r1, [r0, #3]
 800406a:	1d03      	adds	r3, r0, #4
 800406c:	e7f1      	b.n	8004052 <__exponent+0x60>
	...

08004070 <_printf_float>:
 8004070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004074:	b091      	sub	sp, #68	; 0x44
 8004076:	460c      	mov	r4, r1
 8004078:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800407c:	4616      	mov	r6, r2
 800407e:	461f      	mov	r7, r3
 8004080:	4605      	mov	r5, r0
 8004082:	f001 fa53 	bl	800552c <_localeconv_r>
 8004086:	6803      	ldr	r3, [r0, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	9309      	str	r3, [sp, #36]	; 0x24
 800408c:	f7fc f860 	bl	8000150 <strlen>
 8004090:	2300      	movs	r3, #0
 8004092:	930e      	str	r3, [sp, #56]	; 0x38
 8004094:	f8d8 3000 	ldr.w	r3, [r8]
 8004098:	900a      	str	r0, [sp, #40]	; 0x28
 800409a:	3307      	adds	r3, #7
 800409c:	f023 0307 	bic.w	r3, r3, #7
 80040a0:	f103 0208 	add.w	r2, r3, #8
 80040a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80040a8:	f8d4 b000 	ldr.w	fp, [r4]
 80040ac:	f8c8 2000 	str.w	r2, [r8]
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040b8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80040bc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80040c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295
 80040c6:	4640      	mov	r0, r8
 80040c8:	4b9c      	ldr	r3, [pc, #624]	; (800433c <_printf_float+0x2cc>)
 80040ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040cc:	f7fc fc9e 	bl	8000a0c <__aeabi_dcmpun>
 80040d0:	bb70      	cbnz	r0, 8004130 <_printf_float+0xc0>
 80040d2:	f04f 32ff 	mov.w	r2, #4294967295
 80040d6:	4640      	mov	r0, r8
 80040d8:	4b98      	ldr	r3, [pc, #608]	; (800433c <_printf_float+0x2cc>)
 80040da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040dc:	f7fc fc78 	bl	80009d0 <__aeabi_dcmple>
 80040e0:	bb30      	cbnz	r0, 8004130 <_printf_float+0xc0>
 80040e2:	2200      	movs	r2, #0
 80040e4:	2300      	movs	r3, #0
 80040e6:	4640      	mov	r0, r8
 80040e8:	4651      	mov	r1, sl
 80040ea:	f7fc fc67 	bl	80009bc <__aeabi_dcmplt>
 80040ee:	b110      	cbz	r0, 80040f6 <_printf_float+0x86>
 80040f0:	232d      	movs	r3, #45	; 0x2d
 80040f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040f6:	4b92      	ldr	r3, [pc, #584]	; (8004340 <_printf_float+0x2d0>)
 80040f8:	4892      	ldr	r0, [pc, #584]	; (8004344 <_printf_float+0x2d4>)
 80040fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80040fe:	bf94      	ite	ls
 8004100:	4698      	movls	r8, r3
 8004102:	4680      	movhi	r8, r0
 8004104:	2303      	movs	r3, #3
 8004106:	f04f 0a00 	mov.w	sl, #0
 800410a:	6123      	str	r3, [r4, #16]
 800410c:	f02b 0304 	bic.w	r3, fp, #4
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	4633      	mov	r3, r6
 8004114:	4621      	mov	r1, r4
 8004116:	4628      	mov	r0, r5
 8004118:	9700      	str	r7, [sp, #0]
 800411a:	aa0f      	add	r2, sp, #60	; 0x3c
 800411c:	f000 f9d4 	bl	80044c8 <_printf_common>
 8004120:	3001      	adds	r0, #1
 8004122:	f040 8090 	bne.w	8004246 <_printf_float+0x1d6>
 8004126:	f04f 30ff 	mov.w	r0, #4294967295
 800412a:	b011      	add	sp, #68	; 0x44
 800412c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004130:	4642      	mov	r2, r8
 8004132:	4653      	mov	r3, sl
 8004134:	4640      	mov	r0, r8
 8004136:	4651      	mov	r1, sl
 8004138:	f7fc fc68 	bl	8000a0c <__aeabi_dcmpun>
 800413c:	b148      	cbz	r0, 8004152 <_printf_float+0xe2>
 800413e:	f1ba 0f00 	cmp.w	sl, #0
 8004142:	bfb8      	it	lt
 8004144:	232d      	movlt	r3, #45	; 0x2d
 8004146:	4880      	ldr	r0, [pc, #512]	; (8004348 <_printf_float+0x2d8>)
 8004148:	bfb8      	it	lt
 800414a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800414e:	4b7f      	ldr	r3, [pc, #508]	; (800434c <_printf_float+0x2dc>)
 8004150:	e7d3      	b.n	80040fa <_printf_float+0x8a>
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	d142      	bne.n	80041e2 <_printf_float+0x172>
 800415c:	2306      	movs	r3, #6
 800415e:	6063      	str	r3, [r4, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	9206      	str	r2, [sp, #24]
 8004164:	aa0e      	add	r2, sp, #56	; 0x38
 8004166:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800416a:	aa0d      	add	r2, sp, #52	; 0x34
 800416c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004170:	9203      	str	r2, [sp, #12]
 8004172:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004176:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800417a:	6023      	str	r3, [r4, #0]
 800417c:	6863      	ldr	r3, [r4, #4]
 800417e:	4642      	mov	r2, r8
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	4628      	mov	r0, r5
 8004184:	4653      	mov	r3, sl
 8004186:	910b      	str	r1, [sp, #44]	; 0x2c
 8004188:	f7ff fed4 	bl	8003f34 <__cvt>
 800418c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800418e:	4680      	mov	r8, r0
 8004190:	2947      	cmp	r1, #71	; 0x47
 8004192:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004194:	d108      	bne.n	80041a8 <_printf_float+0x138>
 8004196:	1cc8      	adds	r0, r1, #3
 8004198:	db02      	blt.n	80041a0 <_printf_float+0x130>
 800419a:	6863      	ldr	r3, [r4, #4]
 800419c:	4299      	cmp	r1, r3
 800419e:	dd40      	ble.n	8004222 <_printf_float+0x1b2>
 80041a0:	f1a9 0902 	sub.w	r9, r9, #2
 80041a4:	fa5f f989 	uxtb.w	r9, r9
 80041a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80041ac:	d81f      	bhi.n	80041ee <_printf_float+0x17e>
 80041ae:	464a      	mov	r2, r9
 80041b0:	3901      	subs	r1, #1
 80041b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041b6:	910d      	str	r1, [sp, #52]	; 0x34
 80041b8:	f7ff ff1b 	bl	8003ff2 <__exponent>
 80041bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041be:	4682      	mov	sl, r0
 80041c0:	1813      	adds	r3, r2, r0
 80041c2:	2a01      	cmp	r2, #1
 80041c4:	6123      	str	r3, [r4, #16]
 80041c6:	dc02      	bgt.n	80041ce <_printf_float+0x15e>
 80041c8:	6822      	ldr	r2, [r4, #0]
 80041ca:	07d2      	lsls	r2, r2, #31
 80041cc:	d501      	bpl.n	80041d2 <_printf_float+0x162>
 80041ce:	3301      	adds	r3, #1
 80041d0:	6123      	str	r3, [r4, #16]
 80041d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d09b      	beq.n	8004112 <_printf_float+0xa2>
 80041da:	232d      	movs	r3, #45	; 0x2d
 80041dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e0:	e797      	b.n	8004112 <_printf_float+0xa2>
 80041e2:	2947      	cmp	r1, #71	; 0x47
 80041e4:	d1bc      	bne.n	8004160 <_printf_float+0xf0>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1ba      	bne.n	8004160 <_printf_float+0xf0>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e7b7      	b.n	800415e <_printf_float+0xee>
 80041ee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80041f2:	d118      	bne.n	8004226 <_printf_float+0x1b6>
 80041f4:	2900      	cmp	r1, #0
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	dd0b      	ble.n	8004212 <_printf_float+0x1a2>
 80041fa:	6121      	str	r1, [r4, #16]
 80041fc:	b913      	cbnz	r3, 8004204 <_printf_float+0x194>
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	07d0      	lsls	r0, r2, #31
 8004202:	d502      	bpl.n	800420a <_printf_float+0x19a>
 8004204:	3301      	adds	r3, #1
 8004206:	440b      	add	r3, r1
 8004208:	6123      	str	r3, [r4, #16]
 800420a:	f04f 0a00 	mov.w	sl, #0
 800420e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004210:	e7df      	b.n	80041d2 <_printf_float+0x162>
 8004212:	b913      	cbnz	r3, 800421a <_printf_float+0x1aa>
 8004214:	6822      	ldr	r2, [r4, #0]
 8004216:	07d2      	lsls	r2, r2, #31
 8004218:	d501      	bpl.n	800421e <_printf_float+0x1ae>
 800421a:	3302      	adds	r3, #2
 800421c:	e7f4      	b.n	8004208 <_printf_float+0x198>
 800421e:	2301      	movs	r3, #1
 8004220:	e7f2      	b.n	8004208 <_printf_float+0x198>
 8004222:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004228:	4299      	cmp	r1, r3
 800422a:	db05      	blt.n	8004238 <_printf_float+0x1c8>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	6121      	str	r1, [r4, #16]
 8004230:	07d8      	lsls	r0, r3, #31
 8004232:	d5ea      	bpl.n	800420a <_printf_float+0x19a>
 8004234:	1c4b      	adds	r3, r1, #1
 8004236:	e7e7      	b.n	8004208 <_printf_float+0x198>
 8004238:	2900      	cmp	r1, #0
 800423a:	bfcc      	ite	gt
 800423c:	2201      	movgt	r2, #1
 800423e:	f1c1 0202 	rsble	r2, r1, #2
 8004242:	4413      	add	r3, r2
 8004244:	e7e0      	b.n	8004208 <_printf_float+0x198>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	055a      	lsls	r2, r3, #21
 800424a:	d407      	bmi.n	800425c <_printf_float+0x1ec>
 800424c:	6923      	ldr	r3, [r4, #16]
 800424e:	4642      	mov	r2, r8
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	d12b      	bne.n	80042b2 <_printf_float+0x242>
 800425a:	e764      	b.n	8004126 <_printf_float+0xb6>
 800425c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004260:	f240 80dd 	bls.w	800441e <_printf_float+0x3ae>
 8004264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004268:	2200      	movs	r2, #0
 800426a:	2300      	movs	r3, #0
 800426c:	f7fc fb9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004270:	2800      	cmp	r0, #0
 8004272:	d033      	beq.n	80042dc <_printf_float+0x26c>
 8004274:	2301      	movs	r3, #1
 8004276:	4631      	mov	r1, r6
 8004278:	4628      	mov	r0, r5
 800427a:	4a35      	ldr	r2, [pc, #212]	; (8004350 <_printf_float+0x2e0>)
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	f43f af51 	beq.w	8004126 <_printf_float+0xb6>
 8004284:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004288:	429a      	cmp	r2, r3
 800428a:	db02      	blt.n	8004292 <_printf_float+0x222>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	07d8      	lsls	r0, r3, #31
 8004290:	d50f      	bpl.n	80042b2 <_printf_float+0x242>
 8004292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004296:	4631      	mov	r1, r6
 8004298:	4628      	mov	r0, r5
 800429a:	47b8      	blx	r7
 800429c:	3001      	adds	r0, #1
 800429e:	f43f af42 	beq.w	8004126 <_printf_float+0xb6>
 80042a2:	f04f 0800 	mov.w	r8, #0
 80042a6:	f104 091a 	add.w	r9, r4, #26
 80042aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042ac:	3b01      	subs	r3, #1
 80042ae:	4543      	cmp	r3, r8
 80042b0:	dc09      	bgt.n	80042c6 <_printf_float+0x256>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	079b      	lsls	r3, r3, #30
 80042b6:	f100 8102 	bmi.w	80044be <_printf_float+0x44e>
 80042ba:	68e0      	ldr	r0, [r4, #12]
 80042bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042be:	4298      	cmp	r0, r3
 80042c0:	bfb8      	it	lt
 80042c2:	4618      	movlt	r0, r3
 80042c4:	e731      	b.n	800412a <_printf_float+0xba>
 80042c6:	2301      	movs	r3, #1
 80042c8:	464a      	mov	r2, r9
 80042ca:	4631      	mov	r1, r6
 80042cc:	4628      	mov	r0, r5
 80042ce:	47b8      	blx	r7
 80042d0:	3001      	adds	r0, #1
 80042d2:	f43f af28 	beq.w	8004126 <_printf_float+0xb6>
 80042d6:	f108 0801 	add.w	r8, r8, #1
 80042da:	e7e6      	b.n	80042aa <_printf_float+0x23a>
 80042dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042de:	2b00      	cmp	r3, #0
 80042e0:	dc38      	bgt.n	8004354 <_printf_float+0x2e4>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4631      	mov	r1, r6
 80042e6:	4628      	mov	r0, r5
 80042e8:	4a19      	ldr	r2, [pc, #100]	; (8004350 <_printf_float+0x2e0>)
 80042ea:	47b8      	blx	r7
 80042ec:	3001      	adds	r0, #1
 80042ee:	f43f af1a 	beq.w	8004126 <_printf_float+0xb6>
 80042f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042f6:	4313      	orrs	r3, r2
 80042f8:	d102      	bne.n	8004300 <_printf_float+0x290>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	07d9      	lsls	r1, r3, #31
 80042fe:	d5d8      	bpl.n	80042b2 <_printf_float+0x242>
 8004300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004304:	4631      	mov	r1, r6
 8004306:	4628      	mov	r0, r5
 8004308:	47b8      	blx	r7
 800430a:	3001      	adds	r0, #1
 800430c:	f43f af0b 	beq.w	8004126 <_printf_float+0xb6>
 8004310:	f04f 0900 	mov.w	r9, #0
 8004314:	f104 0a1a 	add.w	sl, r4, #26
 8004318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800431a:	425b      	negs	r3, r3
 800431c:	454b      	cmp	r3, r9
 800431e:	dc01      	bgt.n	8004324 <_printf_float+0x2b4>
 8004320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004322:	e794      	b.n	800424e <_printf_float+0x1de>
 8004324:	2301      	movs	r3, #1
 8004326:	4652      	mov	r2, sl
 8004328:	4631      	mov	r1, r6
 800432a:	4628      	mov	r0, r5
 800432c:	47b8      	blx	r7
 800432e:	3001      	adds	r0, #1
 8004330:	f43f aef9 	beq.w	8004126 <_printf_float+0xb6>
 8004334:	f109 0901 	add.w	r9, r9, #1
 8004338:	e7ee      	b.n	8004318 <_printf_float+0x2a8>
 800433a:	bf00      	nop
 800433c:	7fefffff 	.word	0x7fefffff
 8004340:	08006d58 	.word	0x08006d58
 8004344:	08006d5c 	.word	0x08006d5c
 8004348:	08006d64 	.word	0x08006d64
 800434c:	08006d60 	.word	0x08006d60
 8004350:	08006d68 	.word	0x08006d68
 8004354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004358:	429a      	cmp	r2, r3
 800435a:	bfa8      	it	ge
 800435c:	461a      	movge	r2, r3
 800435e:	2a00      	cmp	r2, #0
 8004360:	4691      	mov	r9, r2
 8004362:	dc37      	bgt.n	80043d4 <_printf_float+0x364>
 8004364:	f04f 0b00 	mov.w	fp, #0
 8004368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800436c:	f104 021a 	add.w	r2, r4, #26
 8004370:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004374:	ebaa 0309 	sub.w	r3, sl, r9
 8004378:	455b      	cmp	r3, fp
 800437a:	dc33      	bgt.n	80043e4 <_printf_float+0x374>
 800437c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004380:	429a      	cmp	r2, r3
 8004382:	db3b      	blt.n	80043fc <_printf_float+0x38c>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	07da      	lsls	r2, r3, #31
 8004388:	d438      	bmi.n	80043fc <_printf_float+0x38c>
 800438a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800438c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800438e:	eba3 020a 	sub.w	r2, r3, sl
 8004392:	eba3 0901 	sub.w	r9, r3, r1
 8004396:	4591      	cmp	r9, r2
 8004398:	bfa8      	it	ge
 800439a:	4691      	movge	r9, r2
 800439c:	f1b9 0f00 	cmp.w	r9, #0
 80043a0:	dc34      	bgt.n	800440c <_printf_float+0x39c>
 80043a2:	f04f 0800 	mov.w	r8, #0
 80043a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043aa:	f104 0a1a 	add.w	sl, r4, #26
 80043ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	eba3 0309 	sub.w	r3, r3, r9
 80043b8:	4543      	cmp	r3, r8
 80043ba:	f77f af7a 	ble.w	80042b2 <_printf_float+0x242>
 80043be:	2301      	movs	r3, #1
 80043c0:	4652      	mov	r2, sl
 80043c2:	4631      	mov	r1, r6
 80043c4:	4628      	mov	r0, r5
 80043c6:	47b8      	blx	r7
 80043c8:	3001      	adds	r0, #1
 80043ca:	f43f aeac 	beq.w	8004126 <_printf_float+0xb6>
 80043ce:	f108 0801 	add.w	r8, r8, #1
 80043d2:	e7ec      	b.n	80043ae <_printf_float+0x33e>
 80043d4:	4613      	mov	r3, r2
 80043d6:	4631      	mov	r1, r6
 80043d8:	4642      	mov	r2, r8
 80043da:	4628      	mov	r0, r5
 80043dc:	47b8      	blx	r7
 80043de:	3001      	adds	r0, #1
 80043e0:	d1c0      	bne.n	8004364 <_printf_float+0x2f4>
 80043e2:	e6a0      	b.n	8004126 <_printf_float+0xb6>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4631      	mov	r1, r6
 80043e8:	4628      	mov	r0, r5
 80043ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80043ec:	47b8      	blx	r7
 80043ee:	3001      	adds	r0, #1
 80043f0:	f43f ae99 	beq.w	8004126 <_printf_float+0xb6>
 80043f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043f6:	f10b 0b01 	add.w	fp, fp, #1
 80043fa:	e7b9      	b.n	8004370 <_printf_float+0x300>
 80043fc:	4631      	mov	r1, r6
 80043fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004402:	4628      	mov	r0, r5
 8004404:	47b8      	blx	r7
 8004406:	3001      	adds	r0, #1
 8004408:	d1bf      	bne.n	800438a <_printf_float+0x31a>
 800440a:	e68c      	b.n	8004126 <_printf_float+0xb6>
 800440c:	464b      	mov	r3, r9
 800440e:	4631      	mov	r1, r6
 8004410:	4628      	mov	r0, r5
 8004412:	eb08 020a 	add.w	r2, r8, sl
 8004416:	47b8      	blx	r7
 8004418:	3001      	adds	r0, #1
 800441a:	d1c2      	bne.n	80043a2 <_printf_float+0x332>
 800441c:	e683      	b.n	8004126 <_printf_float+0xb6>
 800441e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004420:	2a01      	cmp	r2, #1
 8004422:	dc01      	bgt.n	8004428 <_printf_float+0x3b8>
 8004424:	07db      	lsls	r3, r3, #31
 8004426:	d537      	bpl.n	8004498 <_printf_float+0x428>
 8004428:	2301      	movs	r3, #1
 800442a:	4642      	mov	r2, r8
 800442c:	4631      	mov	r1, r6
 800442e:	4628      	mov	r0, r5
 8004430:	47b8      	blx	r7
 8004432:	3001      	adds	r0, #1
 8004434:	f43f ae77 	beq.w	8004126 <_printf_float+0xb6>
 8004438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800443c:	4631      	mov	r1, r6
 800443e:	4628      	mov	r0, r5
 8004440:	47b8      	blx	r7
 8004442:	3001      	adds	r0, #1
 8004444:	f43f ae6f 	beq.w	8004126 <_printf_float+0xb6>
 8004448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800444c:	2200      	movs	r2, #0
 800444e:	2300      	movs	r3, #0
 8004450:	f7fc faaa 	bl	80009a8 <__aeabi_dcmpeq>
 8004454:	b9d8      	cbnz	r0, 800448e <_printf_float+0x41e>
 8004456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004458:	f108 0201 	add.w	r2, r8, #1
 800445c:	3b01      	subs	r3, #1
 800445e:	4631      	mov	r1, r6
 8004460:	4628      	mov	r0, r5
 8004462:	47b8      	blx	r7
 8004464:	3001      	adds	r0, #1
 8004466:	d10e      	bne.n	8004486 <_printf_float+0x416>
 8004468:	e65d      	b.n	8004126 <_printf_float+0xb6>
 800446a:	2301      	movs	r3, #1
 800446c:	464a      	mov	r2, r9
 800446e:	4631      	mov	r1, r6
 8004470:	4628      	mov	r0, r5
 8004472:	47b8      	blx	r7
 8004474:	3001      	adds	r0, #1
 8004476:	f43f ae56 	beq.w	8004126 <_printf_float+0xb6>
 800447a:	f108 0801 	add.w	r8, r8, #1
 800447e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004480:	3b01      	subs	r3, #1
 8004482:	4543      	cmp	r3, r8
 8004484:	dcf1      	bgt.n	800446a <_printf_float+0x3fa>
 8004486:	4653      	mov	r3, sl
 8004488:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800448c:	e6e0      	b.n	8004250 <_printf_float+0x1e0>
 800448e:	f04f 0800 	mov.w	r8, #0
 8004492:	f104 091a 	add.w	r9, r4, #26
 8004496:	e7f2      	b.n	800447e <_printf_float+0x40e>
 8004498:	2301      	movs	r3, #1
 800449a:	4642      	mov	r2, r8
 800449c:	e7df      	b.n	800445e <_printf_float+0x3ee>
 800449e:	2301      	movs	r3, #1
 80044a0:	464a      	mov	r2, r9
 80044a2:	4631      	mov	r1, r6
 80044a4:	4628      	mov	r0, r5
 80044a6:	47b8      	blx	r7
 80044a8:	3001      	adds	r0, #1
 80044aa:	f43f ae3c 	beq.w	8004126 <_printf_float+0xb6>
 80044ae:	f108 0801 	add.w	r8, r8, #1
 80044b2:	68e3      	ldr	r3, [r4, #12]
 80044b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80044b6:	1a5b      	subs	r3, r3, r1
 80044b8:	4543      	cmp	r3, r8
 80044ba:	dcf0      	bgt.n	800449e <_printf_float+0x42e>
 80044bc:	e6fd      	b.n	80042ba <_printf_float+0x24a>
 80044be:	f04f 0800 	mov.w	r8, #0
 80044c2:	f104 0919 	add.w	r9, r4, #25
 80044c6:	e7f4      	b.n	80044b2 <_printf_float+0x442>

080044c8 <_printf_common>:
 80044c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044cc:	4616      	mov	r6, r2
 80044ce:	4699      	mov	r9, r3
 80044d0:	688a      	ldr	r2, [r1, #8]
 80044d2:	690b      	ldr	r3, [r1, #16]
 80044d4:	4607      	mov	r7, r0
 80044d6:	4293      	cmp	r3, r2
 80044d8:	bfb8      	it	lt
 80044da:	4613      	movlt	r3, r2
 80044dc:	6033      	str	r3, [r6, #0]
 80044de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044e2:	460c      	mov	r4, r1
 80044e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044e8:	b10a      	cbz	r2, 80044ee <_printf_common+0x26>
 80044ea:	3301      	adds	r3, #1
 80044ec:	6033      	str	r3, [r6, #0]
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	0699      	lsls	r1, r3, #26
 80044f2:	bf42      	ittt	mi
 80044f4:	6833      	ldrmi	r3, [r6, #0]
 80044f6:	3302      	addmi	r3, #2
 80044f8:	6033      	strmi	r3, [r6, #0]
 80044fa:	6825      	ldr	r5, [r4, #0]
 80044fc:	f015 0506 	ands.w	r5, r5, #6
 8004500:	d106      	bne.n	8004510 <_printf_common+0x48>
 8004502:	f104 0a19 	add.w	sl, r4, #25
 8004506:	68e3      	ldr	r3, [r4, #12]
 8004508:	6832      	ldr	r2, [r6, #0]
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	42ab      	cmp	r3, r5
 800450e:	dc28      	bgt.n	8004562 <_printf_common+0x9a>
 8004510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004514:	1e13      	subs	r3, r2, #0
 8004516:	6822      	ldr	r2, [r4, #0]
 8004518:	bf18      	it	ne
 800451a:	2301      	movne	r3, #1
 800451c:	0692      	lsls	r2, r2, #26
 800451e:	d42d      	bmi.n	800457c <_printf_common+0xb4>
 8004520:	4649      	mov	r1, r9
 8004522:	4638      	mov	r0, r7
 8004524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004528:	47c0      	blx	r8
 800452a:	3001      	adds	r0, #1
 800452c:	d020      	beq.n	8004570 <_printf_common+0xa8>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	68e5      	ldr	r5, [r4, #12]
 8004532:	f003 0306 	and.w	r3, r3, #6
 8004536:	2b04      	cmp	r3, #4
 8004538:	bf18      	it	ne
 800453a:	2500      	movne	r5, #0
 800453c:	6832      	ldr	r2, [r6, #0]
 800453e:	f04f 0600 	mov.w	r6, #0
 8004542:	68a3      	ldr	r3, [r4, #8]
 8004544:	bf08      	it	eq
 8004546:	1aad      	subeq	r5, r5, r2
 8004548:	6922      	ldr	r2, [r4, #16]
 800454a:	bf08      	it	eq
 800454c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004550:	4293      	cmp	r3, r2
 8004552:	bfc4      	itt	gt
 8004554:	1a9b      	subgt	r3, r3, r2
 8004556:	18ed      	addgt	r5, r5, r3
 8004558:	341a      	adds	r4, #26
 800455a:	42b5      	cmp	r5, r6
 800455c:	d11a      	bne.n	8004594 <_printf_common+0xcc>
 800455e:	2000      	movs	r0, #0
 8004560:	e008      	b.n	8004574 <_printf_common+0xac>
 8004562:	2301      	movs	r3, #1
 8004564:	4652      	mov	r2, sl
 8004566:	4649      	mov	r1, r9
 8004568:	4638      	mov	r0, r7
 800456a:	47c0      	blx	r8
 800456c:	3001      	adds	r0, #1
 800456e:	d103      	bne.n	8004578 <_printf_common+0xb0>
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004578:	3501      	adds	r5, #1
 800457a:	e7c4      	b.n	8004506 <_printf_common+0x3e>
 800457c:	2030      	movs	r0, #48	; 0x30
 800457e:	18e1      	adds	r1, r4, r3
 8004580:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800458a:	4422      	add	r2, r4
 800458c:	3302      	adds	r3, #2
 800458e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004592:	e7c5      	b.n	8004520 <_printf_common+0x58>
 8004594:	2301      	movs	r3, #1
 8004596:	4622      	mov	r2, r4
 8004598:	4649      	mov	r1, r9
 800459a:	4638      	mov	r0, r7
 800459c:	47c0      	blx	r8
 800459e:	3001      	adds	r0, #1
 80045a0:	d0e6      	beq.n	8004570 <_printf_common+0xa8>
 80045a2:	3601      	adds	r6, #1
 80045a4:	e7d9      	b.n	800455a <_printf_common+0x92>
	...

080045a8 <_printf_i>:
 80045a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045ac:	7e0f      	ldrb	r7, [r1, #24]
 80045ae:	4691      	mov	r9, r2
 80045b0:	2f78      	cmp	r7, #120	; 0x78
 80045b2:	4680      	mov	r8, r0
 80045b4:	460c      	mov	r4, r1
 80045b6:	469a      	mov	sl, r3
 80045b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045be:	d807      	bhi.n	80045d0 <_printf_i+0x28>
 80045c0:	2f62      	cmp	r7, #98	; 0x62
 80045c2:	d80a      	bhi.n	80045da <_printf_i+0x32>
 80045c4:	2f00      	cmp	r7, #0
 80045c6:	f000 80d9 	beq.w	800477c <_printf_i+0x1d4>
 80045ca:	2f58      	cmp	r7, #88	; 0x58
 80045cc:	f000 80a4 	beq.w	8004718 <_printf_i+0x170>
 80045d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045d8:	e03a      	b.n	8004650 <_printf_i+0xa8>
 80045da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045de:	2b15      	cmp	r3, #21
 80045e0:	d8f6      	bhi.n	80045d0 <_printf_i+0x28>
 80045e2:	a101      	add	r1, pc, #4	; (adr r1, 80045e8 <_printf_i+0x40>)
 80045e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045e8:	08004641 	.word	0x08004641
 80045ec:	08004655 	.word	0x08004655
 80045f0:	080045d1 	.word	0x080045d1
 80045f4:	080045d1 	.word	0x080045d1
 80045f8:	080045d1 	.word	0x080045d1
 80045fc:	080045d1 	.word	0x080045d1
 8004600:	08004655 	.word	0x08004655
 8004604:	080045d1 	.word	0x080045d1
 8004608:	080045d1 	.word	0x080045d1
 800460c:	080045d1 	.word	0x080045d1
 8004610:	080045d1 	.word	0x080045d1
 8004614:	08004763 	.word	0x08004763
 8004618:	08004685 	.word	0x08004685
 800461c:	08004745 	.word	0x08004745
 8004620:	080045d1 	.word	0x080045d1
 8004624:	080045d1 	.word	0x080045d1
 8004628:	08004785 	.word	0x08004785
 800462c:	080045d1 	.word	0x080045d1
 8004630:	08004685 	.word	0x08004685
 8004634:	080045d1 	.word	0x080045d1
 8004638:	080045d1 	.word	0x080045d1
 800463c:	0800474d 	.word	0x0800474d
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	1d1a      	adds	r2, r3, #4
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	602a      	str	r2, [r5, #0]
 8004648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800464c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004650:	2301      	movs	r3, #1
 8004652:	e0a4      	b.n	800479e <_printf_i+0x1f6>
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	6829      	ldr	r1, [r5, #0]
 8004658:	0606      	lsls	r6, r0, #24
 800465a:	f101 0304 	add.w	r3, r1, #4
 800465e:	d50a      	bpl.n	8004676 <_printf_i+0xce>
 8004660:	680e      	ldr	r6, [r1, #0]
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	2e00      	cmp	r6, #0
 8004666:	da03      	bge.n	8004670 <_printf_i+0xc8>
 8004668:	232d      	movs	r3, #45	; 0x2d
 800466a:	4276      	negs	r6, r6
 800466c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004670:	230a      	movs	r3, #10
 8004672:	485e      	ldr	r0, [pc, #376]	; (80047ec <_printf_i+0x244>)
 8004674:	e019      	b.n	80046aa <_printf_i+0x102>
 8004676:	680e      	ldr	r6, [r1, #0]
 8004678:	f010 0f40 	tst.w	r0, #64	; 0x40
 800467c:	602b      	str	r3, [r5, #0]
 800467e:	bf18      	it	ne
 8004680:	b236      	sxthne	r6, r6
 8004682:	e7ef      	b.n	8004664 <_printf_i+0xbc>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	1d19      	adds	r1, r3, #4
 800468a:	6029      	str	r1, [r5, #0]
 800468c:	0601      	lsls	r1, r0, #24
 800468e:	d501      	bpl.n	8004694 <_printf_i+0xec>
 8004690:	681e      	ldr	r6, [r3, #0]
 8004692:	e002      	b.n	800469a <_printf_i+0xf2>
 8004694:	0646      	lsls	r6, r0, #25
 8004696:	d5fb      	bpl.n	8004690 <_printf_i+0xe8>
 8004698:	881e      	ldrh	r6, [r3, #0]
 800469a:	2f6f      	cmp	r7, #111	; 0x6f
 800469c:	bf0c      	ite	eq
 800469e:	2308      	moveq	r3, #8
 80046a0:	230a      	movne	r3, #10
 80046a2:	4852      	ldr	r0, [pc, #328]	; (80047ec <_printf_i+0x244>)
 80046a4:	2100      	movs	r1, #0
 80046a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046aa:	6865      	ldr	r5, [r4, #4]
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	bfa8      	it	ge
 80046b0:	6821      	ldrge	r1, [r4, #0]
 80046b2:	60a5      	str	r5, [r4, #8]
 80046b4:	bfa4      	itt	ge
 80046b6:	f021 0104 	bicge.w	r1, r1, #4
 80046ba:	6021      	strge	r1, [r4, #0]
 80046bc:	b90e      	cbnz	r6, 80046c2 <_printf_i+0x11a>
 80046be:	2d00      	cmp	r5, #0
 80046c0:	d04d      	beq.n	800475e <_printf_i+0x1b6>
 80046c2:	4615      	mov	r5, r2
 80046c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80046c8:	fb03 6711 	mls	r7, r3, r1, r6
 80046cc:	5dc7      	ldrb	r7, [r0, r7]
 80046ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046d2:	4637      	mov	r7, r6
 80046d4:	42bb      	cmp	r3, r7
 80046d6:	460e      	mov	r6, r1
 80046d8:	d9f4      	bls.n	80046c4 <_printf_i+0x11c>
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d10b      	bne.n	80046f6 <_printf_i+0x14e>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	07de      	lsls	r6, r3, #31
 80046e2:	d508      	bpl.n	80046f6 <_printf_i+0x14e>
 80046e4:	6923      	ldr	r3, [r4, #16]
 80046e6:	6861      	ldr	r1, [r4, #4]
 80046e8:	4299      	cmp	r1, r3
 80046ea:	bfde      	ittt	le
 80046ec:	2330      	movle	r3, #48	; 0x30
 80046ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046f6:	1b52      	subs	r2, r2, r5
 80046f8:	6122      	str	r2, [r4, #16]
 80046fa:	464b      	mov	r3, r9
 80046fc:	4621      	mov	r1, r4
 80046fe:	4640      	mov	r0, r8
 8004700:	f8cd a000 	str.w	sl, [sp]
 8004704:	aa03      	add	r2, sp, #12
 8004706:	f7ff fedf 	bl	80044c8 <_printf_common>
 800470a:	3001      	adds	r0, #1
 800470c:	d14c      	bne.n	80047a8 <_printf_i+0x200>
 800470e:	f04f 30ff 	mov.w	r0, #4294967295
 8004712:	b004      	add	sp, #16
 8004714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004718:	4834      	ldr	r0, [pc, #208]	; (80047ec <_printf_i+0x244>)
 800471a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800471e:	6829      	ldr	r1, [r5, #0]
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	f851 6b04 	ldr.w	r6, [r1], #4
 8004726:	6029      	str	r1, [r5, #0]
 8004728:	061d      	lsls	r5, r3, #24
 800472a:	d514      	bpl.n	8004756 <_printf_i+0x1ae>
 800472c:	07df      	lsls	r7, r3, #31
 800472e:	bf44      	itt	mi
 8004730:	f043 0320 	orrmi.w	r3, r3, #32
 8004734:	6023      	strmi	r3, [r4, #0]
 8004736:	b91e      	cbnz	r6, 8004740 <_printf_i+0x198>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	f023 0320 	bic.w	r3, r3, #32
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	2310      	movs	r3, #16
 8004742:	e7af      	b.n	80046a4 <_printf_i+0xfc>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	f043 0320 	orr.w	r3, r3, #32
 800474a:	6023      	str	r3, [r4, #0]
 800474c:	2378      	movs	r3, #120	; 0x78
 800474e:	4828      	ldr	r0, [pc, #160]	; (80047f0 <_printf_i+0x248>)
 8004750:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004754:	e7e3      	b.n	800471e <_printf_i+0x176>
 8004756:	0659      	lsls	r1, r3, #25
 8004758:	bf48      	it	mi
 800475a:	b2b6      	uxthmi	r6, r6
 800475c:	e7e6      	b.n	800472c <_printf_i+0x184>
 800475e:	4615      	mov	r5, r2
 8004760:	e7bb      	b.n	80046da <_printf_i+0x132>
 8004762:	682b      	ldr	r3, [r5, #0]
 8004764:	6826      	ldr	r6, [r4, #0]
 8004766:	1d18      	adds	r0, r3, #4
 8004768:	6961      	ldr	r1, [r4, #20]
 800476a:	6028      	str	r0, [r5, #0]
 800476c:	0635      	lsls	r5, r6, #24
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	d501      	bpl.n	8004776 <_printf_i+0x1ce>
 8004772:	6019      	str	r1, [r3, #0]
 8004774:	e002      	b.n	800477c <_printf_i+0x1d4>
 8004776:	0670      	lsls	r0, r6, #25
 8004778:	d5fb      	bpl.n	8004772 <_printf_i+0x1ca>
 800477a:	8019      	strh	r1, [r3, #0]
 800477c:	2300      	movs	r3, #0
 800477e:	4615      	mov	r5, r2
 8004780:	6123      	str	r3, [r4, #16]
 8004782:	e7ba      	b.n	80046fa <_printf_i+0x152>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	2100      	movs	r1, #0
 8004788:	1d1a      	adds	r2, r3, #4
 800478a:	602a      	str	r2, [r5, #0]
 800478c:	681d      	ldr	r5, [r3, #0]
 800478e:	6862      	ldr	r2, [r4, #4]
 8004790:	4628      	mov	r0, r5
 8004792:	f000 fed7 	bl	8005544 <memchr>
 8004796:	b108      	cbz	r0, 800479c <_printf_i+0x1f4>
 8004798:	1b40      	subs	r0, r0, r5
 800479a:	6060      	str	r0, [r4, #4]
 800479c:	6863      	ldr	r3, [r4, #4]
 800479e:	6123      	str	r3, [r4, #16]
 80047a0:	2300      	movs	r3, #0
 80047a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a6:	e7a8      	b.n	80046fa <_printf_i+0x152>
 80047a8:	462a      	mov	r2, r5
 80047aa:	4649      	mov	r1, r9
 80047ac:	4640      	mov	r0, r8
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	47d0      	blx	sl
 80047b2:	3001      	adds	r0, #1
 80047b4:	d0ab      	beq.n	800470e <_printf_i+0x166>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	079b      	lsls	r3, r3, #30
 80047ba:	d413      	bmi.n	80047e4 <_printf_i+0x23c>
 80047bc:	68e0      	ldr	r0, [r4, #12]
 80047be:	9b03      	ldr	r3, [sp, #12]
 80047c0:	4298      	cmp	r0, r3
 80047c2:	bfb8      	it	lt
 80047c4:	4618      	movlt	r0, r3
 80047c6:	e7a4      	b.n	8004712 <_printf_i+0x16a>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4632      	mov	r2, r6
 80047cc:	4649      	mov	r1, r9
 80047ce:	4640      	mov	r0, r8
 80047d0:	47d0      	blx	sl
 80047d2:	3001      	adds	r0, #1
 80047d4:	d09b      	beq.n	800470e <_printf_i+0x166>
 80047d6:	3501      	adds	r5, #1
 80047d8:	68e3      	ldr	r3, [r4, #12]
 80047da:	9903      	ldr	r1, [sp, #12]
 80047dc:	1a5b      	subs	r3, r3, r1
 80047de:	42ab      	cmp	r3, r5
 80047e0:	dcf2      	bgt.n	80047c8 <_printf_i+0x220>
 80047e2:	e7eb      	b.n	80047bc <_printf_i+0x214>
 80047e4:	2500      	movs	r5, #0
 80047e6:	f104 0619 	add.w	r6, r4, #25
 80047ea:	e7f5      	b.n	80047d8 <_printf_i+0x230>
 80047ec:	08006d6a 	.word	0x08006d6a
 80047f0:	08006d7b 	.word	0x08006d7b

080047f4 <siprintf>:
 80047f4:	b40e      	push	{r1, r2, r3}
 80047f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047fa:	b500      	push	{lr}
 80047fc:	b09c      	sub	sp, #112	; 0x70
 80047fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004800:	9002      	str	r0, [sp, #8]
 8004802:	9006      	str	r0, [sp, #24]
 8004804:	9107      	str	r1, [sp, #28]
 8004806:	9104      	str	r1, [sp, #16]
 8004808:	4808      	ldr	r0, [pc, #32]	; (800482c <siprintf+0x38>)
 800480a:	4909      	ldr	r1, [pc, #36]	; (8004830 <siprintf+0x3c>)
 800480c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004810:	9105      	str	r1, [sp, #20]
 8004812:	6800      	ldr	r0, [r0, #0]
 8004814:	a902      	add	r1, sp, #8
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	f001 fb7e 	bl	8005f18 <_svfiprintf_r>
 800481c:	2200      	movs	r2, #0
 800481e:	9b02      	ldr	r3, [sp, #8]
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	b01c      	add	sp, #112	; 0x70
 8004824:	f85d eb04 	ldr.w	lr, [sp], #4
 8004828:	b003      	add	sp, #12
 800482a:	4770      	bx	lr
 800482c:	2000000c 	.word	0x2000000c
 8004830:	ffff0208 	.word	0xffff0208

08004834 <quorem>:
 8004834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004838:	6903      	ldr	r3, [r0, #16]
 800483a:	690c      	ldr	r4, [r1, #16]
 800483c:	4607      	mov	r7, r0
 800483e:	42a3      	cmp	r3, r4
 8004840:	f2c0 8082 	blt.w	8004948 <quorem+0x114>
 8004844:	3c01      	subs	r4, #1
 8004846:	f100 0514 	add.w	r5, r0, #20
 800484a:	f101 0814 	add.w	r8, r1, #20
 800484e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004858:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800485c:	3301      	adds	r3, #1
 800485e:	429a      	cmp	r2, r3
 8004860:	fbb2 f6f3 	udiv	r6, r2, r3
 8004864:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004868:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800486c:	d331      	bcc.n	80048d2 <quorem+0x9e>
 800486e:	f04f 0e00 	mov.w	lr, #0
 8004872:	4640      	mov	r0, r8
 8004874:	46ac      	mov	ip, r5
 8004876:	46f2      	mov	sl, lr
 8004878:	f850 2b04 	ldr.w	r2, [r0], #4
 800487c:	b293      	uxth	r3, r2
 800487e:	fb06 e303 	mla	r3, r6, r3, lr
 8004882:	0c12      	lsrs	r2, r2, #16
 8004884:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004888:	b29b      	uxth	r3, r3
 800488a:	fb06 e202 	mla	r2, r6, r2, lr
 800488e:	ebaa 0303 	sub.w	r3, sl, r3
 8004892:	f8dc a000 	ldr.w	sl, [ip]
 8004896:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800489a:	fa1f fa8a 	uxth.w	sl, sl
 800489e:	4453      	add	r3, sl
 80048a0:	f8dc a000 	ldr.w	sl, [ip]
 80048a4:	b292      	uxth	r2, r2
 80048a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80048aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048b4:	4581      	cmp	r9, r0
 80048b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80048ba:	f84c 3b04 	str.w	r3, [ip], #4
 80048be:	d2db      	bcs.n	8004878 <quorem+0x44>
 80048c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80048c4:	b92b      	cbnz	r3, 80048d2 <quorem+0x9e>
 80048c6:	9b01      	ldr	r3, [sp, #4]
 80048c8:	3b04      	subs	r3, #4
 80048ca:	429d      	cmp	r5, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	d32f      	bcc.n	8004930 <quorem+0xfc>
 80048d0:	613c      	str	r4, [r7, #16]
 80048d2:	4638      	mov	r0, r7
 80048d4:	f001 f8d0 	bl	8005a78 <__mcmp>
 80048d8:	2800      	cmp	r0, #0
 80048da:	db25      	blt.n	8004928 <quorem+0xf4>
 80048dc:	4628      	mov	r0, r5
 80048de:	f04f 0c00 	mov.w	ip, #0
 80048e2:	3601      	adds	r6, #1
 80048e4:	f858 1b04 	ldr.w	r1, [r8], #4
 80048e8:	f8d0 e000 	ldr.w	lr, [r0]
 80048ec:	b28b      	uxth	r3, r1
 80048ee:	ebac 0303 	sub.w	r3, ip, r3
 80048f2:	fa1f f28e 	uxth.w	r2, lr
 80048f6:	4413      	add	r3, r2
 80048f8:	0c0a      	lsrs	r2, r1, #16
 80048fa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004902:	b29b      	uxth	r3, r3
 8004904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004908:	45c1      	cmp	r9, r8
 800490a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800490e:	f840 3b04 	str.w	r3, [r0], #4
 8004912:	d2e7      	bcs.n	80048e4 <quorem+0xb0>
 8004914:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004918:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800491c:	b922      	cbnz	r2, 8004928 <quorem+0xf4>
 800491e:	3b04      	subs	r3, #4
 8004920:	429d      	cmp	r5, r3
 8004922:	461a      	mov	r2, r3
 8004924:	d30a      	bcc.n	800493c <quorem+0x108>
 8004926:	613c      	str	r4, [r7, #16]
 8004928:	4630      	mov	r0, r6
 800492a:	b003      	add	sp, #12
 800492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	3b04      	subs	r3, #4
 8004934:	2a00      	cmp	r2, #0
 8004936:	d1cb      	bne.n	80048d0 <quorem+0x9c>
 8004938:	3c01      	subs	r4, #1
 800493a:	e7c6      	b.n	80048ca <quorem+0x96>
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	3b04      	subs	r3, #4
 8004940:	2a00      	cmp	r2, #0
 8004942:	d1f0      	bne.n	8004926 <quorem+0xf2>
 8004944:	3c01      	subs	r4, #1
 8004946:	e7eb      	b.n	8004920 <quorem+0xec>
 8004948:	2000      	movs	r0, #0
 800494a:	e7ee      	b.n	800492a <quorem+0xf6>
 800494c:	0000      	movs	r0, r0
	...

08004950 <_dtoa_r>:
 8004950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	4616      	mov	r6, r2
 8004956:	461f      	mov	r7, r3
 8004958:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800495a:	b099      	sub	sp, #100	; 0x64
 800495c:	4605      	mov	r5, r0
 800495e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004962:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004966:	b974      	cbnz	r4, 8004986 <_dtoa_r+0x36>
 8004968:	2010      	movs	r0, #16
 800496a:	f000 fde3 	bl	8005534 <malloc>
 800496e:	4602      	mov	r2, r0
 8004970:	6268      	str	r0, [r5, #36]	; 0x24
 8004972:	b920      	cbnz	r0, 800497e <_dtoa_r+0x2e>
 8004974:	21ea      	movs	r1, #234	; 0xea
 8004976:	4ba8      	ldr	r3, [pc, #672]	; (8004c18 <_dtoa_r+0x2c8>)
 8004978:	48a8      	ldr	r0, [pc, #672]	; (8004c1c <_dtoa_r+0x2cc>)
 800497a:	f001 fbdd 	bl	8006138 <__assert_func>
 800497e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004982:	6004      	str	r4, [r0, #0]
 8004984:	60c4      	str	r4, [r0, #12]
 8004986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	b151      	cbz	r1, 80049a2 <_dtoa_r+0x52>
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	2301      	movs	r3, #1
 8004990:	4093      	lsls	r3, r2
 8004992:	604a      	str	r2, [r1, #4]
 8004994:	608b      	str	r3, [r1, #8]
 8004996:	4628      	mov	r0, r5
 8004998:	f000 fe30 	bl	80055fc <_Bfree>
 800499c:	2200      	movs	r2, #0
 800499e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	1e3b      	subs	r3, r7, #0
 80049a4:	bfaf      	iteee	ge
 80049a6:	2300      	movge	r3, #0
 80049a8:	2201      	movlt	r2, #1
 80049aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80049ae:	9305      	strlt	r3, [sp, #20]
 80049b0:	bfa8      	it	ge
 80049b2:	f8c8 3000 	strge.w	r3, [r8]
 80049b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80049ba:	4b99      	ldr	r3, [pc, #612]	; (8004c20 <_dtoa_r+0x2d0>)
 80049bc:	bfb8      	it	lt
 80049be:	f8c8 2000 	strlt.w	r2, [r8]
 80049c2:	ea33 0309 	bics.w	r3, r3, r9
 80049c6:	d119      	bne.n	80049fc <_dtoa_r+0xac>
 80049c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80049cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049d4:	4333      	orrs	r3, r6
 80049d6:	f000 857f 	beq.w	80054d8 <_dtoa_r+0xb88>
 80049da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80049dc:	b953      	cbnz	r3, 80049f4 <_dtoa_r+0xa4>
 80049de:	4b91      	ldr	r3, [pc, #580]	; (8004c24 <_dtoa_r+0x2d4>)
 80049e0:	e022      	b.n	8004a28 <_dtoa_r+0xd8>
 80049e2:	4b91      	ldr	r3, [pc, #580]	; (8004c28 <_dtoa_r+0x2d8>)
 80049e4:	9303      	str	r3, [sp, #12]
 80049e6:	3308      	adds	r3, #8
 80049e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	9803      	ldr	r0, [sp, #12]
 80049ee:	b019      	add	sp, #100	; 0x64
 80049f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f4:	4b8b      	ldr	r3, [pc, #556]	; (8004c24 <_dtoa_r+0x2d4>)
 80049f6:	9303      	str	r3, [sp, #12]
 80049f8:	3303      	adds	r3, #3
 80049fa:	e7f5      	b.n	80049e8 <_dtoa_r+0x98>
 80049fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004a04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f7fb ffcc 	bl	80009a8 <__aeabi_dcmpeq>
 8004a10:	4680      	mov	r8, r0
 8004a12:	b158      	cbz	r0, 8004a2c <_dtoa_r+0xdc>
 8004a14:	2301      	movs	r3, #1
 8004a16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8558 	beq.w	80054d2 <_dtoa_r+0xb82>
 8004a22:	4882      	ldr	r0, [pc, #520]	; (8004c2c <_dtoa_r+0x2dc>)
 8004a24:	6018      	str	r0, [r3, #0]
 8004a26:	1e43      	subs	r3, r0, #1
 8004a28:	9303      	str	r3, [sp, #12]
 8004a2a:	e7df      	b.n	80049ec <_dtoa_r+0x9c>
 8004a2c:	ab16      	add	r3, sp, #88	; 0x58
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	ab17      	add	r3, sp, #92	; 0x5c
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	4628      	mov	r0, r5
 8004a36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a3a:	f001 f8c5 	bl	8005bc8 <__d2b>
 8004a3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004a42:	4683      	mov	fp, r0
 8004a44:	2c00      	cmp	r4, #0
 8004a46:	d07f      	beq.n	8004b48 <_dtoa_r+0x1f8>
 8004a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004a5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004a5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004a62:	2200      	movs	r2, #0
 8004a64:	4b72      	ldr	r3, [pc, #456]	; (8004c30 <_dtoa_r+0x2e0>)
 8004a66:	f7fb fb7f 	bl	8000168 <__aeabi_dsub>
 8004a6a:	a365      	add	r3, pc, #404	; (adr r3, 8004c00 <_dtoa_r+0x2b0>)
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	f7fb fd32 	bl	80004d8 <__aeabi_dmul>
 8004a74:	a364      	add	r3, pc, #400	; (adr r3, 8004c08 <_dtoa_r+0x2b8>)
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	f7fb fb77 	bl	800016c <__adddf3>
 8004a7e:	4606      	mov	r6, r0
 8004a80:	4620      	mov	r0, r4
 8004a82:	460f      	mov	r7, r1
 8004a84:	f7fb fcbe 	bl	8000404 <__aeabi_i2d>
 8004a88:	a361      	add	r3, pc, #388	; (adr r3, 8004c10 <_dtoa_r+0x2c0>)
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	f7fb fd23 	bl	80004d8 <__aeabi_dmul>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4630      	mov	r0, r6
 8004a98:	4639      	mov	r1, r7
 8004a9a:	f7fb fb67 	bl	800016c <__adddf3>
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	460f      	mov	r7, r1
 8004aa2:	f7fb ffc9 	bl	8000a38 <__aeabi_d2iz>
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	4682      	mov	sl, r0
 8004aaa:	2300      	movs	r3, #0
 8004aac:	4630      	mov	r0, r6
 8004aae:	4639      	mov	r1, r7
 8004ab0:	f7fb ff84 	bl	80009bc <__aeabi_dcmplt>
 8004ab4:	b148      	cbz	r0, 8004aca <_dtoa_r+0x17a>
 8004ab6:	4650      	mov	r0, sl
 8004ab8:	f7fb fca4 	bl	8000404 <__aeabi_i2d>
 8004abc:	4632      	mov	r2, r6
 8004abe:	463b      	mov	r3, r7
 8004ac0:	f7fb ff72 	bl	80009a8 <__aeabi_dcmpeq>
 8004ac4:	b908      	cbnz	r0, 8004aca <_dtoa_r+0x17a>
 8004ac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aca:	f1ba 0f16 	cmp.w	sl, #22
 8004ace:	d858      	bhi.n	8004b82 <_dtoa_r+0x232>
 8004ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ad4:	4b57      	ldr	r3, [pc, #348]	; (8004c34 <_dtoa_r+0x2e4>)
 8004ad6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	f7fb ff6d 	bl	80009bc <__aeabi_dcmplt>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d04f      	beq.n	8004b86 <_dtoa_r+0x236>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aec:	930f      	str	r3, [sp, #60]	; 0x3c
 8004aee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004af0:	1b1c      	subs	r4, r3, r4
 8004af2:	1e63      	subs	r3, r4, #1
 8004af4:	9309      	str	r3, [sp, #36]	; 0x24
 8004af6:	bf49      	itett	mi
 8004af8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004afc:	2300      	movpl	r3, #0
 8004afe:	9306      	strmi	r3, [sp, #24]
 8004b00:	2300      	movmi	r3, #0
 8004b02:	bf54      	ite	pl
 8004b04:	9306      	strpl	r3, [sp, #24]
 8004b06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004b08:	f1ba 0f00 	cmp.w	sl, #0
 8004b0c:	db3d      	blt.n	8004b8a <_dtoa_r+0x23a>
 8004b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004b14:	4453      	add	r3, sl
 8004b16:	9309      	str	r3, [sp, #36]	; 0x24
 8004b18:	2300      	movs	r3, #0
 8004b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8004b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b1e:	2b09      	cmp	r3, #9
 8004b20:	f200 808c 	bhi.w	8004c3c <_dtoa_r+0x2ec>
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	bfc4      	itt	gt
 8004b28:	3b04      	subgt	r3, #4
 8004b2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004b2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b2e:	bfc8      	it	gt
 8004b30:	2400      	movgt	r4, #0
 8004b32:	f1a3 0302 	sub.w	r3, r3, #2
 8004b36:	bfd8      	it	le
 8004b38:	2401      	movle	r4, #1
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	f200 808a 	bhi.w	8004c54 <_dtoa_r+0x304>
 8004b40:	e8df f003 	tbb	[pc, r3]
 8004b44:	5b4d4f2d 	.word	0x5b4d4f2d
 8004b48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004b4c:	441c      	add	r4, r3
 8004b4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	bfc3      	ittte	gt
 8004b56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004b5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004b5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004b62:	f1c3 0320 	rsble	r3, r3, #32
 8004b66:	bfc6      	itte	gt
 8004b68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004b6c:	4318      	orrgt	r0, r3
 8004b6e:	fa06 f003 	lslle.w	r0, r6, r3
 8004b72:	f7fb fc37 	bl	80003e4 <__aeabi_ui2d>
 8004b76:	2301      	movs	r3, #1
 8004b78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004b7c:	3c01      	subs	r4, #1
 8004b7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b80:	e76f      	b.n	8004a62 <_dtoa_r+0x112>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e7b2      	b.n	8004aec <_dtoa_r+0x19c>
 8004b86:	900f      	str	r0, [sp, #60]	; 0x3c
 8004b88:	e7b1      	b.n	8004aee <_dtoa_r+0x19e>
 8004b8a:	9b06      	ldr	r3, [sp, #24]
 8004b8c:	eba3 030a 	sub.w	r3, r3, sl
 8004b90:	9306      	str	r3, [sp, #24]
 8004b92:	f1ca 0300 	rsb	r3, sl, #0
 8004b96:	930a      	str	r3, [sp, #40]	; 0x28
 8004b98:	2300      	movs	r3, #0
 8004b9a:	930e      	str	r3, [sp, #56]	; 0x38
 8004b9c:	e7be      	b.n	8004b1c <_dtoa_r+0x1cc>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ba2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	dc58      	bgt.n	8004c5a <_dtoa_r+0x30a>
 8004ba8:	f04f 0901 	mov.w	r9, #1
 8004bac:	464b      	mov	r3, r9
 8004bae:	f8cd 9020 	str.w	r9, [sp, #32]
 8004bb2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004bba:	6042      	str	r2, [r0, #4]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	f102 0614 	add.w	r6, r2, #20
 8004bc2:	429e      	cmp	r6, r3
 8004bc4:	6841      	ldr	r1, [r0, #4]
 8004bc6:	d94e      	bls.n	8004c66 <_dtoa_r+0x316>
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f000 fcd7 	bl	800557c <_Balloc>
 8004bce:	9003      	str	r0, [sp, #12]
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d14c      	bne.n	8004c6e <_dtoa_r+0x31e>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004bda:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <_dtoa_r+0x2e8>)
 8004bdc:	e6cc      	b.n	8004978 <_dtoa_r+0x28>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e7de      	b.n	8004ba0 <_dtoa_r+0x250>
 8004be2:	2300      	movs	r3, #0
 8004be4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004be6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004be8:	eb0a 0903 	add.w	r9, sl, r3
 8004bec:	f109 0301 	add.w	r3, r9, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	9308      	str	r3, [sp, #32]
 8004bf4:	bfb8      	it	lt
 8004bf6:	2301      	movlt	r3, #1
 8004bf8:	e7dd      	b.n	8004bb6 <_dtoa_r+0x266>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e7f2      	b.n	8004be4 <_dtoa_r+0x294>
 8004bfe:	bf00      	nop
 8004c00:	636f4361 	.word	0x636f4361
 8004c04:	3fd287a7 	.word	0x3fd287a7
 8004c08:	8b60c8b3 	.word	0x8b60c8b3
 8004c0c:	3fc68a28 	.word	0x3fc68a28
 8004c10:	509f79fb 	.word	0x509f79fb
 8004c14:	3fd34413 	.word	0x3fd34413
 8004c18:	08006d99 	.word	0x08006d99
 8004c1c:	08006db0 	.word	0x08006db0
 8004c20:	7ff00000 	.word	0x7ff00000
 8004c24:	08006d95 	.word	0x08006d95
 8004c28:	08006d8c 	.word	0x08006d8c
 8004c2c:	08006d69 	.word	0x08006d69
 8004c30:	3ff80000 	.word	0x3ff80000
 8004c34:	08006ea0 	.word	0x08006ea0
 8004c38:	08006e0b 	.word	0x08006e0b
 8004c3c:	2401      	movs	r4, #1
 8004c3e:	2300      	movs	r3, #0
 8004c40:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c42:	9322      	str	r3, [sp, #136]	; 0x88
 8004c44:	f04f 39ff 	mov.w	r9, #4294967295
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2312      	movs	r3, #18
 8004c4c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c50:	9223      	str	r2, [sp, #140]	; 0x8c
 8004c52:	e7b0      	b.n	8004bb6 <_dtoa_r+0x266>
 8004c54:	2301      	movs	r3, #1
 8004c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c58:	e7f4      	b.n	8004c44 <_dtoa_r+0x2f4>
 8004c5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004c5e:	464b      	mov	r3, r9
 8004c60:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c64:	e7a7      	b.n	8004bb6 <_dtoa_r+0x266>
 8004c66:	3101      	adds	r1, #1
 8004c68:	6041      	str	r1, [r0, #4]
 8004c6a:	0052      	lsls	r2, r2, #1
 8004c6c:	e7a7      	b.n	8004bbe <_dtoa_r+0x26e>
 8004c6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c70:	9a03      	ldr	r2, [sp, #12]
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	9b08      	ldr	r3, [sp, #32]
 8004c76:	2b0e      	cmp	r3, #14
 8004c78:	f200 80a8 	bhi.w	8004dcc <_dtoa_r+0x47c>
 8004c7c:	2c00      	cmp	r4, #0
 8004c7e:	f000 80a5 	beq.w	8004dcc <_dtoa_r+0x47c>
 8004c82:	f1ba 0f00 	cmp.w	sl, #0
 8004c86:	dd34      	ble.n	8004cf2 <_dtoa_r+0x3a2>
 8004c88:	4a9a      	ldr	r2, [pc, #616]	; (8004ef4 <_dtoa_r+0x5a4>)
 8004c8a:	f00a 030f 	and.w	r3, sl, #15
 8004c8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c92:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004c96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c9e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004ca2:	d016      	beq.n	8004cd2 <_dtoa_r+0x382>
 8004ca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ca8:	4b93      	ldr	r3, [pc, #588]	; (8004ef8 <_dtoa_r+0x5a8>)
 8004caa:	2703      	movs	r7, #3
 8004cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004cb0:	f7fb fd3c 	bl	800072c <__aeabi_ddiv>
 8004cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cb8:	f004 040f 	and.w	r4, r4, #15
 8004cbc:	4e8e      	ldr	r6, [pc, #568]	; (8004ef8 <_dtoa_r+0x5a8>)
 8004cbe:	b954      	cbnz	r4, 8004cd6 <_dtoa_r+0x386>
 8004cc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc8:	f7fb fd30 	bl	800072c <__aeabi_ddiv>
 8004ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cd0:	e029      	b.n	8004d26 <_dtoa_r+0x3d6>
 8004cd2:	2702      	movs	r7, #2
 8004cd4:	e7f2      	b.n	8004cbc <_dtoa_r+0x36c>
 8004cd6:	07e1      	lsls	r1, r4, #31
 8004cd8:	d508      	bpl.n	8004cec <_dtoa_r+0x39c>
 8004cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ce2:	f7fb fbf9 	bl	80004d8 <__aeabi_dmul>
 8004ce6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cea:	3701      	adds	r7, #1
 8004cec:	1064      	asrs	r4, r4, #1
 8004cee:	3608      	adds	r6, #8
 8004cf0:	e7e5      	b.n	8004cbe <_dtoa_r+0x36e>
 8004cf2:	f000 80a5 	beq.w	8004e40 <_dtoa_r+0x4f0>
 8004cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cfa:	f1ca 0400 	rsb	r4, sl, #0
 8004cfe:	4b7d      	ldr	r3, [pc, #500]	; (8004ef4 <_dtoa_r+0x5a4>)
 8004d00:	f004 020f 	and.w	r2, r4, #15
 8004d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f7fb fbe4 	bl	80004d8 <__aeabi_dmul>
 8004d10:	2702      	movs	r7, #2
 8004d12:	2300      	movs	r3, #0
 8004d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d18:	4e77      	ldr	r6, [pc, #476]	; (8004ef8 <_dtoa_r+0x5a8>)
 8004d1a:	1124      	asrs	r4, r4, #4
 8004d1c:	2c00      	cmp	r4, #0
 8004d1e:	f040 8084 	bne.w	8004e2a <_dtoa_r+0x4da>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1d2      	bne.n	8004ccc <_dtoa_r+0x37c>
 8004d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 808b 	beq.w	8004e44 <_dtoa_r+0x4f4>
 8004d2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	4b6f      	ldr	r3, [pc, #444]	; (8004efc <_dtoa_r+0x5ac>)
 8004d3e:	f7fb fe3d 	bl	80009bc <__aeabi_dcmplt>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d07e      	beq.n	8004e44 <_dtoa_r+0x4f4>
 8004d46:	9b08      	ldr	r3, [sp, #32]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d07b      	beq.n	8004e44 <_dtoa_r+0x4f4>
 8004d4c:	f1b9 0f00 	cmp.w	r9, #0
 8004d50:	dd38      	ble.n	8004dc4 <_dtoa_r+0x474>
 8004d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d56:	2200      	movs	r2, #0
 8004d58:	4b69      	ldr	r3, [pc, #420]	; (8004f00 <_dtoa_r+0x5b0>)
 8004d5a:	f7fb fbbd 	bl	80004d8 <__aeabi_dmul>
 8004d5e:	464c      	mov	r4, r9
 8004d60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d64:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004d68:	3701      	adds	r7, #1
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f7fb fb4a 	bl	8000404 <__aeabi_i2d>
 8004d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d74:	f7fb fbb0 	bl	80004d8 <__aeabi_dmul>
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4b62      	ldr	r3, [pc, #392]	; (8004f04 <_dtoa_r+0x5b4>)
 8004d7c:	f7fb f9f6 	bl	800016c <__adddf3>
 8004d80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004d84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d88:	9611      	str	r6, [sp, #68]	; 0x44
 8004d8a:	2c00      	cmp	r4, #0
 8004d8c:	d15d      	bne.n	8004e4a <_dtoa_r+0x4fa>
 8004d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d92:	2200      	movs	r2, #0
 8004d94:	4b5c      	ldr	r3, [pc, #368]	; (8004f08 <_dtoa_r+0x5b8>)
 8004d96:	f7fb f9e7 	bl	8000168 <__aeabi_dsub>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004da2:	4633      	mov	r3, r6
 8004da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004da6:	f7fb fe27 	bl	80009f8 <__aeabi_dcmpgt>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f040 829c 	bne.w	80052e8 <_dtoa_r+0x998>
 8004db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004db6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004dba:	f7fb fdff 	bl	80009bc <__aeabi_dcmplt>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	f040 8290 	bne.w	80052e4 <_dtoa_r+0x994>
 8004dc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004dc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004dcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f2c0 8152 	blt.w	8005078 <_dtoa_r+0x728>
 8004dd4:	f1ba 0f0e 	cmp.w	sl, #14
 8004dd8:	f300 814e 	bgt.w	8005078 <_dtoa_r+0x728>
 8004ddc:	4b45      	ldr	r3, [pc, #276]	; (8004ef4 <_dtoa_r+0x5a4>)
 8004dde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004de2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004de6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004dea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f280 80db 	bge.w	8004fa8 <_dtoa_r+0x658>
 8004df2:	9b08      	ldr	r3, [sp, #32]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f300 80d7 	bgt.w	8004fa8 <_dtoa_r+0x658>
 8004dfa:	f040 8272 	bne.w	80052e2 <_dtoa_r+0x992>
 8004dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e02:	2200      	movs	r2, #0
 8004e04:	4b40      	ldr	r3, [pc, #256]	; (8004f08 <_dtoa_r+0x5b8>)
 8004e06:	f7fb fb67 	bl	80004d8 <__aeabi_dmul>
 8004e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e0e:	f7fb fde9 	bl	80009e4 <__aeabi_dcmpge>
 8004e12:	9c08      	ldr	r4, [sp, #32]
 8004e14:	4626      	mov	r6, r4
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f040 8248 	bne.w	80052ac <_dtoa_r+0x95c>
 8004e1c:	2331      	movs	r3, #49	; 0x31
 8004e1e:	9f03      	ldr	r7, [sp, #12]
 8004e20:	f10a 0a01 	add.w	sl, sl, #1
 8004e24:	f807 3b01 	strb.w	r3, [r7], #1
 8004e28:	e244      	b.n	80052b4 <_dtoa_r+0x964>
 8004e2a:	07e2      	lsls	r2, r4, #31
 8004e2c:	d505      	bpl.n	8004e3a <_dtoa_r+0x4ea>
 8004e2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e32:	f7fb fb51 	bl	80004d8 <__aeabi_dmul>
 8004e36:	2301      	movs	r3, #1
 8004e38:	3701      	adds	r7, #1
 8004e3a:	1064      	asrs	r4, r4, #1
 8004e3c:	3608      	adds	r6, #8
 8004e3e:	e76d      	b.n	8004d1c <_dtoa_r+0x3cc>
 8004e40:	2702      	movs	r7, #2
 8004e42:	e770      	b.n	8004d26 <_dtoa_r+0x3d6>
 8004e44:	46d0      	mov	r8, sl
 8004e46:	9c08      	ldr	r4, [sp, #32]
 8004e48:	e78f      	b.n	8004d6a <_dtoa_r+0x41a>
 8004e4a:	9903      	ldr	r1, [sp, #12]
 8004e4c:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <_dtoa_r+0x5a4>)
 8004e4e:	4421      	add	r1, r4
 8004e50:	9112      	str	r1, [sp, #72]	; 0x48
 8004e52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004e5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d055      	beq.n	8004f10 <_dtoa_r+0x5c0>
 8004e64:	2000      	movs	r0, #0
 8004e66:	4929      	ldr	r1, [pc, #164]	; (8004f0c <_dtoa_r+0x5bc>)
 8004e68:	f7fb fc60 	bl	800072c <__aeabi_ddiv>
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	4632      	mov	r2, r6
 8004e70:	f7fb f97a 	bl	8000168 <__aeabi_dsub>
 8004e74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e78:	9f03      	ldr	r7, [sp, #12]
 8004e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e7e:	f7fb fddb 	bl	8000a38 <__aeabi_d2iz>
 8004e82:	4604      	mov	r4, r0
 8004e84:	f7fb fabe 	bl	8000404 <__aeabi_i2d>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e90:	f7fb f96a 	bl	8000168 <__aeabi_dsub>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	3430      	adds	r4, #48	; 0x30
 8004e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ea2:	f807 4b01 	strb.w	r4, [r7], #1
 8004ea6:	f7fb fd89 	bl	80009bc <__aeabi_dcmplt>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d174      	bne.n	8004f98 <_dtoa_r+0x648>
 8004eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	4911      	ldr	r1, [pc, #68]	; (8004efc <_dtoa_r+0x5ac>)
 8004eb6:	f7fb f957 	bl	8000168 <__aeabi_dsub>
 8004eba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ebe:	f7fb fd7d 	bl	80009bc <__aeabi_dcmplt>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	f040 80b7 	bne.w	8005036 <_dtoa_r+0x6e6>
 8004ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004eca:	429f      	cmp	r7, r3
 8004ecc:	f43f af7a 	beq.w	8004dc4 <_dtoa_r+0x474>
 8004ed0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <_dtoa_r+0x5b0>)
 8004ed8:	f7fb fafe 	bl	80004d8 <__aeabi_dmul>
 8004edc:	2200      	movs	r2, #0
 8004ede:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <_dtoa_r+0x5b0>)
 8004ee8:	f7fb faf6 	bl	80004d8 <__aeabi_dmul>
 8004eec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ef0:	e7c3      	b.n	8004e7a <_dtoa_r+0x52a>
 8004ef2:	bf00      	nop
 8004ef4:	08006ea0 	.word	0x08006ea0
 8004ef8:	08006e78 	.word	0x08006e78
 8004efc:	3ff00000 	.word	0x3ff00000
 8004f00:	40240000 	.word	0x40240000
 8004f04:	401c0000 	.word	0x401c0000
 8004f08:	40140000 	.word	0x40140000
 8004f0c:	3fe00000 	.word	0x3fe00000
 8004f10:	4630      	mov	r0, r6
 8004f12:	4639      	mov	r1, r7
 8004f14:	f7fb fae0 	bl	80004d8 <__aeabi_dmul>
 8004f18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f1e:	9c03      	ldr	r4, [sp, #12]
 8004f20:	9314      	str	r3, [sp, #80]	; 0x50
 8004f22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f26:	f7fb fd87 	bl	8000a38 <__aeabi_d2iz>
 8004f2a:	9015      	str	r0, [sp, #84]	; 0x54
 8004f2c:	f7fb fa6a 	bl	8000404 <__aeabi_i2d>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f38:	f7fb f916 	bl	8000168 <__aeabi_dsub>
 8004f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f3e:	4606      	mov	r6, r0
 8004f40:	3330      	adds	r3, #48	; 0x30
 8004f42:	f804 3b01 	strb.w	r3, [r4], #1
 8004f46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f48:	460f      	mov	r7, r1
 8004f4a:	429c      	cmp	r4, r3
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	d124      	bne.n	8004f9c <_dtoa_r+0x64c>
 8004f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f56:	4bb0      	ldr	r3, [pc, #704]	; (8005218 <_dtoa_r+0x8c8>)
 8004f58:	f7fb f908 	bl	800016c <__adddf3>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4630      	mov	r0, r6
 8004f62:	4639      	mov	r1, r7
 8004f64:	f7fb fd48 	bl	80009f8 <__aeabi_dcmpgt>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d163      	bne.n	8005034 <_dtoa_r+0x6e4>
 8004f6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f70:	2000      	movs	r0, #0
 8004f72:	49a9      	ldr	r1, [pc, #676]	; (8005218 <_dtoa_r+0x8c8>)
 8004f74:	f7fb f8f8 	bl	8000168 <__aeabi_dsub>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4639      	mov	r1, r7
 8004f80:	f7fb fd1c 	bl	80009bc <__aeabi_dcmplt>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	f43f af1d 	beq.w	8004dc4 <_dtoa_r+0x474>
 8004f8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004f8c:	1e7b      	subs	r3, r7, #1
 8004f8e:	9314      	str	r3, [sp, #80]	; 0x50
 8004f90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004f94:	2b30      	cmp	r3, #48	; 0x30
 8004f96:	d0f8      	beq.n	8004f8a <_dtoa_r+0x63a>
 8004f98:	46c2      	mov	sl, r8
 8004f9a:	e03b      	b.n	8005014 <_dtoa_r+0x6c4>
 8004f9c:	4b9f      	ldr	r3, [pc, #636]	; (800521c <_dtoa_r+0x8cc>)
 8004f9e:	f7fb fa9b 	bl	80004d8 <__aeabi_dmul>
 8004fa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fa6:	e7bc      	b.n	8004f22 <_dtoa_r+0x5d2>
 8004fa8:	9f03      	ldr	r7, [sp, #12]
 8004faa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004fae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	f7fb fbb9 	bl	800072c <__aeabi_ddiv>
 8004fba:	f7fb fd3d 	bl	8000a38 <__aeabi_d2iz>
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	f7fb fa20 	bl	8000404 <__aeabi_i2d>
 8004fc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fc8:	f7fb fa86 	bl	80004d8 <__aeabi_dmul>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fb f8c8 	bl	8000168 <__aeabi_dsub>
 8004fd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004fdc:	f807 6b01 	strb.w	r6, [r7], #1
 8004fe0:	9e03      	ldr	r6, [sp, #12]
 8004fe2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004fe6:	1bbe      	subs	r6, r7, r6
 8004fe8:	45b4      	cmp	ip, r6
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	d136      	bne.n	800505e <_dtoa_r+0x70e>
 8004ff0:	f7fb f8bc 	bl	800016c <__adddf3>
 8004ff4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	4689      	mov	r9, r1
 8004ffc:	f7fb fcfc 	bl	80009f8 <__aeabi_dcmpgt>
 8005000:	bb58      	cbnz	r0, 800505a <_dtoa_r+0x70a>
 8005002:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005006:	4640      	mov	r0, r8
 8005008:	4649      	mov	r1, r9
 800500a:	f7fb fccd 	bl	80009a8 <__aeabi_dcmpeq>
 800500e:	b108      	cbz	r0, 8005014 <_dtoa_r+0x6c4>
 8005010:	07e1      	lsls	r1, r4, #31
 8005012:	d422      	bmi.n	800505a <_dtoa_r+0x70a>
 8005014:	4628      	mov	r0, r5
 8005016:	4659      	mov	r1, fp
 8005018:	f000 faf0 	bl	80055fc <_Bfree>
 800501c:	2300      	movs	r3, #0
 800501e:	703b      	strb	r3, [r7, #0]
 8005020:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005022:	f10a 0001 	add.w	r0, sl, #1
 8005026:	6018      	str	r0, [r3, #0]
 8005028:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800502a:	2b00      	cmp	r3, #0
 800502c:	f43f acde 	beq.w	80049ec <_dtoa_r+0x9c>
 8005030:	601f      	str	r7, [r3, #0]
 8005032:	e4db      	b.n	80049ec <_dtoa_r+0x9c>
 8005034:	4627      	mov	r7, r4
 8005036:	463b      	mov	r3, r7
 8005038:	461f      	mov	r7, r3
 800503a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800503e:	2a39      	cmp	r2, #57	; 0x39
 8005040:	d107      	bne.n	8005052 <_dtoa_r+0x702>
 8005042:	9a03      	ldr	r2, [sp, #12]
 8005044:	429a      	cmp	r2, r3
 8005046:	d1f7      	bne.n	8005038 <_dtoa_r+0x6e8>
 8005048:	2230      	movs	r2, #48	; 0x30
 800504a:	9903      	ldr	r1, [sp, #12]
 800504c:	f108 0801 	add.w	r8, r8, #1
 8005050:	700a      	strb	r2, [r1, #0]
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	3201      	adds	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e79e      	b.n	8004f98 <_dtoa_r+0x648>
 800505a:	46d0      	mov	r8, sl
 800505c:	e7eb      	b.n	8005036 <_dtoa_r+0x6e6>
 800505e:	2200      	movs	r2, #0
 8005060:	4b6e      	ldr	r3, [pc, #440]	; (800521c <_dtoa_r+0x8cc>)
 8005062:	f7fb fa39 	bl	80004d8 <__aeabi_dmul>
 8005066:	2200      	movs	r2, #0
 8005068:	2300      	movs	r3, #0
 800506a:	4680      	mov	r8, r0
 800506c:	4689      	mov	r9, r1
 800506e:	f7fb fc9b 	bl	80009a8 <__aeabi_dcmpeq>
 8005072:	2800      	cmp	r0, #0
 8005074:	d09b      	beq.n	8004fae <_dtoa_r+0x65e>
 8005076:	e7cd      	b.n	8005014 <_dtoa_r+0x6c4>
 8005078:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800507a:	2a00      	cmp	r2, #0
 800507c:	f000 80d0 	beq.w	8005220 <_dtoa_r+0x8d0>
 8005080:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005082:	2a01      	cmp	r2, #1
 8005084:	f300 80ae 	bgt.w	80051e4 <_dtoa_r+0x894>
 8005088:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800508a:	2a00      	cmp	r2, #0
 800508c:	f000 80a6 	beq.w	80051dc <_dtoa_r+0x88c>
 8005090:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005094:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005096:	9f06      	ldr	r7, [sp, #24]
 8005098:	9a06      	ldr	r2, [sp, #24]
 800509a:	2101      	movs	r1, #1
 800509c:	441a      	add	r2, r3
 800509e:	9206      	str	r2, [sp, #24]
 80050a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050a2:	4628      	mov	r0, r5
 80050a4:	441a      	add	r2, r3
 80050a6:	9209      	str	r2, [sp, #36]	; 0x24
 80050a8:	f000 fb5e 	bl	8005768 <__i2b>
 80050ac:	4606      	mov	r6, r0
 80050ae:	2f00      	cmp	r7, #0
 80050b0:	dd0c      	ble.n	80050cc <_dtoa_r+0x77c>
 80050b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	dd09      	ble.n	80050cc <_dtoa_r+0x77c>
 80050b8:	42bb      	cmp	r3, r7
 80050ba:	bfa8      	it	ge
 80050bc:	463b      	movge	r3, r7
 80050be:	9a06      	ldr	r2, [sp, #24]
 80050c0:	1aff      	subs	r7, r7, r3
 80050c2:	1ad2      	subs	r2, r2, r3
 80050c4:	9206      	str	r2, [sp, #24]
 80050c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	9309      	str	r3, [sp, #36]	; 0x24
 80050cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ce:	b1f3      	cbz	r3, 800510e <_dtoa_r+0x7be>
 80050d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 80a8 	beq.w	8005228 <_dtoa_r+0x8d8>
 80050d8:	2c00      	cmp	r4, #0
 80050da:	dd10      	ble.n	80050fe <_dtoa_r+0x7ae>
 80050dc:	4631      	mov	r1, r6
 80050de:	4622      	mov	r2, r4
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 fbff 	bl	80058e4 <__pow5mult>
 80050e6:	465a      	mov	r2, fp
 80050e8:	4601      	mov	r1, r0
 80050ea:	4606      	mov	r6, r0
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 fb51 	bl	8005794 <__multiply>
 80050f2:	4680      	mov	r8, r0
 80050f4:	4659      	mov	r1, fp
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 fa80 	bl	80055fc <_Bfree>
 80050fc:	46c3      	mov	fp, r8
 80050fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005100:	1b1a      	subs	r2, r3, r4
 8005102:	d004      	beq.n	800510e <_dtoa_r+0x7be>
 8005104:	4659      	mov	r1, fp
 8005106:	4628      	mov	r0, r5
 8005108:	f000 fbec 	bl	80058e4 <__pow5mult>
 800510c:	4683      	mov	fp, r0
 800510e:	2101      	movs	r1, #1
 8005110:	4628      	mov	r0, r5
 8005112:	f000 fb29 	bl	8005768 <__i2b>
 8005116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005118:	4604      	mov	r4, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	f340 8086 	ble.w	800522c <_dtoa_r+0x8dc>
 8005120:	461a      	mov	r2, r3
 8005122:	4601      	mov	r1, r0
 8005124:	4628      	mov	r0, r5
 8005126:	f000 fbdd 	bl	80058e4 <__pow5mult>
 800512a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800512c:	4604      	mov	r4, r0
 800512e:	2b01      	cmp	r3, #1
 8005130:	dd7f      	ble.n	8005232 <_dtoa_r+0x8e2>
 8005132:	f04f 0800 	mov.w	r8, #0
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800513c:	6918      	ldr	r0, [r3, #16]
 800513e:	f000 fac5 	bl	80056cc <__hi0bits>
 8005142:	f1c0 0020 	rsb	r0, r0, #32
 8005146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005148:	4418      	add	r0, r3
 800514a:	f010 001f 	ands.w	r0, r0, #31
 800514e:	f000 8092 	beq.w	8005276 <_dtoa_r+0x926>
 8005152:	f1c0 0320 	rsb	r3, r0, #32
 8005156:	2b04      	cmp	r3, #4
 8005158:	f340 808a 	ble.w	8005270 <_dtoa_r+0x920>
 800515c:	f1c0 001c 	rsb	r0, r0, #28
 8005160:	9b06      	ldr	r3, [sp, #24]
 8005162:	4407      	add	r7, r0
 8005164:	4403      	add	r3, r0
 8005166:	9306      	str	r3, [sp, #24]
 8005168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516a:	4403      	add	r3, r0
 800516c:	9309      	str	r3, [sp, #36]	; 0x24
 800516e:	9b06      	ldr	r3, [sp, #24]
 8005170:	2b00      	cmp	r3, #0
 8005172:	dd05      	ble.n	8005180 <_dtoa_r+0x830>
 8005174:	4659      	mov	r1, fp
 8005176:	461a      	mov	r2, r3
 8005178:	4628      	mov	r0, r5
 800517a:	f000 fc0d 	bl	8005998 <__lshift>
 800517e:	4683      	mov	fp, r0
 8005180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	dd05      	ble.n	8005192 <_dtoa_r+0x842>
 8005186:	4621      	mov	r1, r4
 8005188:	461a      	mov	r2, r3
 800518a:	4628      	mov	r0, r5
 800518c:	f000 fc04 	bl	8005998 <__lshift>
 8005190:	4604      	mov	r4, r0
 8005192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d070      	beq.n	800527a <_dtoa_r+0x92a>
 8005198:	4621      	mov	r1, r4
 800519a:	4658      	mov	r0, fp
 800519c:	f000 fc6c 	bl	8005a78 <__mcmp>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	da6a      	bge.n	800527a <_dtoa_r+0x92a>
 80051a4:	2300      	movs	r3, #0
 80051a6:	4659      	mov	r1, fp
 80051a8:	220a      	movs	r2, #10
 80051aa:	4628      	mov	r0, r5
 80051ac:	f000 fa48 	bl	8005640 <__multadd>
 80051b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b2:	4683      	mov	fp, r0
 80051b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8194 	beq.w	80054e6 <_dtoa_r+0xb96>
 80051be:	4631      	mov	r1, r6
 80051c0:	2300      	movs	r3, #0
 80051c2:	220a      	movs	r2, #10
 80051c4:	4628      	mov	r0, r5
 80051c6:	f000 fa3b 	bl	8005640 <__multadd>
 80051ca:	f1b9 0f00 	cmp.w	r9, #0
 80051ce:	4606      	mov	r6, r0
 80051d0:	f300 8093 	bgt.w	80052fa <_dtoa_r+0x9aa>
 80051d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	dc57      	bgt.n	800528a <_dtoa_r+0x93a>
 80051da:	e08e      	b.n	80052fa <_dtoa_r+0x9aa>
 80051dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80051de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80051e2:	e757      	b.n	8005094 <_dtoa_r+0x744>
 80051e4:	9b08      	ldr	r3, [sp, #32]
 80051e6:	1e5c      	subs	r4, r3, #1
 80051e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ea:	42a3      	cmp	r3, r4
 80051ec:	bfb7      	itett	lt
 80051ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80051f0:	1b1c      	subge	r4, r3, r4
 80051f2:	1ae2      	sublt	r2, r4, r3
 80051f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80051f6:	bfbe      	ittt	lt
 80051f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80051fa:	189b      	addlt	r3, r3, r2
 80051fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80051fe:	9b08      	ldr	r3, [sp, #32]
 8005200:	bfb8      	it	lt
 8005202:	2400      	movlt	r4, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	bfbb      	ittet	lt
 8005208:	9b06      	ldrlt	r3, [sp, #24]
 800520a:	9a08      	ldrlt	r2, [sp, #32]
 800520c:	9f06      	ldrge	r7, [sp, #24]
 800520e:	1a9f      	sublt	r7, r3, r2
 8005210:	bfac      	ite	ge
 8005212:	9b08      	ldrge	r3, [sp, #32]
 8005214:	2300      	movlt	r3, #0
 8005216:	e73f      	b.n	8005098 <_dtoa_r+0x748>
 8005218:	3fe00000 	.word	0x3fe00000
 800521c:	40240000 	.word	0x40240000
 8005220:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005222:	9f06      	ldr	r7, [sp, #24]
 8005224:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005226:	e742      	b.n	80050ae <_dtoa_r+0x75e>
 8005228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800522a:	e76b      	b.n	8005104 <_dtoa_r+0x7b4>
 800522c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800522e:	2b01      	cmp	r3, #1
 8005230:	dc19      	bgt.n	8005266 <_dtoa_r+0x916>
 8005232:	9b04      	ldr	r3, [sp, #16]
 8005234:	b9bb      	cbnz	r3, 8005266 <_dtoa_r+0x916>
 8005236:	9b05      	ldr	r3, [sp, #20]
 8005238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800523c:	b99b      	cbnz	r3, 8005266 <_dtoa_r+0x916>
 800523e:	9b05      	ldr	r3, [sp, #20]
 8005240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005244:	0d1b      	lsrs	r3, r3, #20
 8005246:	051b      	lsls	r3, r3, #20
 8005248:	b183      	cbz	r3, 800526c <_dtoa_r+0x91c>
 800524a:	f04f 0801 	mov.w	r8, #1
 800524e:	9b06      	ldr	r3, [sp, #24]
 8005250:	3301      	adds	r3, #1
 8005252:	9306      	str	r3, [sp, #24]
 8005254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005256:	3301      	adds	r3, #1
 8005258:	9309      	str	r3, [sp, #36]	; 0x24
 800525a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	f47f af6a 	bne.w	8005136 <_dtoa_r+0x7e6>
 8005262:	2001      	movs	r0, #1
 8005264:	e76f      	b.n	8005146 <_dtoa_r+0x7f6>
 8005266:	f04f 0800 	mov.w	r8, #0
 800526a:	e7f6      	b.n	800525a <_dtoa_r+0x90a>
 800526c:	4698      	mov	r8, r3
 800526e:	e7f4      	b.n	800525a <_dtoa_r+0x90a>
 8005270:	f43f af7d 	beq.w	800516e <_dtoa_r+0x81e>
 8005274:	4618      	mov	r0, r3
 8005276:	301c      	adds	r0, #28
 8005278:	e772      	b.n	8005160 <_dtoa_r+0x810>
 800527a:	9b08      	ldr	r3, [sp, #32]
 800527c:	2b00      	cmp	r3, #0
 800527e:	dc36      	bgt.n	80052ee <_dtoa_r+0x99e>
 8005280:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005282:	2b02      	cmp	r3, #2
 8005284:	dd33      	ble.n	80052ee <_dtoa_r+0x99e>
 8005286:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800528a:	f1b9 0f00 	cmp.w	r9, #0
 800528e:	d10d      	bne.n	80052ac <_dtoa_r+0x95c>
 8005290:	4621      	mov	r1, r4
 8005292:	464b      	mov	r3, r9
 8005294:	2205      	movs	r2, #5
 8005296:	4628      	mov	r0, r5
 8005298:	f000 f9d2 	bl	8005640 <__multadd>
 800529c:	4601      	mov	r1, r0
 800529e:	4604      	mov	r4, r0
 80052a0:	4658      	mov	r0, fp
 80052a2:	f000 fbe9 	bl	8005a78 <__mcmp>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	f73f adb8 	bgt.w	8004e1c <_dtoa_r+0x4cc>
 80052ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052ae:	9f03      	ldr	r7, [sp, #12]
 80052b0:	ea6f 0a03 	mvn.w	sl, r3
 80052b4:	f04f 0800 	mov.w	r8, #0
 80052b8:	4621      	mov	r1, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 f99e 	bl	80055fc <_Bfree>
 80052c0:	2e00      	cmp	r6, #0
 80052c2:	f43f aea7 	beq.w	8005014 <_dtoa_r+0x6c4>
 80052c6:	f1b8 0f00 	cmp.w	r8, #0
 80052ca:	d005      	beq.n	80052d8 <_dtoa_r+0x988>
 80052cc:	45b0      	cmp	r8, r6
 80052ce:	d003      	beq.n	80052d8 <_dtoa_r+0x988>
 80052d0:	4641      	mov	r1, r8
 80052d2:	4628      	mov	r0, r5
 80052d4:	f000 f992 	bl	80055fc <_Bfree>
 80052d8:	4631      	mov	r1, r6
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f98e 	bl	80055fc <_Bfree>
 80052e0:	e698      	b.n	8005014 <_dtoa_r+0x6c4>
 80052e2:	2400      	movs	r4, #0
 80052e4:	4626      	mov	r6, r4
 80052e6:	e7e1      	b.n	80052ac <_dtoa_r+0x95c>
 80052e8:	46c2      	mov	sl, r8
 80052ea:	4626      	mov	r6, r4
 80052ec:	e596      	b.n	8004e1c <_dtoa_r+0x4cc>
 80052ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 80fd 	beq.w	80054f4 <_dtoa_r+0xba4>
 80052fa:	2f00      	cmp	r7, #0
 80052fc:	dd05      	ble.n	800530a <_dtoa_r+0x9ba>
 80052fe:	4631      	mov	r1, r6
 8005300:	463a      	mov	r2, r7
 8005302:	4628      	mov	r0, r5
 8005304:	f000 fb48 	bl	8005998 <__lshift>
 8005308:	4606      	mov	r6, r0
 800530a:	f1b8 0f00 	cmp.w	r8, #0
 800530e:	d05c      	beq.n	80053ca <_dtoa_r+0xa7a>
 8005310:	4628      	mov	r0, r5
 8005312:	6871      	ldr	r1, [r6, #4]
 8005314:	f000 f932 	bl	800557c <_Balloc>
 8005318:	4607      	mov	r7, r0
 800531a:	b928      	cbnz	r0, 8005328 <_dtoa_r+0x9d8>
 800531c:	4602      	mov	r2, r0
 800531e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005322:	4b7f      	ldr	r3, [pc, #508]	; (8005520 <_dtoa_r+0xbd0>)
 8005324:	f7ff bb28 	b.w	8004978 <_dtoa_r+0x28>
 8005328:	6932      	ldr	r2, [r6, #16]
 800532a:	f106 010c 	add.w	r1, r6, #12
 800532e:	3202      	adds	r2, #2
 8005330:	0092      	lsls	r2, r2, #2
 8005332:	300c      	adds	r0, #12
 8005334:	f000 f914 	bl	8005560 <memcpy>
 8005338:	2201      	movs	r2, #1
 800533a:	4639      	mov	r1, r7
 800533c:	4628      	mov	r0, r5
 800533e:	f000 fb2b 	bl	8005998 <__lshift>
 8005342:	46b0      	mov	r8, r6
 8005344:	4606      	mov	r6, r0
 8005346:	9b03      	ldr	r3, [sp, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	9308      	str	r3, [sp, #32]
 800534c:	9b03      	ldr	r3, [sp, #12]
 800534e:	444b      	add	r3, r9
 8005350:	930a      	str	r3, [sp, #40]	; 0x28
 8005352:	9b04      	ldr	r3, [sp, #16]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	9309      	str	r3, [sp, #36]	; 0x24
 800535a:	9b08      	ldr	r3, [sp, #32]
 800535c:	4621      	mov	r1, r4
 800535e:	3b01      	subs	r3, #1
 8005360:	4658      	mov	r0, fp
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	f7ff fa66 	bl	8004834 <quorem>
 8005368:	4603      	mov	r3, r0
 800536a:	4641      	mov	r1, r8
 800536c:	3330      	adds	r3, #48	; 0x30
 800536e:	9006      	str	r0, [sp, #24]
 8005370:	4658      	mov	r0, fp
 8005372:	930b      	str	r3, [sp, #44]	; 0x2c
 8005374:	f000 fb80 	bl	8005a78 <__mcmp>
 8005378:	4632      	mov	r2, r6
 800537a:	4681      	mov	r9, r0
 800537c:	4621      	mov	r1, r4
 800537e:	4628      	mov	r0, r5
 8005380:	f000 fb96 	bl	8005ab0 <__mdiff>
 8005384:	68c2      	ldr	r2, [r0, #12]
 8005386:	4607      	mov	r7, r0
 8005388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538a:	bb02      	cbnz	r2, 80053ce <_dtoa_r+0xa7e>
 800538c:	4601      	mov	r1, r0
 800538e:	4658      	mov	r0, fp
 8005390:	f000 fb72 	bl	8005a78 <__mcmp>
 8005394:	4602      	mov	r2, r0
 8005396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005398:	4639      	mov	r1, r7
 800539a:	4628      	mov	r0, r5
 800539c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80053a0:	f000 f92c 	bl	80055fc <_Bfree>
 80053a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053a8:	9f08      	ldr	r7, [sp, #32]
 80053aa:	ea43 0102 	orr.w	r1, r3, r2
 80053ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b0:	430b      	orrs	r3, r1
 80053b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053b4:	d10d      	bne.n	80053d2 <_dtoa_r+0xa82>
 80053b6:	2b39      	cmp	r3, #57	; 0x39
 80053b8:	d029      	beq.n	800540e <_dtoa_r+0xabe>
 80053ba:	f1b9 0f00 	cmp.w	r9, #0
 80053be:	dd01      	ble.n	80053c4 <_dtoa_r+0xa74>
 80053c0:	9b06      	ldr	r3, [sp, #24]
 80053c2:	3331      	adds	r3, #49	; 0x31
 80053c4:	9a04      	ldr	r2, [sp, #16]
 80053c6:	7013      	strb	r3, [r2, #0]
 80053c8:	e776      	b.n	80052b8 <_dtoa_r+0x968>
 80053ca:	4630      	mov	r0, r6
 80053cc:	e7b9      	b.n	8005342 <_dtoa_r+0x9f2>
 80053ce:	2201      	movs	r2, #1
 80053d0:	e7e2      	b.n	8005398 <_dtoa_r+0xa48>
 80053d2:	f1b9 0f00 	cmp.w	r9, #0
 80053d6:	db06      	blt.n	80053e6 <_dtoa_r+0xa96>
 80053d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80053da:	ea41 0909 	orr.w	r9, r1, r9
 80053de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053e0:	ea59 0101 	orrs.w	r1, r9, r1
 80053e4:	d120      	bne.n	8005428 <_dtoa_r+0xad8>
 80053e6:	2a00      	cmp	r2, #0
 80053e8:	ddec      	ble.n	80053c4 <_dtoa_r+0xa74>
 80053ea:	4659      	mov	r1, fp
 80053ec:	2201      	movs	r2, #1
 80053ee:	4628      	mov	r0, r5
 80053f0:	9308      	str	r3, [sp, #32]
 80053f2:	f000 fad1 	bl	8005998 <__lshift>
 80053f6:	4621      	mov	r1, r4
 80053f8:	4683      	mov	fp, r0
 80053fa:	f000 fb3d 	bl	8005a78 <__mcmp>
 80053fe:	2800      	cmp	r0, #0
 8005400:	9b08      	ldr	r3, [sp, #32]
 8005402:	dc02      	bgt.n	800540a <_dtoa_r+0xaba>
 8005404:	d1de      	bne.n	80053c4 <_dtoa_r+0xa74>
 8005406:	07da      	lsls	r2, r3, #31
 8005408:	d5dc      	bpl.n	80053c4 <_dtoa_r+0xa74>
 800540a:	2b39      	cmp	r3, #57	; 0x39
 800540c:	d1d8      	bne.n	80053c0 <_dtoa_r+0xa70>
 800540e:	2339      	movs	r3, #57	; 0x39
 8005410:	9a04      	ldr	r2, [sp, #16]
 8005412:	7013      	strb	r3, [r2, #0]
 8005414:	463b      	mov	r3, r7
 8005416:	461f      	mov	r7, r3
 8005418:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800541c:	3b01      	subs	r3, #1
 800541e:	2a39      	cmp	r2, #57	; 0x39
 8005420:	d050      	beq.n	80054c4 <_dtoa_r+0xb74>
 8005422:	3201      	adds	r2, #1
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e747      	b.n	80052b8 <_dtoa_r+0x968>
 8005428:	2a00      	cmp	r2, #0
 800542a:	dd03      	ble.n	8005434 <_dtoa_r+0xae4>
 800542c:	2b39      	cmp	r3, #57	; 0x39
 800542e:	d0ee      	beq.n	800540e <_dtoa_r+0xabe>
 8005430:	3301      	adds	r3, #1
 8005432:	e7c7      	b.n	80053c4 <_dtoa_r+0xa74>
 8005434:	9a08      	ldr	r2, [sp, #32]
 8005436:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005438:	f802 3c01 	strb.w	r3, [r2, #-1]
 800543c:	428a      	cmp	r2, r1
 800543e:	d02a      	beq.n	8005496 <_dtoa_r+0xb46>
 8005440:	4659      	mov	r1, fp
 8005442:	2300      	movs	r3, #0
 8005444:	220a      	movs	r2, #10
 8005446:	4628      	mov	r0, r5
 8005448:	f000 f8fa 	bl	8005640 <__multadd>
 800544c:	45b0      	cmp	r8, r6
 800544e:	4683      	mov	fp, r0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	f04f 020a 	mov.w	r2, #10
 8005458:	4641      	mov	r1, r8
 800545a:	4628      	mov	r0, r5
 800545c:	d107      	bne.n	800546e <_dtoa_r+0xb1e>
 800545e:	f000 f8ef 	bl	8005640 <__multadd>
 8005462:	4680      	mov	r8, r0
 8005464:	4606      	mov	r6, r0
 8005466:	9b08      	ldr	r3, [sp, #32]
 8005468:	3301      	adds	r3, #1
 800546a:	9308      	str	r3, [sp, #32]
 800546c:	e775      	b.n	800535a <_dtoa_r+0xa0a>
 800546e:	f000 f8e7 	bl	8005640 <__multadd>
 8005472:	4631      	mov	r1, r6
 8005474:	4680      	mov	r8, r0
 8005476:	2300      	movs	r3, #0
 8005478:	220a      	movs	r2, #10
 800547a:	4628      	mov	r0, r5
 800547c:	f000 f8e0 	bl	8005640 <__multadd>
 8005480:	4606      	mov	r6, r0
 8005482:	e7f0      	b.n	8005466 <_dtoa_r+0xb16>
 8005484:	f1b9 0f00 	cmp.w	r9, #0
 8005488:	bfcc      	ite	gt
 800548a:	464f      	movgt	r7, r9
 800548c:	2701      	movle	r7, #1
 800548e:	f04f 0800 	mov.w	r8, #0
 8005492:	9a03      	ldr	r2, [sp, #12]
 8005494:	4417      	add	r7, r2
 8005496:	4659      	mov	r1, fp
 8005498:	2201      	movs	r2, #1
 800549a:	4628      	mov	r0, r5
 800549c:	9308      	str	r3, [sp, #32]
 800549e:	f000 fa7b 	bl	8005998 <__lshift>
 80054a2:	4621      	mov	r1, r4
 80054a4:	4683      	mov	fp, r0
 80054a6:	f000 fae7 	bl	8005a78 <__mcmp>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	dcb2      	bgt.n	8005414 <_dtoa_r+0xac4>
 80054ae:	d102      	bne.n	80054b6 <_dtoa_r+0xb66>
 80054b0:	9b08      	ldr	r3, [sp, #32]
 80054b2:	07db      	lsls	r3, r3, #31
 80054b4:	d4ae      	bmi.n	8005414 <_dtoa_r+0xac4>
 80054b6:	463b      	mov	r3, r7
 80054b8:	461f      	mov	r7, r3
 80054ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054be:	2a30      	cmp	r2, #48	; 0x30
 80054c0:	d0fa      	beq.n	80054b8 <_dtoa_r+0xb68>
 80054c2:	e6f9      	b.n	80052b8 <_dtoa_r+0x968>
 80054c4:	9a03      	ldr	r2, [sp, #12]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d1a5      	bne.n	8005416 <_dtoa_r+0xac6>
 80054ca:	2331      	movs	r3, #49	; 0x31
 80054cc:	f10a 0a01 	add.w	sl, sl, #1
 80054d0:	e779      	b.n	80053c6 <_dtoa_r+0xa76>
 80054d2:	4b14      	ldr	r3, [pc, #80]	; (8005524 <_dtoa_r+0xbd4>)
 80054d4:	f7ff baa8 	b.w	8004a28 <_dtoa_r+0xd8>
 80054d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f47f aa81 	bne.w	80049e2 <_dtoa_r+0x92>
 80054e0:	4b11      	ldr	r3, [pc, #68]	; (8005528 <_dtoa_r+0xbd8>)
 80054e2:	f7ff baa1 	b.w	8004a28 <_dtoa_r+0xd8>
 80054e6:	f1b9 0f00 	cmp.w	r9, #0
 80054ea:	dc03      	bgt.n	80054f4 <_dtoa_r+0xba4>
 80054ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	f73f aecb 	bgt.w	800528a <_dtoa_r+0x93a>
 80054f4:	9f03      	ldr	r7, [sp, #12]
 80054f6:	4621      	mov	r1, r4
 80054f8:	4658      	mov	r0, fp
 80054fa:	f7ff f99b 	bl	8004834 <quorem>
 80054fe:	9a03      	ldr	r2, [sp, #12]
 8005500:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005504:	f807 3b01 	strb.w	r3, [r7], #1
 8005508:	1aba      	subs	r2, r7, r2
 800550a:	4591      	cmp	r9, r2
 800550c:	ddba      	ble.n	8005484 <_dtoa_r+0xb34>
 800550e:	4659      	mov	r1, fp
 8005510:	2300      	movs	r3, #0
 8005512:	220a      	movs	r2, #10
 8005514:	4628      	mov	r0, r5
 8005516:	f000 f893 	bl	8005640 <__multadd>
 800551a:	4683      	mov	fp, r0
 800551c:	e7eb      	b.n	80054f6 <_dtoa_r+0xba6>
 800551e:	bf00      	nop
 8005520:	08006e0b 	.word	0x08006e0b
 8005524:	08006d68 	.word	0x08006d68
 8005528:	08006d8c 	.word	0x08006d8c

0800552c <_localeconv_r>:
 800552c:	4800      	ldr	r0, [pc, #0]	; (8005530 <_localeconv_r+0x4>)
 800552e:	4770      	bx	lr
 8005530:	20000160 	.word	0x20000160

08005534 <malloc>:
 8005534:	4b02      	ldr	r3, [pc, #8]	; (8005540 <malloc+0xc>)
 8005536:	4601      	mov	r1, r0
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	f000 bc1d 	b.w	8005d78 <_malloc_r>
 800553e:	bf00      	nop
 8005540:	2000000c 	.word	0x2000000c

08005544 <memchr>:
 8005544:	4603      	mov	r3, r0
 8005546:	b510      	push	{r4, lr}
 8005548:	b2c9      	uxtb	r1, r1
 800554a:	4402      	add	r2, r0
 800554c:	4293      	cmp	r3, r2
 800554e:	4618      	mov	r0, r3
 8005550:	d101      	bne.n	8005556 <memchr+0x12>
 8005552:	2000      	movs	r0, #0
 8005554:	e003      	b.n	800555e <memchr+0x1a>
 8005556:	7804      	ldrb	r4, [r0, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	428c      	cmp	r4, r1
 800555c:	d1f6      	bne.n	800554c <memchr+0x8>
 800555e:	bd10      	pop	{r4, pc}

08005560 <memcpy>:
 8005560:	440a      	add	r2, r1
 8005562:	4291      	cmp	r1, r2
 8005564:	f100 33ff 	add.w	r3, r0, #4294967295
 8005568:	d100      	bne.n	800556c <memcpy+0xc>
 800556a:	4770      	bx	lr
 800556c:	b510      	push	{r4, lr}
 800556e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005572:	4291      	cmp	r1, r2
 8005574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005578:	d1f9      	bne.n	800556e <memcpy+0xe>
 800557a:	bd10      	pop	{r4, pc}

0800557c <_Balloc>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005580:	4604      	mov	r4, r0
 8005582:	460d      	mov	r5, r1
 8005584:	b976      	cbnz	r6, 80055a4 <_Balloc+0x28>
 8005586:	2010      	movs	r0, #16
 8005588:	f7ff ffd4 	bl	8005534 <malloc>
 800558c:	4602      	mov	r2, r0
 800558e:	6260      	str	r0, [r4, #36]	; 0x24
 8005590:	b920      	cbnz	r0, 800559c <_Balloc+0x20>
 8005592:	2166      	movs	r1, #102	; 0x66
 8005594:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <_Balloc+0x78>)
 8005596:	4818      	ldr	r0, [pc, #96]	; (80055f8 <_Balloc+0x7c>)
 8005598:	f000 fdce 	bl	8006138 <__assert_func>
 800559c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055a0:	6006      	str	r6, [r0, #0]
 80055a2:	60c6      	str	r6, [r0, #12]
 80055a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055a6:	68f3      	ldr	r3, [r6, #12]
 80055a8:	b183      	cbz	r3, 80055cc <_Balloc+0x50>
 80055aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055b2:	b9b8      	cbnz	r0, 80055e4 <_Balloc+0x68>
 80055b4:	2101      	movs	r1, #1
 80055b6:	fa01 f605 	lsl.w	r6, r1, r5
 80055ba:	1d72      	adds	r2, r6, #5
 80055bc:	4620      	mov	r0, r4
 80055be:	0092      	lsls	r2, r2, #2
 80055c0:	f000 fb5e 	bl	8005c80 <_calloc_r>
 80055c4:	b160      	cbz	r0, 80055e0 <_Balloc+0x64>
 80055c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055ca:	e00e      	b.n	80055ea <_Balloc+0x6e>
 80055cc:	2221      	movs	r2, #33	; 0x21
 80055ce:	2104      	movs	r1, #4
 80055d0:	4620      	mov	r0, r4
 80055d2:	f000 fb55 	bl	8005c80 <_calloc_r>
 80055d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d8:	60f0      	str	r0, [r6, #12]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e4      	bne.n	80055aa <_Balloc+0x2e>
 80055e0:	2000      	movs	r0, #0
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	6802      	ldr	r2, [r0, #0]
 80055e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055ea:	2300      	movs	r3, #0
 80055ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055f0:	e7f7      	b.n	80055e2 <_Balloc+0x66>
 80055f2:	bf00      	nop
 80055f4:	08006d99 	.word	0x08006d99
 80055f8:	08006e1c 	.word	0x08006e1c

080055fc <_Bfree>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005600:	4605      	mov	r5, r0
 8005602:	460c      	mov	r4, r1
 8005604:	b976      	cbnz	r6, 8005624 <_Bfree+0x28>
 8005606:	2010      	movs	r0, #16
 8005608:	f7ff ff94 	bl	8005534 <malloc>
 800560c:	4602      	mov	r2, r0
 800560e:	6268      	str	r0, [r5, #36]	; 0x24
 8005610:	b920      	cbnz	r0, 800561c <_Bfree+0x20>
 8005612:	218a      	movs	r1, #138	; 0x8a
 8005614:	4b08      	ldr	r3, [pc, #32]	; (8005638 <_Bfree+0x3c>)
 8005616:	4809      	ldr	r0, [pc, #36]	; (800563c <_Bfree+0x40>)
 8005618:	f000 fd8e 	bl	8006138 <__assert_func>
 800561c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005620:	6006      	str	r6, [r0, #0]
 8005622:	60c6      	str	r6, [r0, #12]
 8005624:	b13c      	cbz	r4, 8005636 <_Bfree+0x3a>
 8005626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005628:	6862      	ldr	r2, [r4, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005630:	6021      	str	r1, [r4, #0]
 8005632:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	08006d99 	.word	0x08006d99
 800563c:	08006e1c 	.word	0x08006e1c

08005640 <__multadd>:
 8005640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005644:	4607      	mov	r7, r0
 8005646:	460c      	mov	r4, r1
 8005648:	461e      	mov	r6, r3
 800564a:	2000      	movs	r0, #0
 800564c:	690d      	ldr	r5, [r1, #16]
 800564e:	f101 0c14 	add.w	ip, r1, #20
 8005652:	f8dc 3000 	ldr.w	r3, [ip]
 8005656:	3001      	adds	r0, #1
 8005658:	b299      	uxth	r1, r3
 800565a:	fb02 6101 	mla	r1, r2, r1, r6
 800565e:	0c1e      	lsrs	r6, r3, #16
 8005660:	0c0b      	lsrs	r3, r1, #16
 8005662:	fb02 3306 	mla	r3, r2, r6, r3
 8005666:	b289      	uxth	r1, r1
 8005668:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800566c:	4285      	cmp	r5, r0
 800566e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005672:	f84c 1b04 	str.w	r1, [ip], #4
 8005676:	dcec      	bgt.n	8005652 <__multadd+0x12>
 8005678:	b30e      	cbz	r6, 80056be <__multadd+0x7e>
 800567a:	68a3      	ldr	r3, [r4, #8]
 800567c:	42ab      	cmp	r3, r5
 800567e:	dc19      	bgt.n	80056b4 <__multadd+0x74>
 8005680:	6861      	ldr	r1, [r4, #4]
 8005682:	4638      	mov	r0, r7
 8005684:	3101      	adds	r1, #1
 8005686:	f7ff ff79 	bl	800557c <_Balloc>
 800568a:	4680      	mov	r8, r0
 800568c:	b928      	cbnz	r0, 800569a <__multadd+0x5a>
 800568e:	4602      	mov	r2, r0
 8005690:	21b5      	movs	r1, #181	; 0xb5
 8005692:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <__multadd+0x84>)
 8005694:	480c      	ldr	r0, [pc, #48]	; (80056c8 <__multadd+0x88>)
 8005696:	f000 fd4f 	bl	8006138 <__assert_func>
 800569a:	6922      	ldr	r2, [r4, #16]
 800569c:	f104 010c 	add.w	r1, r4, #12
 80056a0:	3202      	adds	r2, #2
 80056a2:	0092      	lsls	r2, r2, #2
 80056a4:	300c      	adds	r0, #12
 80056a6:	f7ff ff5b 	bl	8005560 <memcpy>
 80056aa:	4621      	mov	r1, r4
 80056ac:	4638      	mov	r0, r7
 80056ae:	f7ff ffa5 	bl	80055fc <_Bfree>
 80056b2:	4644      	mov	r4, r8
 80056b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056b8:	3501      	adds	r5, #1
 80056ba:	615e      	str	r6, [r3, #20]
 80056bc:	6125      	str	r5, [r4, #16]
 80056be:	4620      	mov	r0, r4
 80056c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c4:	08006e0b 	.word	0x08006e0b
 80056c8:	08006e1c 	.word	0x08006e1c

080056cc <__hi0bits>:
 80056cc:	0c02      	lsrs	r2, r0, #16
 80056ce:	0412      	lsls	r2, r2, #16
 80056d0:	4603      	mov	r3, r0
 80056d2:	b9ca      	cbnz	r2, 8005708 <__hi0bits+0x3c>
 80056d4:	0403      	lsls	r3, r0, #16
 80056d6:	2010      	movs	r0, #16
 80056d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80056dc:	bf04      	itt	eq
 80056de:	021b      	lsleq	r3, r3, #8
 80056e0:	3008      	addeq	r0, #8
 80056e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80056e6:	bf04      	itt	eq
 80056e8:	011b      	lsleq	r3, r3, #4
 80056ea:	3004      	addeq	r0, #4
 80056ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80056f0:	bf04      	itt	eq
 80056f2:	009b      	lsleq	r3, r3, #2
 80056f4:	3002      	addeq	r0, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	db05      	blt.n	8005706 <__hi0bits+0x3a>
 80056fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80056fe:	f100 0001 	add.w	r0, r0, #1
 8005702:	bf08      	it	eq
 8005704:	2020      	moveq	r0, #32
 8005706:	4770      	bx	lr
 8005708:	2000      	movs	r0, #0
 800570a:	e7e5      	b.n	80056d8 <__hi0bits+0xc>

0800570c <__lo0bits>:
 800570c:	6803      	ldr	r3, [r0, #0]
 800570e:	4602      	mov	r2, r0
 8005710:	f013 0007 	ands.w	r0, r3, #7
 8005714:	d00b      	beq.n	800572e <__lo0bits+0x22>
 8005716:	07d9      	lsls	r1, r3, #31
 8005718:	d421      	bmi.n	800575e <__lo0bits+0x52>
 800571a:	0798      	lsls	r0, r3, #30
 800571c:	bf49      	itett	mi
 800571e:	085b      	lsrmi	r3, r3, #1
 8005720:	089b      	lsrpl	r3, r3, #2
 8005722:	2001      	movmi	r0, #1
 8005724:	6013      	strmi	r3, [r2, #0]
 8005726:	bf5c      	itt	pl
 8005728:	2002      	movpl	r0, #2
 800572a:	6013      	strpl	r3, [r2, #0]
 800572c:	4770      	bx	lr
 800572e:	b299      	uxth	r1, r3
 8005730:	b909      	cbnz	r1, 8005736 <__lo0bits+0x2a>
 8005732:	2010      	movs	r0, #16
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	b2d9      	uxtb	r1, r3
 8005738:	b909      	cbnz	r1, 800573e <__lo0bits+0x32>
 800573a:	3008      	adds	r0, #8
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	0719      	lsls	r1, r3, #28
 8005740:	bf04      	itt	eq
 8005742:	091b      	lsreq	r3, r3, #4
 8005744:	3004      	addeq	r0, #4
 8005746:	0799      	lsls	r1, r3, #30
 8005748:	bf04      	itt	eq
 800574a:	089b      	lsreq	r3, r3, #2
 800574c:	3002      	addeq	r0, #2
 800574e:	07d9      	lsls	r1, r3, #31
 8005750:	d403      	bmi.n	800575a <__lo0bits+0x4e>
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	f100 0001 	add.w	r0, r0, #1
 8005758:	d003      	beq.n	8005762 <__lo0bits+0x56>
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	4770      	bx	lr
 800575e:	2000      	movs	r0, #0
 8005760:	4770      	bx	lr
 8005762:	2020      	movs	r0, #32
 8005764:	4770      	bx	lr
	...

08005768 <__i2b>:
 8005768:	b510      	push	{r4, lr}
 800576a:	460c      	mov	r4, r1
 800576c:	2101      	movs	r1, #1
 800576e:	f7ff ff05 	bl	800557c <_Balloc>
 8005772:	4602      	mov	r2, r0
 8005774:	b928      	cbnz	r0, 8005782 <__i2b+0x1a>
 8005776:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800577a:	4b04      	ldr	r3, [pc, #16]	; (800578c <__i2b+0x24>)
 800577c:	4804      	ldr	r0, [pc, #16]	; (8005790 <__i2b+0x28>)
 800577e:	f000 fcdb 	bl	8006138 <__assert_func>
 8005782:	2301      	movs	r3, #1
 8005784:	6144      	str	r4, [r0, #20]
 8005786:	6103      	str	r3, [r0, #16]
 8005788:	bd10      	pop	{r4, pc}
 800578a:	bf00      	nop
 800578c:	08006e0b 	.word	0x08006e0b
 8005790:	08006e1c 	.word	0x08006e1c

08005794 <__multiply>:
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	4691      	mov	r9, r2
 800579a:	690a      	ldr	r2, [r1, #16]
 800579c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80057a0:	460c      	mov	r4, r1
 80057a2:	429a      	cmp	r2, r3
 80057a4:	bfbe      	ittt	lt
 80057a6:	460b      	movlt	r3, r1
 80057a8:	464c      	movlt	r4, r9
 80057aa:	4699      	movlt	r9, r3
 80057ac:	6927      	ldr	r7, [r4, #16]
 80057ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80057b2:	68a3      	ldr	r3, [r4, #8]
 80057b4:	6861      	ldr	r1, [r4, #4]
 80057b6:	eb07 060a 	add.w	r6, r7, sl
 80057ba:	42b3      	cmp	r3, r6
 80057bc:	b085      	sub	sp, #20
 80057be:	bfb8      	it	lt
 80057c0:	3101      	addlt	r1, #1
 80057c2:	f7ff fedb 	bl	800557c <_Balloc>
 80057c6:	b930      	cbnz	r0, 80057d6 <__multiply+0x42>
 80057c8:	4602      	mov	r2, r0
 80057ca:	f240 115d 	movw	r1, #349	; 0x15d
 80057ce:	4b43      	ldr	r3, [pc, #268]	; (80058dc <__multiply+0x148>)
 80057d0:	4843      	ldr	r0, [pc, #268]	; (80058e0 <__multiply+0x14c>)
 80057d2:	f000 fcb1 	bl	8006138 <__assert_func>
 80057d6:	f100 0514 	add.w	r5, r0, #20
 80057da:	462b      	mov	r3, r5
 80057dc:	2200      	movs	r2, #0
 80057de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057e2:	4543      	cmp	r3, r8
 80057e4:	d321      	bcc.n	800582a <__multiply+0x96>
 80057e6:	f104 0314 	add.w	r3, r4, #20
 80057ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80057ee:	f109 0314 	add.w	r3, r9, #20
 80057f2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80057f6:	9202      	str	r2, [sp, #8]
 80057f8:	1b3a      	subs	r2, r7, r4
 80057fa:	3a15      	subs	r2, #21
 80057fc:	f022 0203 	bic.w	r2, r2, #3
 8005800:	3204      	adds	r2, #4
 8005802:	f104 0115 	add.w	r1, r4, #21
 8005806:	428f      	cmp	r7, r1
 8005808:	bf38      	it	cc
 800580a:	2204      	movcc	r2, #4
 800580c:	9201      	str	r2, [sp, #4]
 800580e:	9a02      	ldr	r2, [sp, #8]
 8005810:	9303      	str	r3, [sp, #12]
 8005812:	429a      	cmp	r2, r3
 8005814:	d80c      	bhi.n	8005830 <__multiply+0x9c>
 8005816:	2e00      	cmp	r6, #0
 8005818:	dd03      	ble.n	8005822 <__multiply+0x8e>
 800581a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800581e:	2b00      	cmp	r3, #0
 8005820:	d059      	beq.n	80058d6 <__multiply+0x142>
 8005822:	6106      	str	r6, [r0, #16]
 8005824:	b005      	add	sp, #20
 8005826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582a:	f843 2b04 	str.w	r2, [r3], #4
 800582e:	e7d8      	b.n	80057e2 <__multiply+0x4e>
 8005830:	f8b3 a000 	ldrh.w	sl, [r3]
 8005834:	f1ba 0f00 	cmp.w	sl, #0
 8005838:	d023      	beq.n	8005882 <__multiply+0xee>
 800583a:	46a9      	mov	r9, r5
 800583c:	f04f 0c00 	mov.w	ip, #0
 8005840:	f104 0e14 	add.w	lr, r4, #20
 8005844:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005848:	f8d9 1000 	ldr.w	r1, [r9]
 800584c:	fa1f fb82 	uxth.w	fp, r2
 8005850:	b289      	uxth	r1, r1
 8005852:	fb0a 110b 	mla	r1, sl, fp, r1
 8005856:	4461      	add	r1, ip
 8005858:	f8d9 c000 	ldr.w	ip, [r9]
 800585c:	0c12      	lsrs	r2, r2, #16
 800585e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005862:	fb0a c202 	mla	r2, sl, r2, ip
 8005866:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800586a:	b289      	uxth	r1, r1
 800586c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005870:	4577      	cmp	r7, lr
 8005872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005876:	f849 1b04 	str.w	r1, [r9], #4
 800587a:	d8e3      	bhi.n	8005844 <__multiply+0xb0>
 800587c:	9a01      	ldr	r2, [sp, #4]
 800587e:	f845 c002 	str.w	ip, [r5, r2]
 8005882:	9a03      	ldr	r2, [sp, #12]
 8005884:	3304      	adds	r3, #4
 8005886:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800588a:	f1b9 0f00 	cmp.w	r9, #0
 800588e:	d020      	beq.n	80058d2 <__multiply+0x13e>
 8005890:	46ae      	mov	lr, r5
 8005892:	f04f 0a00 	mov.w	sl, #0
 8005896:	6829      	ldr	r1, [r5, #0]
 8005898:	f104 0c14 	add.w	ip, r4, #20
 800589c:	f8bc b000 	ldrh.w	fp, [ip]
 80058a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80058a4:	b289      	uxth	r1, r1
 80058a6:	fb09 220b 	mla	r2, r9, fp, r2
 80058aa:	4492      	add	sl, r2
 80058ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80058b0:	f84e 1b04 	str.w	r1, [lr], #4
 80058b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80058b8:	f8be 1000 	ldrh.w	r1, [lr]
 80058bc:	0c12      	lsrs	r2, r2, #16
 80058be:	fb09 1102 	mla	r1, r9, r2, r1
 80058c2:	4567      	cmp	r7, ip
 80058c4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80058c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80058cc:	d8e6      	bhi.n	800589c <__multiply+0x108>
 80058ce:	9a01      	ldr	r2, [sp, #4]
 80058d0:	50a9      	str	r1, [r5, r2]
 80058d2:	3504      	adds	r5, #4
 80058d4:	e79b      	b.n	800580e <__multiply+0x7a>
 80058d6:	3e01      	subs	r6, #1
 80058d8:	e79d      	b.n	8005816 <__multiply+0x82>
 80058da:	bf00      	nop
 80058dc:	08006e0b 	.word	0x08006e0b
 80058e0:	08006e1c 	.word	0x08006e1c

080058e4 <__pow5mult>:
 80058e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e8:	4615      	mov	r5, r2
 80058ea:	f012 0203 	ands.w	r2, r2, #3
 80058ee:	4606      	mov	r6, r0
 80058f0:	460f      	mov	r7, r1
 80058f2:	d007      	beq.n	8005904 <__pow5mult+0x20>
 80058f4:	4c25      	ldr	r4, [pc, #148]	; (800598c <__pow5mult+0xa8>)
 80058f6:	3a01      	subs	r2, #1
 80058f8:	2300      	movs	r3, #0
 80058fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058fe:	f7ff fe9f 	bl	8005640 <__multadd>
 8005902:	4607      	mov	r7, r0
 8005904:	10ad      	asrs	r5, r5, #2
 8005906:	d03d      	beq.n	8005984 <__pow5mult+0xa0>
 8005908:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800590a:	b97c      	cbnz	r4, 800592c <__pow5mult+0x48>
 800590c:	2010      	movs	r0, #16
 800590e:	f7ff fe11 	bl	8005534 <malloc>
 8005912:	4602      	mov	r2, r0
 8005914:	6270      	str	r0, [r6, #36]	; 0x24
 8005916:	b928      	cbnz	r0, 8005924 <__pow5mult+0x40>
 8005918:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800591c:	4b1c      	ldr	r3, [pc, #112]	; (8005990 <__pow5mult+0xac>)
 800591e:	481d      	ldr	r0, [pc, #116]	; (8005994 <__pow5mult+0xb0>)
 8005920:	f000 fc0a 	bl	8006138 <__assert_func>
 8005924:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005928:	6004      	str	r4, [r0, #0]
 800592a:	60c4      	str	r4, [r0, #12]
 800592c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005930:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005934:	b94c      	cbnz	r4, 800594a <__pow5mult+0x66>
 8005936:	f240 2171 	movw	r1, #625	; 0x271
 800593a:	4630      	mov	r0, r6
 800593c:	f7ff ff14 	bl	8005768 <__i2b>
 8005940:	2300      	movs	r3, #0
 8005942:	4604      	mov	r4, r0
 8005944:	f8c8 0008 	str.w	r0, [r8, #8]
 8005948:	6003      	str	r3, [r0, #0]
 800594a:	f04f 0900 	mov.w	r9, #0
 800594e:	07eb      	lsls	r3, r5, #31
 8005950:	d50a      	bpl.n	8005968 <__pow5mult+0x84>
 8005952:	4639      	mov	r1, r7
 8005954:	4622      	mov	r2, r4
 8005956:	4630      	mov	r0, r6
 8005958:	f7ff ff1c 	bl	8005794 <__multiply>
 800595c:	4680      	mov	r8, r0
 800595e:	4639      	mov	r1, r7
 8005960:	4630      	mov	r0, r6
 8005962:	f7ff fe4b 	bl	80055fc <_Bfree>
 8005966:	4647      	mov	r7, r8
 8005968:	106d      	asrs	r5, r5, #1
 800596a:	d00b      	beq.n	8005984 <__pow5mult+0xa0>
 800596c:	6820      	ldr	r0, [r4, #0]
 800596e:	b938      	cbnz	r0, 8005980 <__pow5mult+0x9c>
 8005970:	4622      	mov	r2, r4
 8005972:	4621      	mov	r1, r4
 8005974:	4630      	mov	r0, r6
 8005976:	f7ff ff0d 	bl	8005794 <__multiply>
 800597a:	6020      	str	r0, [r4, #0]
 800597c:	f8c0 9000 	str.w	r9, [r0]
 8005980:	4604      	mov	r4, r0
 8005982:	e7e4      	b.n	800594e <__pow5mult+0x6a>
 8005984:	4638      	mov	r0, r7
 8005986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598a:	bf00      	nop
 800598c:	08006f68 	.word	0x08006f68
 8005990:	08006d99 	.word	0x08006d99
 8005994:	08006e1c 	.word	0x08006e1c

08005998 <__lshift>:
 8005998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800599c:	460c      	mov	r4, r1
 800599e:	4607      	mov	r7, r0
 80059a0:	4691      	mov	r9, r2
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	6849      	ldr	r1, [r1, #4]
 80059a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059aa:	68a3      	ldr	r3, [r4, #8]
 80059ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059b0:	f108 0601 	add.w	r6, r8, #1
 80059b4:	42b3      	cmp	r3, r6
 80059b6:	db0b      	blt.n	80059d0 <__lshift+0x38>
 80059b8:	4638      	mov	r0, r7
 80059ba:	f7ff fddf 	bl	800557c <_Balloc>
 80059be:	4605      	mov	r5, r0
 80059c0:	b948      	cbnz	r0, 80059d6 <__lshift+0x3e>
 80059c2:	4602      	mov	r2, r0
 80059c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80059c8:	4b29      	ldr	r3, [pc, #164]	; (8005a70 <__lshift+0xd8>)
 80059ca:	482a      	ldr	r0, [pc, #168]	; (8005a74 <__lshift+0xdc>)
 80059cc:	f000 fbb4 	bl	8006138 <__assert_func>
 80059d0:	3101      	adds	r1, #1
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	e7ee      	b.n	80059b4 <__lshift+0x1c>
 80059d6:	2300      	movs	r3, #0
 80059d8:	f100 0114 	add.w	r1, r0, #20
 80059dc:	f100 0210 	add.w	r2, r0, #16
 80059e0:	4618      	mov	r0, r3
 80059e2:	4553      	cmp	r3, sl
 80059e4:	db37      	blt.n	8005a56 <__lshift+0xbe>
 80059e6:	6920      	ldr	r0, [r4, #16]
 80059e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059ec:	f104 0314 	add.w	r3, r4, #20
 80059f0:	f019 091f 	ands.w	r9, r9, #31
 80059f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80059fc:	d02f      	beq.n	8005a5e <__lshift+0xc6>
 80059fe:	468a      	mov	sl, r1
 8005a00:	f04f 0c00 	mov.w	ip, #0
 8005a04:	f1c9 0e20 	rsb	lr, r9, #32
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	fa02 f209 	lsl.w	r2, r2, r9
 8005a0e:	ea42 020c 	orr.w	r2, r2, ip
 8005a12:	f84a 2b04 	str.w	r2, [sl], #4
 8005a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a1a:	4298      	cmp	r0, r3
 8005a1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005a20:	d8f2      	bhi.n	8005a08 <__lshift+0x70>
 8005a22:	1b03      	subs	r3, r0, r4
 8005a24:	3b15      	subs	r3, #21
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	f104 0215 	add.w	r2, r4, #21
 8005a30:	4290      	cmp	r0, r2
 8005a32:	bf38      	it	cc
 8005a34:	2304      	movcc	r3, #4
 8005a36:	f841 c003 	str.w	ip, [r1, r3]
 8005a3a:	f1bc 0f00 	cmp.w	ip, #0
 8005a3e:	d001      	beq.n	8005a44 <__lshift+0xac>
 8005a40:	f108 0602 	add.w	r6, r8, #2
 8005a44:	3e01      	subs	r6, #1
 8005a46:	4638      	mov	r0, r7
 8005a48:	4621      	mov	r1, r4
 8005a4a:	612e      	str	r6, [r5, #16]
 8005a4c:	f7ff fdd6 	bl	80055fc <_Bfree>
 8005a50:	4628      	mov	r0, r5
 8005a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	e7c1      	b.n	80059e2 <__lshift+0x4a>
 8005a5e:	3904      	subs	r1, #4
 8005a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a64:	4298      	cmp	r0, r3
 8005a66:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a6a:	d8f9      	bhi.n	8005a60 <__lshift+0xc8>
 8005a6c:	e7ea      	b.n	8005a44 <__lshift+0xac>
 8005a6e:	bf00      	nop
 8005a70:	08006e0b 	.word	0x08006e0b
 8005a74:	08006e1c 	.word	0x08006e1c

08005a78 <__mcmp>:
 8005a78:	4603      	mov	r3, r0
 8005a7a:	690a      	ldr	r2, [r1, #16]
 8005a7c:	6900      	ldr	r0, [r0, #16]
 8005a7e:	b530      	push	{r4, r5, lr}
 8005a80:	1a80      	subs	r0, r0, r2
 8005a82:	d10d      	bne.n	8005aa0 <__mcmp+0x28>
 8005a84:	3314      	adds	r3, #20
 8005a86:	3114      	adds	r1, #20
 8005a88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a98:	4295      	cmp	r5, r2
 8005a9a:	d002      	beq.n	8005aa2 <__mcmp+0x2a>
 8005a9c:	d304      	bcc.n	8005aa8 <__mcmp+0x30>
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	bd30      	pop	{r4, r5, pc}
 8005aa2:	42a3      	cmp	r3, r4
 8005aa4:	d3f4      	bcc.n	8005a90 <__mcmp+0x18>
 8005aa6:	e7fb      	b.n	8005aa0 <__mcmp+0x28>
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	e7f8      	b.n	8005aa0 <__mcmp+0x28>
	...

08005ab0 <__mdiff>:
 8005ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	460d      	mov	r5, r1
 8005ab6:	4607      	mov	r7, r0
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4628      	mov	r0, r5
 8005abc:	4614      	mov	r4, r2
 8005abe:	f7ff ffdb 	bl	8005a78 <__mcmp>
 8005ac2:	1e06      	subs	r6, r0, #0
 8005ac4:	d111      	bne.n	8005aea <__mdiff+0x3a>
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7ff fd57 	bl	800557c <_Balloc>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	b928      	cbnz	r0, 8005ade <__mdiff+0x2e>
 8005ad2:	f240 2132 	movw	r1, #562	; 0x232
 8005ad6:	4b3a      	ldr	r3, [pc, #232]	; (8005bc0 <__mdiff+0x110>)
 8005ad8:	483a      	ldr	r0, [pc, #232]	; (8005bc4 <__mdiff+0x114>)
 8005ada:	f000 fb2d 	bl	8006138 <__assert_func>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aea:	bfa4      	itt	ge
 8005aec:	4623      	movge	r3, r4
 8005aee:	462c      	movge	r4, r5
 8005af0:	4638      	mov	r0, r7
 8005af2:	6861      	ldr	r1, [r4, #4]
 8005af4:	bfa6      	itte	ge
 8005af6:	461d      	movge	r5, r3
 8005af8:	2600      	movge	r6, #0
 8005afa:	2601      	movlt	r6, #1
 8005afc:	f7ff fd3e 	bl	800557c <_Balloc>
 8005b00:	4602      	mov	r2, r0
 8005b02:	b918      	cbnz	r0, 8005b0c <__mdiff+0x5c>
 8005b04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005b08:	4b2d      	ldr	r3, [pc, #180]	; (8005bc0 <__mdiff+0x110>)
 8005b0a:	e7e5      	b.n	8005ad8 <__mdiff+0x28>
 8005b0c:	f102 0814 	add.w	r8, r2, #20
 8005b10:	46c2      	mov	sl, r8
 8005b12:	f04f 0c00 	mov.w	ip, #0
 8005b16:	6927      	ldr	r7, [r4, #16]
 8005b18:	60c6      	str	r6, [r0, #12]
 8005b1a:	692e      	ldr	r6, [r5, #16]
 8005b1c:	f104 0014 	add.w	r0, r4, #20
 8005b20:	f105 0914 	add.w	r9, r5, #20
 8005b24:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005b28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b2c:	3410      	adds	r4, #16
 8005b2e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005b32:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b36:	fa1f f18b 	uxth.w	r1, fp
 8005b3a:	448c      	add	ip, r1
 8005b3c:	b299      	uxth	r1, r3
 8005b3e:	0c1b      	lsrs	r3, r3, #16
 8005b40:	ebac 0101 	sub.w	r1, ip, r1
 8005b44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b48:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005b4c:	b289      	uxth	r1, r1
 8005b4e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005b52:	454e      	cmp	r6, r9
 8005b54:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005b58:	f84a 3b04 	str.w	r3, [sl], #4
 8005b5c:	d8e7      	bhi.n	8005b2e <__mdiff+0x7e>
 8005b5e:	1b73      	subs	r3, r6, r5
 8005b60:	3b15      	subs	r3, #21
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	3515      	adds	r5, #21
 8005b68:	3304      	adds	r3, #4
 8005b6a:	42ae      	cmp	r6, r5
 8005b6c:	bf38      	it	cc
 8005b6e:	2304      	movcc	r3, #4
 8005b70:	4418      	add	r0, r3
 8005b72:	4443      	add	r3, r8
 8005b74:	461e      	mov	r6, r3
 8005b76:	4605      	mov	r5, r0
 8005b78:	4575      	cmp	r5, lr
 8005b7a:	d30e      	bcc.n	8005b9a <__mdiff+0xea>
 8005b7c:	f10e 0103 	add.w	r1, lr, #3
 8005b80:	1a09      	subs	r1, r1, r0
 8005b82:	f021 0103 	bic.w	r1, r1, #3
 8005b86:	3803      	subs	r0, #3
 8005b88:	4586      	cmp	lr, r0
 8005b8a:	bf38      	it	cc
 8005b8c:	2100      	movcc	r1, #0
 8005b8e:	4419      	add	r1, r3
 8005b90:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005b94:	b18b      	cbz	r3, 8005bba <__mdiff+0x10a>
 8005b96:	6117      	str	r7, [r2, #16]
 8005b98:	e7a4      	b.n	8005ae4 <__mdiff+0x34>
 8005b9a:	f855 8b04 	ldr.w	r8, [r5], #4
 8005b9e:	fa1f f188 	uxth.w	r1, r8
 8005ba2:	4461      	add	r1, ip
 8005ba4:	140c      	asrs	r4, r1, #16
 8005ba6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005baa:	b289      	uxth	r1, r1
 8005bac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005bb0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005bb4:	f846 1b04 	str.w	r1, [r6], #4
 8005bb8:	e7de      	b.n	8005b78 <__mdiff+0xc8>
 8005bba:	3f01      	subs	r7, #1
 8005bbc:	e7e8      	b.n	8005b90 <__mdiff+0xe0>
 8005bbe:	bf00      	nop
 8005bc0:	08006e0b 	.word	0x08006e0b
 8005bc4:	08006e1c 	.word	0x08006e1c

08005bc8 <__d2b>:
 8005bc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005bcc:	2101      	movs	r1, #1
 8005bce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005bd2:	4690      	mov	r8, r2
 8005bd4:	461d      	mov	r5, r3
 8005bd6:	f7ff fcd1 	bl	800557c <_Balloc>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	b930      	cbnz	r0, 8005bec <__d2b+0x24>
 8005bde:	4602      	mov	r2, r0
 8005be0:	f240 310a 	movw	r1, #778	; 0x30a
 8005be4:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <__d2b+0xb0>)
 8005be6:	4825      	ldr	r0, [pc, #148]	; (8005c7c <__d2b+0xb4>)
 8005be8:	f000 faa6 	bl	8006138 <__assert_func>
 8005bec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005bf0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005bf4:	bb2d      	cbnz	r5, 8005c42 <__d2b+0x7a>
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	f1b8 0300 	subs.w	r3, r8, #0
 8005bfc:	d026      	beq.n	8005c4c <__d2b+0x84>
 8005bfe:	4668      	mov	r0, sp
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	f7ff fd83 	bl	800570c <__lo0bits>
 8005c06:	9900      	ldr	r1, [sp, #0]
 8005c08:	b1f0      	cbz	r0, 8005c48 <__d2b+0x80>
 8005c0a:	9a01      	ldr	r2, [sp, #4]
 8005c0c:	f1c0 0320 	rsb	r3, r0, #32
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	430b      	orrs	r3, r1
 8005c16:	40c2      	lsrs	r2, r0
 8005c18:	6163      	str	r3, [r4, #20]
 8005c1a:	9201      	str	r2, [sp, #4]
 8005c1c:	9b01      	ldr	r3, [sp, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bf14      	ite	ne
 8005c22:	2102      	movne	r1, #2
 8005c24:	2101      	moveq	r1, #1
 8005c26:	61a3      	str	r3, [r4, #24]
 8005c28:	6121      	str	r1, [r4, #16]
 8005c2a:	b1c5      	cbz	r5, 8005c5e <__d2b+0x96>
 8005c2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c30:	4405      	add	r5, r0
 8005c32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c36:	603d      	str	r5, [r7, #0]
 8005c38:	6030      	str	r0, [r6, #0]
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	b002      	add	sp, #8
 8005c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c46:	e7d6      	b.n	8005bf6 <__d2b+0x2e>
 8005c48:	6161      	str	r1, [r4, #20]
 8005c4a:	e7e7      	b.n	8005c1c <__d2b+0x54>
 8005c4c:	a801      	add	r0, sp, #4
 8005c4e:	f7ff fd5d 	bl	800570c <__lo0bits>
 8005c52:	2101      	movs	r1, #1
 8005c54:	9b01      	ldr	r3, [sp, #4]
 8005c56:	6121      	str	r1, [r4, #16]
 8005c58:	6163      	str	r3, [r4, #20]
 8005c5a:	3020      	adds	r0, #32
 8005c5c:	e7e5      	b.n	8005c2a <__d2b+0x62>
 8005c5e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005c62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c66:	6038      	str	r0, [r7, #0]
 8005c68:	6918      	ldr	r0, [r3, #16]
 8005c6a:	f7ff fd2f 	bl	80056cc <__hi0bits>
 8005c6e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005c72:	6031      	str	r1, [r6, #0]
 8005c74:	e7e1      	b.n	8005c3a <__d2b+0x72>
 8005c76:	bf00      	nop
 8005c78:	08006e0b 	.word	0x08006e0b
 8005c7c:	08006e1c 	.word	0x08006e1c

08005c80 <_calloc_r>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	fba1 5402 	umull	r5, r4, r1, r2
 8005c86:	b934      	cbnz	r4, 8005c96 <_calloc_r+0x16>
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f000 f875 	bl	8005d78 <_malloc_r>
 8005c8e:	4606      	mov	r6, r0
 8005c90:	b928      	cbnz	r0, 8005c9e <_calloc_r+0x1e>
 8005c92:	4630      	mov	r0, r6
 8005c94:	bd70      	pop	{r4, r5, r6, pc}
 8005c96:	220c      	movs	r2, #12
 8005c98:	2600      	movs	r6, #0
 8005c9a:	6002      	str	r2, [r0, #0]
 8005c9c:	e7f9      	b.n	8005c92 <_calloc_r+0x12>
 8005c9e:	462a      	mov	r2, r5
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	f7fe f93f 	bl	8003f24 <memset>
 8005ca6:	e7f4      	b.n	8005c92 <_calloc_r+0x12>

08005ca8 <_free_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4605      	mov	r5, r0
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d040      	beq.n	8005d32 <_free_r+0x8a>
 8005cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb4:	1f0c      	subs	r4, r1, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfb8      	it	lt
 8005cba:	18e4      	addlt	r4, r4, r3
 8005cbc:	f000 fa98 	bl	80061f0 <__malloc_lock>
 8005cc0:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <_free_r+0x8c>)
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	b933      	cbnz	r3, 8005cd4 <_free_r+0x2c>
 8005cc6:	6063      	str	r3, [r4, #4]
 8005cc8:	6014      	str	r4, [r2, #0]
 8005cca:	4628      	mov	r0, r5
 8005ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cd0:	f000 ba94 	b.w	80061fc <__malloc_unlock>
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d908      	bls.n	8005cea <_free_r+0x42>
 8005cd8:	6820      	ldr	r0, [r4, #0]
 8005cda:	1821      	adds	r1, r4, r0
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	bf01      	itttt	eq
 8005ce0:	6819      	ldreq	r1, [r3, #0]
 8005ce2:	685b      	ldreq	r3, [r3, #4]
 8005ce4:	1809      	addeq	r1, r1, r0
 8005ce6:	6021      	streq	r1, [r4, #0]
 8005ce8:	e7ed      	b.n	8005cc6 <_free_r+0x1e>
 8005cea:	461a      	mov	r2, r3
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b10b      	cbz	r3, 8005cf4 <_free_r+0x4c>
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d9fa      	bls.n	8005cea <_free_r+0x42>
 8005cf4:	6811      	ldr	r1, [r2, #0]
 8005cf6:	1850      	adds	r0, r2, r1
 8005cf8:	42a0      	cmp	r0, r4
 8005cfa:	d10b      	bne.n	8005d14 <_free_r+0x6c>
 8005cfc:	6820      	ldr	r0, [r4, #0]
 8005cfe:	4401      	add	r1, r0
 8005d00:	1850      	adds	r0, r2, r1
 8005d02:	4283      	cmp	r3, r0
 8005d04:	6011      	str	r1, [r2, #0]
 8005d06:	d1e0      	bne.n	8005cca <_free_r+0x22>
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4401      	add	r1, r0
 8005d0e:	6011      	str	r1, [r2, #0]
 8005d10:	6053      	str	r3, [r2, #4]
 8005d12:	e7da      	b.n	8005cca <_free_r+0x22>
 8005d14:	d902      	bls.n	8005d1c <_free_r+0x74>
 8005d16:	230c      	movs	r3, #12
 8005d18:	602b      	str	r3, [r5, #0]
 8005d1a:	e7d6      	b.n	8005cca <_free_r+0x22>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	1821      	adds	r1, r4, r0
 8005d20:	428b      	cmp	r3, r1
 8005d22:	bf01      	itttt	eq
 8005d24:	6819      	ldreq	r1, [r3, #0]
 8005d26:	685b      	ldreq	r3, [r3, #4]
 8005d28:	1809      	addeq	r1, r1, r0
 8005d2a:	6021      	streq	r1, [r4, #0]
 8005d2c:	6063      	str	r3, [r4, #4]
 8005d2e:	6054      	str	r4, [r2, #4]
 8005d30:	e7cb      	b.n	8005cca <_free_r+0x22>
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	2000032c 	.word	0x2000032c

08005d38 <sbrk_aligned>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	4e0e      	ldr	r6, [pc, #56]	; (8005d74 <sbrk_aligned+0x3c>)
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	6831      	ldr	r1, [r6, #0]
 8005d40:	4605      	mov	r5, r0
 8005d42:	b911      	cbnz	r1, 8005d4a <sbrk_aligned+0x12>
 8005d44:	f000 f9e8 	bl	8006118 <_sbrk_r>
 8005d48:	6030      	str	r0, [r6, #0]
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f000 f9e3 	bl	8006118 <_sbrk_r>
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	d00a      	beq.n	8005d6c <sbrk_aligned+0x34>
 8005d56:	1cc4      	adds	r4, r0, #3
 8005d58:	f024 0403 	bic.w	r4, r4, #3
 8005d5c:	42a0      	cmp	r0, r4
 8005d5e:	d007      	beq.n	8005d70 <sbrk_aligned+0x38>
 8005d60:	1a21      	subs	r1, r4, r0
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 f9d8 	bl	8006118 <_sbrk_r>
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d101      	bne.n	8005d70 <sbrk_aligned+0x38>
 8005d6c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d70:	4620      	mov	r0, r4
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	20000330 	.word	0x20000330

08005d78 <_malloc_r>:
 8005d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7c:	1ccd      	adds	r5, r1, #3
 8005d7e:	f025 0503 	bic.w	r5, r5, #3
 8005d82:	3508      	adds	r5, #8
 8005d84:	2d0c      	cmp	r5, #12
 8005d86:	bf38      	it	cc
 8005d88:	250c      	movcc	r5, #12
 8005d8a:	2d00      	cmp	r5, #0
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	db01      	blt.n	8005d94 <_malloc_r+0x1c>
 8005d90:	42a9      	cmp	r1, r5
 8005d92:	d905      	bls.n	8005da0 <_malloc_r+0x28>
 8005d94:	230c      	movs	r3, #12
 8005d96:	2600      	movs	r6, #0
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da0:	4e2e      	ldr	r6, [pc, #184]	; (8005e5c <_malloc_r+0xe4>)
 8005da2:	f000 fa25 	bl	80061f0 <__malloc_lock>
 8005da6:	6833      	ldr	r3, [r6, #0]
 8005da8:	461c      	mov	r4, r3
 8005daa:	bb34      	cbnz	r4, 8005dfa <_malloc_r+0x82>
 8005dac:	4629      	mov	r1, r5
 8005dae:	4638      	mov	r0, r7
 8005db0:	f7ff ffc2 	bl	8005d38 <sbrk_aligned>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	4604      	mov	r4, r0
 8005db8:	d14d      	bne.n	8005e56 <_malloc_r+0xde>
 8005dba:	6834      	ldr	r4, [r6, #0]
 8005dbc:	4626      	mov	r6, r4
 8005dbe:	2e00      	cmp	r6, #0
 8005dc0:	d140      	bne.n	8005e44 <_malloc_r+0xcc>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	eb04 0803 	add.w	r8, r4, r3
 8005dcc:	f000 f9a4 	bl	8006118 <_sbrk_r>
 8005dd0:	4580      	cmp	r8, r0
 8005dd2:	d13a      	bne.n	8005e4a <_malloc_r+0xd2>
 8005dd4:	6821      	ldr	r1, [r4, #0]
 8005dd6:	3503      	adds	r5, #3
 8005dd8:	1a6d      	subs	r5, r5, r1
 8005dda:	f025 0503 	bic.w	r5, r5, #3
 8005dde:	3508      	adds	r5, #8
 8005de0:	2d0c      	cmp	r5, #12
 8005de2:	bf38      	it	cc
 8005de4:	250c      	movcc	r5, #12
 8005de6:	4638      	mov	r0, r7
 8005de8:	4629      	mov	r1, r5
 8005dea:	f7ff ffa5 	bl	8005d38 <sbrk_aligned>
 8005dee:	3001      	adds	r0, #1
 8005df0:	d02b      	beq.n	8005e4a <_malloc_r+0xd2>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	442b      	add	r3, r5
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	e00e      	b.n	8005e18 <_malloc_r+0xa0>
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	1b52      	subs	r2, r2, r5
 8005dfe:	d41e      	bmi.n	8005e3e <_malloc_r+0xc6>
 8005e00:	2a0b      	cmp	r2, #11
 8005e02:	d916      	bls.n	8005e32 <_malloc_r+0xba>
 8005e04:	1961      	adds	r1, r4, r5
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	6025      	str	r5, [r4, #0]
 8005e0a:	bf18      	it	ne
 8005e0c:	6059      	strne	r1, [r3, #4]
 8005e0e:	6863      	ldr	r3, [r4, #4]
 8005e10:	bf08      	it	eq
 8005e12:	6031      	streq	r1, [r6, #0]
 8005e14:	5162      	str	r2, [r4, r5]
 8005e16:	604b      	str	r3, [r1, #4]
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f104 060b 	add.w	r6, r4, #11
 8005e1e:	f000 f9ed 	bl	80061fc <__malloc_unlock>
 8005e22:	f026 0607 	bic.w	r6, r6, #7
 8005e26:	1d23      	adds	r3, r4, #4
 8005e28:	1af2      	subs	r2, r6, r3
 8005e2a:	d0b6      	beq.n	8005d9a <_malloc_r+0x22>
 8005e2c:	1b9b      	subs	r3, r3, r6
 8005e2e:	50a3      	str	r3, [r4, r2]
 8005e30:	e7b3      	b.n	8005d9a <_malloc_r+0x22>
 8005e32:	6862      	ldr	r2, [r4, #4]
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	bf0c      	ite	eq
 8005e38:	6032      	streq	r2, [r6, #0]
 8005e3a:	605a      	strne	r2, [r3, #4]
 8005e3c:	e7ec      	b.n	8005e18 <_malloc_r+0xa0>
 8005e3e:	4623      	mov	r3, r4
 8005e40:	6864      	ldr	r4, [r4, #4]
 8005e42:	e7b2      	b.n	8005daa <_malloc_r+0x32>
 8005e44:	4634      	mov	r4, r6
 8005e46:	6876      	ldr	r6, [r6, #4]
 8005e48:	e7b9      	b.n	8005dbe <_malloc_r+0x46>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	f000 f9d4 	bl	80061fc <__malloc_unlock>
 8005e54:	e7a1      	b.n	8005d9a <_malloc_r+0x22>
 8005e56:	6025      	str	r5, [r4, #0]
 8005e58:	e7de      	b.n	8005e18 <_malloc_r+0xa0>
 8005e5a:	bf00      	nop
 8005e5c:	2000032c 	.word	0x2000032c

08005e60 <__ssputs_r>:
 8005e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	688e      	ldr	r6, [r1, #8]
 8005e66:	4682      	mov	sl, r0
 8005e68:	429e      	cmp	r6, r3
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	4690      	mov	r8, r2
 8005e6e:	461f      	mov	r7, r3
 8005e70:	d838      	bhi.n	8005ee4 <__ssputs_r+0x84>
 8005e72:	898a      	ldrh	r2, [r1, #12]
 8005e74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e78:	d032      	beq.n	8005ee0 <__ssputs_r+0x80>
 8005e7a:	6825      	ldr	r5, [r4, #0]
 8005e7c:	6909      	ldr	r1, [r1, #16]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	eba5 0901 	sub.w	r9, r5, r1
 8005e84:	6965      	ldr	r5, [r4, #20]
 8005e86:	444b      	add	r3, r9
 8005e88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e90:	106d      	asrs	r5, r5, #1
 8005e92:	429d      	cmp	r5, r3
 8005e94:	bf38      	it	cc
 8005e96:	461d      	movcc	r5, r3
 8005e98:	0553      	lsls	r3, r2, #21
 8005e9a:	d531      	bpl.n	8005f00 <__ssputs_r+0xa0>
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	f7ff ff6b 	bl	8005d78 <_malloc_r>
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	b950      	cbnz	r0, 8005ebc <__ssputs_r+0x5c>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	f8ca 3000 	str.w	r3, [sl]
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb6:	81a3      	strh	r3, [r4, #12]
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebc:	464a      	mov	r2, r9
 8005ebe:	6921      	ldr	r1, [r4, #16]
 8005ec0:	f7ff fb4e 	bl	8005560 <memcpy>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	6126      	str	r6, [r4, #16]
 8005ed2:	444e      	add	r6, r9
 8005ed4:	6026      	str	r6, [r4, #0]
 8005ed6:	463e      	mov	r6, r7
 8005ed8:	6165      	str	r5, [r4, #20]
 8005eda:	eba5 0509 	sub.w	r5, r5, r9
 8005ede:	60a5      	str	r5, [r4, #8]
 8005ee0:	42be      	cmp	r6, r7
 8005ee2:	d900      	bls.n	8005ee6 <__ssputs_r+0x86>
 8005ee4:	463e      	mov	r6, r7
 8005ee6:	4632      	mov	r2, r6
 8005ee8:	4641      	mov	r1, r8
 8005eea:	6820      	ldr	r0, [r4, #0]
 8005eec:	f000 f966 	bl	80061bc <memmove>
 8005ef0:	68a3      	ldr	r3, [r4, #8]
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	1b9b      	subs	r3, r3, r6
 8005ef6:	60a3      	str	r3, [r4, #8]
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	4433      	add	r3, r6
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	e7db      	b.n	8005eb8 <__ssputs_r+0x58>
 8005f00:	462a      	mov	r2, r5
 8005f02:	f000 f981 	bl	8006208 <_realloc_r>
 8005f06:	4606      	mov	r6, r0
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d1e1      	bne.n	8005ed0 <__ssputs_r+0x70>
 8005f0c:	4650      	mov	r0, sl
 8005f0e:	6921      	ldr	r1, [r4, #16]
 8005f10:	f7ff feca 	bl	8005ca8 <_free_r>
 8005f14:	e7c7      	b.n	8005ea6 <__ssputs_r+0x46>
	...

08005f18 <_svfiprintf_r>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	4698      	mov	r8, r3
 8005f1e:	898b      	ldrh	r3, [r1, #12]
 8005f20:	4607      	mov	r7, r0
 8005f22:	061b      	lsls	r3, r3, #24
 8005f24:	460d      	mov	r5, r1
 8005f26:	4614      	mov	r4, r2
 8005f28:	b09d      	sub	sp, #116	; 0x74
 8005f2a:	d50e      	bpl.n	8005f4a <_svfiprintf_r+0x32>
 8005f2c:	690b      	ldr	r3, [r1, #16]
 8005f2e:	b963      	cbnz	r3, 8005f4a <_svfiprintf_r+0x32>
 8005f30:	2140      	movs	r1, #64	; 0x40
 8005f32:	f7ff ff21 	bl	8005d78 <_malloc_r>
 8005f36:	6028      	str	r0, [r5, #0]
 8005f38:	6128      	str	r0, [r5, #16]
 8005f3a:	b920      	cbnz	r0, 8005f46 <_svfiprintf_r+0x2e>
 8005f3c:	230c      	movs	r3, #12
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	e0d1      	b.n	80060ea <_svfiprintf_r+0x1d2>
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	616b      	str	r3, [r5, #20]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f4e:	2320      	movs	r3, #32
 8005f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f54:	2330      	movs	r3, #48	; 0x30
 8005f56:	f04f 0901 	mov.w	r9, #1
 8005f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006104 <_svfiprintf_r+0x1ec>
 8005f62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f66:	4623      	mov	r3, r4
 8005f68:	469a      	mov	sl, r3
 8005f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f6e:	b10a      	cbz	r2, 8005f74 <_svfiprintf_r+0x5c>
 8005f70:	2a25      	cmp	r2, #37	; 0x25
 8005f72:	d1f9      	bne.n	8005f68 <_svfiprintf_r+0x50>
 8005f74:	ebba 0b04 	subs.w	fp, sl, r4
 8005f78:	d00b      	beq.n	8005f92 <_svfiprintf_r+0x7a>
 8005f7a:	465b      	mov	r3, fp
 8005f7c:	4622      	mov	r2, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4638      	mov	r0, r7
 8005f82:	f7ff ff6d 	bl	8005e60 <__ssputs_r>
 8005f86:	3001      	adds	r0, #1
 8005f88:	f000 80aa 	beq.w	80060e0 <_svfiprintf_r+0x1c8>
 8005f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f8e:	445a      	add	r2, fp
 8005f90:	9209      	str	r2, [sp, #36]	; 0x24
 8005f92:	f89a 3000 	ldrb.w	r3, [sl]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 80a2 	beq.w	80060e0 <_svfiprintf_r+0x1c8>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fa6:	f10a 0a01 	add.w	sl, sl, #1
 8005faa:	9304      	str	r3, [sp, #16]
 8005fac:	9307      	str	r3, [sp, #28]
 8005fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8005fb4:	4654      	mov	r4, sl
 8005fb6:	2205      	movs	r2, #5
 8005fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fbc:	4851      	ldr	r0, [pc, #324]	; (8006104 <_svfiprintf_r+0x1ec>)
 8005fbe:	f7ff fac1 	bl	8005544 <memchr>
 8005fc2:	9a04      	ldr	r2, [sp, #16]
 8005fc4:	b9d8      	cbnz	r0, 8005ffe <_svfiprintf_r+0xe6>
 8005fc6:	06d0      	lsls	r0, r2, #27
 8005fc8:	bf44      	itt	mi
 8005fca:	2320      	movmi	r3, #32
 8005fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fd0:	0711      	lsls	r1, r2, #28
 8005fd2:	bf44      	itt	mi
 8005fd4:	232b      	movmi	r3, #43	; 0x2b
 8005fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fda:	f89a 3000 	ldrb.w	r3, [sl]
 8005fde:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe0:	d015      	beq.n	800600e <_svfiprintf_r+0xf6>
 8005fe2:	4654      	mov	r4, sl
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f04f 0c0a 	mov.w	ip, #10
 8005fea:	9a07      	ldr	r2, [sp, #28]
 8005fec:	4621      	mov	r1, r4
 8005fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ff2:	3b30      	subs	r3, #48	; 0x30
 8005ff4:	2b09      	cmp	r3, #9
 8005ff6:	d94e      	bls.n	8006096 <_svfiprintf_r+0x17e>
 8005ff8:	b1b0      	cbz	r0, 8006028 <_svfiprintf_r+0x110>
 8005ffa:	9207      	str	r2, [sp, #28]
 8005ffc:	e014      	b.n	8006028 <_svfiprintf_r+0x110>
 8005ffe:	eba0 0308 	sub.w	r3, r0, r8
 8006002:	fa09 f303 	lsl.w	r3, r9, r3
 8006006:	4313      	orrs	r3, r2
 8006008:	46a2      	mov	sl, r4
 800600a:	9304      	str	r3, [sp, #16]
 800600c:	e7d2      	b.n	8005fb4 <_svfiprintf_r+0x9c>
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	1d19      	adds	r1, r3, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	9103      	str	r1, [sp, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	bfbb      	ittet	lt
 800601a:	425b      	neglt	r3, r3
 800601c:	f042 0202 	orrlt.w	r2, r2, #2
 8006020:	9307      	strge	r3, [sp, #28]
 8006022:	9307      	strlt	r3, [sp, #28]
 8006024:	bfb8      	it	lt
 8006026:	9204      	strlt	r2, [sp, #16]
 8006028:	7823      	ldrb	r3, [r4, #0]
 800602a:	2b2e      	cmp	r3, #46	; 0x2e
 800602c:	d10c      	bne.n	8006048 <_svfiprintf_r+0x130>
 800602e:	7863      	ldrb	r3, [r4, #1]
 8006030:	2b2a      	cmp	r3, #42	; 0x2a
 8006032:	d135      	bne.n	80060a0 <_svfiprintf_r+0x188>
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	3402      	adds	r4, #2
 8006038:	1d1a      	adds	r2, r3, #4
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	9203      	str	r2, [sp, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	bfb8      	it	lt
 8006042:	f04f 33ff 	movlt.w	r3, #4294967295
 8006046:	9305      	str	r3, [sp, #20]
 8006048:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006108 <_svfiprintf_r+0x1f0>
 800604c:	2203      	movs	r2, #3
 800604e:	4650      	mov	r0, sl
 8006050:	7821      	ldrb	r1, [r4, #0]
 8006052:	f7ff fa77 	bl	8005544 <memchr>
 8006056:	b140      	cbz	r0, 800606a <_svfiprintf_r+0x152>
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	eba0 000a 	sub.w	r0, r0, sl
 800605e:	fa03 f000 	lsl.w	r0, r3, r0
 8006062:	9b04      	ldr	r3, [sp, #16]
 8006064:	3401      	adds	r4, #1
 8006066:	4303      	orrs	r3, r0
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606e:	2206      	movs	r2, #6
 8006070:	4826      	ldr	r0, [pc, #152]	; (800610c <_svfiprintf_r+0x1f4>)
 8006072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006076:	f7ff fa65 	bl	8005544 <memchr>
 800607a:	2800      	cmp	r0, #0
 800607c:	d038      	beq.n	80060f0 <_svfiprintf_r+0x1d8>
 800607e:	4b24      	ldr	r3, [pc, #144]	; (8006110 <_svfiprintf_r+0x1f8>)
 8006080:	bb1b      	cbnz	r3, 80060ca <_svfiprintf_r+0x1b2>
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	3307      	adds	r3, #7
 8006086:	f023 0307 	bic.w	r3, r3, #7
 800608a:	3308      	adds	r3, #8
 800608c:	9303      	str	r3, [sp, #12]
 800608e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006090:	4433      	add	r3, r6
 8006092:	9309      	str	r3, [sp, #36]	; 0x24
 8006094:	e767      	b.n	8005f66 <_svfiprintf_r+0x4e>
 8006096:	460c      	mov	r4, r1
 8006098:	2001      	movs	r0, #1
 800609a:	fb0c 3202 	mla	r2, ip, r2, r3
 800609e:	e7a5      	b.n	8005fec <_svfiprintf_r+0xd4>
 80060a0:	2300      	movs	r3, #0
 80060a2:	f04f 0c0a 	mov.w	ip, #10
 80060a6:	4619      	mov	r1, r3
 80060a8:	3401      	adds	r4, #1
 80060aa:	9305      	str	r3, [sp, #20]
 80060ac:	4620      	mov	r0, r4
 80060ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060b2:	3a30      	subs	r2, #48	; 0x30
 80060b4:	2a09      	cmp	r2, #9
 80060b6:	d903      	bls.n	80060c0 <_svfiprintf_r+0x1a8>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0c5      	beq.n	8006048 <_svfiprintf_r+0x130>
 80060bc:	9105      	str	r1, [sp, #20]
 80060be:	e7c3      	b.n	8006048 <_svfiprintf_r+0x130>
 80060c0:	4604      	mov	r4, r0
 80060c2:	2301      	movs	r3, #1
 80060c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060c8:	e7f0      	b.n	80060ac <_svfiprintf_r+0x194>
 80060ca:	ab03      	add	r3, sp, #12
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	462a      	mov	r2, r5
 80060d0:	4638      	mov	r0, r7
 80060d2:	4b10      	ldr	r3, [pc, #64]	; (8006114 <_svfiprintf_r+0x1fc>)
 80060d4:	a904      	add	r1, sp, #16
 80060d6:	f7fd ffcb 	bl	8004070 <_printf_float>
 80060da:	1c42      	adds	r2, r0, #1
 80060dc:	4606      	mov	r6, r0
 80060de:	d1d6      	bne.n	800608e <_svfiprintf_r+0x176>
 80060e0:	89ab      	ldrh	r3, [r5, #12]
 80060e2:	065b      	lsls	r3, r3, #25
 80060e4:	f53f af2c 	bmi.w	8005f40 <_svfiprintf_r+0x28>
 80060e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ea:	b01d      	add	sp, #116	; 0x74
 80060ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f0:	ab03      	add	r3, sp, #12
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	462a      	mov	r2, r5
 80060f6:	4638      	mov	r0, r7
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <_svfiprintf_r+0x1fc>)
 80060fa:	a904      	add	r1, sp, #16
 80060fc:	f7fe fa54 	bl	80045a8 <_printf_i>
 8006100:	e7eb      	b.n	80060da <_svfiprintf_r+0x1c2>
 8006102:	bf00      	nop
 8006104:	08006f74 	.word	0x08006f74
 8006108:	08006f7a 	.word	0x08006f7a
 800610c:	08006f7e 	.word	0x08006f7e
 8006110:	08004071 	.word	0x08004071
 8006114:	08005e61 	.word	0x08005e61

08006118 <_sbrk_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	2300      	movs	r3, #0
 800611c:	4d05      	ldr	r5, [pc, #20]	; (8006134 <_sbrk_r+0x1c>)
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	602b      	str	r3, [r5, #0]
 8006124:	f7fb fcf6 	bl	8001b14 <_sbrk>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_sbrk_r+0x1a>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_sbrk_r+0x1a>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	20000334 	.word	0x20000334

08006138 <__assert_func>:
 8006138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800613a:	4614      	mov	r4, r2
 800613c:	461a      	mov	r2, r3
 800613e:	4b09      	ldr	r3, [pc, #36]	; (8006164 <__assert_func+0x2c>)
 8006140:	4605      	mov	r5, r0
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68d8      	ldr	r0, [r3, #12]
 8006146:	b14c      	cbz	r4, 800615c <__assert_func+0x24>
 8006148:	4b07      	ldr	r3, [pc, #28]	; (8006168 <__assert_func+0x30>)
 800614a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800614e:	9100      	str	r1, [sp, #0]
 8006150:	462b      	mov	r3, r5
 8006152:	4906      	ldr	r1, [pc, #24]	; (800616c <__assert_func+0x34>)
 8006154:	f000 f80e 	bl	8006174 <fiprintf>
 8006158:	f000 faaa 	bl	80066b0 <abort>
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <__assert_func+0x38>)
 800615e:	461c      	mov	r4, r3
 8006160:	e7f3      	b.n	800614a <__assert_func+0x12>
 8006162:	bf00      	nop
 8006164:	2000000c 	.word	0x2000000c
 8006168:	08006f85 	.word	0x08006f85
 800616c:	08006f92 	.word	0x08006f92
 8006170:	08006fc0 	.word	0x08006fc0

08006174 <fiprintf>:
 8006174:	b40e      	push	{r1, r2, r3}
 8006176:	b503      	push	{r0, r1, lr}
 8006178:	4601      	mov	r1, r0
 800617a:	ab03      	add	r3, sp, #12
 800617c:	4805      	ldr	r0, [pc, #20]	; (8006194 <fiprintf+0x20>)
 800617e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006182:	6800      	ldr	r0, [r0, #0]
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	f000 f895 	bl	80062b4 <_vfiprintf_r>
 800618a:	b002      	add	sp, #8
 800618c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006190:	b003      	add	sp, #12
 8006192:	4770      	bx	lr
 8006194:	2000000c 	.word	0x2000000c

08006198 <__ascii_mbtowc>:
 8006198:	b082      	sub	sp, #8
 800619a:	b901      	cbnz	r1, 800619e <__ascii_mbtowc+0x6>
 800619c:	a901      	add	r1, sp, #4
 800619e:	b142      	cbz	r2, 80061b2 <__ascii_mbtowc+0x1a>
 80061a0:	b14b      	cbz	r3, 80061b6 <__ascii_mbtowc+0x1e>
 80061a2:	7813      	ldrb	r3, [r2, #0]
 80061a4:	600b      	str	r3, [r1, #0]
 80061a6:	7812      	ldrb	r2, [r2, #0]
 80061a8:	1e10      	subs	r0, r2, #0
 80061aa:	bf18      	it	ne
 80061ac:	2001      	movne	r0, #1
 80061ae:	b002      	add	sp, #8
 80061b0:	4770      	bx	lr
 80061b2:	4610      	mov	r0, r2
 80061b4:	e7fb      	b.n	80061ae <__ascii_mbtowc+0x16>
 80061b6:	f06f 0001 	mvn.w	r0, #1
 80061ba:	e7f8      	b.n	80061ae <__ascii_mbtowc+0x16>

080061bc <memmove>:
 80061bc:	4288      	cmp	r0, r1
 80061be:	b510      	push	{r4, lr}
 80061c0:	eb01 0402 	add.w	r4, r1, r2
 80061c4:	d902      	bls.n	80061cc <memmove+0x10>
 80061c6:	4284      	cmp	r4, r0
 80061c8:	4623      	mov	r3, r4
 80061ca:	d807      	bhi.n	80061dc <memmove+0x20>
 80061cc:	1e43      	subs	r3, r0, #1
 80061ce:	42a1      	cmp	r1, r4
 80061d0:	d008      	beq.n	80061e4 <memmove+0x28>
 80061d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061da:	e7f8      	b.n	80061ce <memmove+0x12>
 80061dc:	4601      	mov	r1, r0
 80061de:	4402      	add	r2, r0
 80061e0:	428a      	cmp	r2, r1
 80061e2:	d100      	bne.n	80061e6 <memmove+0x2a>
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ee:	e7f7      	b.n	80061e0 <memmove+0x24>

080061f0 <__malloc_lock>:
 80061f0:	4801      	ldr	r0, [pc, #4]	; (80061f8 <__malloc_lock+0x8>)
 80061f2:	f000 bc19 	b.w	8006a28 <__retarget_lock_acquire_recursive>
 80061f6:	bf00      	nop
 80061f8:	20000338 	.word	0x20000338

080061fc <__malloc_unlock>:
 80061fc:	4801      	ldr	r0, [pc, #4]	; (8006204 <__malloc_unlock+0x8>)
 80061fe:	f000 bc14 	b.w	8006a2a <__retarget_lock_release_recursive>
 8006202:	bf00      	nop
 8006204:	20000338 	.word	0x20000338

08006208 <_realloc_r>:
 8006208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620c:	4680      	mov	r8, r0
 800620e:	4614      	mov	r4, r2
 8006210:	460e      	mov	r6, r1
 8006212:	b921      	cbnz	r1, 800621e <_realloc_r+0x16>
 8006214:	4611      	mov	r1, r2
 8006216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800621a:	f7ff bdad 	b.w	8005d78 <_malloc_r>
 800621e:	b92a      	cbnz	r2, 800622c <_realloc_r+0x24>
 8006220:	f7ff fd42 	bl	8005ca8 <_free_r>
 8006224:	4625      	mov	r5, r4
 8006226:	4628      	mov	r0, r5
 8006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622c:	f000 fc64 	bl	8006af8 <_malloc_usable_size_r>
 8006230:	4284      	cmp	r4, r0
 8006232:	4607      	mov	r7, r0
 8006234:	d802      	bhi.n	800623c <_realloc_r+0x34>
 8006236:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800623a:	d812      	bhi.n	8006262 <_realloc_r+0x5a>
 800623c:	4621      	mov	r1, r4
 800623e:	4640      	mov	r0, r8
 8006240:	f7ff fd9a 	bl	8005d78 <_malloc_r>
 8006244:	4605      	mov	r5, r0
 8006246:	2800      	cmp	r0, #0
 8006248:	d0ed      	beq.n	8006226 <_realloc_r+0x1e>
 800624a:	42bc      	cmp	r4, r7
 800624c:	4622      	mov	r2, r4
 800624e:	4631      	mov	r1, r6
 8006250:	bf28      	it	cs
 8006252:	463a      	movcs	r2, r7
 8006254:	f7ff f984 	bl	8005560 <memcpy>
 8006258:	4631      	mov	r1, r6
 800625a:	4640      	mov	r0, r8
 800625c:	f7ff fd24 	bl	8005ca8 <_free_r>
 8006260:	e7e1      	b.n	8006226 <_realloc_r+0x1e>
 8006262:	4635      	mov	r5, r6
 8006264:	e7df      	b.n	8006226 <_realloc_r+0x1e>

08006266 <__sfputc_r>:
 8006266:	6893      	ldr	r3, [r2, #8]
 8006268:	b410      	push	{r4}
 800626a:	3b01      	subs	r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	6093      	str	r3, [r2, #8]
 8006270:	da07      	bge.n	8006282 <__sfputc_r+0x1c>
 8006272:	6994      	ldr	r4, [r2, #24]
 8006274:	42a3      	cmp	r3, r4
 8006276:	db01      	blt.n	800627c <__sfputc_r+0x16>
 8006278:	290a      	cmp	r1, #10
 800627a:	d102      	bne.n	8006282 <__sfputc_r+0x1c>
 800627c:	bc10      	pop	{r4}
 800627e:	f000 b949 	b.w	8006514 <__swbuf_r>
 8006282:	6813      	ldr	r3, [r2, #0]
 8006284:	1c58      	adds	r0, r3, #1
 8006286:	6010      	str	r0, [r2, #0]
 8006288:	7019      	strb	r1, [r3, #0]
 800628a:	4608      	mov	r0, r1
 800628c:	bc10      	pop	{r4}
 800628e:	4770      	bx	lr

08006290 <__sfputs_r>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	4606      	mov	r6, r0
 8006294:	460f      	mov	r7, r1
 8006296:	4614      	mov	r4, r2
 8006298:	18d5      	adds	r5, r2, r3
 800629a:	42ac      	cmp	r4, r5
 800629c:	d101      	bne.n	80062a2 <__sfputs_r+0x12>
 800629e:	2000      	movs	r0, #0
 80062a0:	e007      	b.n	80062b2 <__sfputs_r+0x22>
 80062a2:	463a      	mov	r2, r7
 80062a4:	4630      	mov	r0, r6
 80062a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062aa:	f7ff ffdc 	bl	8006266 <__sfputc_r>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	d1f3      	bne.n	800629a <__sfputs_r+0xa>
 80062b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062b4 <_vfiprintf_r>:
 80062b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b8:	460d      	mov	r5, r1
 80062ba:	4614      	mov	r4, r2
 80062bc:	4698      	mov	r8, r3
 80062be:	4606      	mov	r6, r0
 80062c0:	b09d      	sub	sp, #116	; 0x74
 80062c2:	b118      	cbz	r0, 80062cc <_vfiprintf_r+0x18>
 80062c4:	6983      	ldr	r3, [r0, #24]
 80062c6:	b90b      	cbnz	r3, 80062cc <_vfiprintf_r+0x18>
 80062c8:	f000 fb10 	bl	80068ec <__sinit>
 80062cc:	4b89      	ldr	r3, [pc, #548]	; (80064f4 <_vfiprintf_r+0x240>)
 80062ce:	429d      	cmp	r5, r3
 80062d0:	d11b      	bne.n	800630a <_vfiprintf_r+0x56>
 80062d2:	6875      	ldr	r5, [r6, #4]
 80062d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062d6:	07d9      	lsls	r1, r3, #31
 80062d8:	d405      	bmi.n	80062e6 <_vfiprintf_r+0x32>
 80062da:	89ab      	ldrh	r3, [r5, #12]
 80062dc:	059a      	lsls	r2, r3, #22
 80062de:	d402      	bmi.n	80062e6 <_vfiprintf_r+0x32>
 80062e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062e2:	f000 fba1 	bl	8006a28 <__retarget_lock_acquire_recursive>
 80062e6:	89ab      	ldrh	r3, [r5, #12]
 80062e8:	071b      	lsls	r3, r3, #28
 80062ea:	d501      	bpl.n	80062f0 <_vfiprintf_r+0x3c>
 80062ec:	692b      	ldr	r3, [r5, #16]
 80062ee:	b9eb      	cbnz	r3, 800632c <_vfiprintf_r+0x78>
 80062f0:	4629      	mov	r1, r5
 80062f2:	4630      	mov	r0, r6
 80062f4:	f000 f96e 	bl	80065d4 <__swsetup_r>
 80062f8:	b1c0      	cbz	r0, 800632c <_vfiprintf_r+0x78>
 80062fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062fc:	07dc      	lsls	r4, r3, #31
 80062fe:	d50e      	bpl.n	800631e <_vfiprintf_r+0x6a>
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	b01d      	add	sp, #116	; 0x74
 8006306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630a:	4b7b      	ldr	r3, [pc, #492]	; (80064f8 <_vfiprintf_r+0x244>)
 800630c:	429d      	cmp	r5, r3
 800630e:	d101      	bne.n	8006314 <_vfiprintf_r+0x60>
 8006310:	68b5      	ldr	r5, [r6, #8]
 8006312:	e7df      	b.n	80062d4 <_vfiprintf_r+0x20>
 8006314:	4b79      	ldr	r3, [pc, #484]	; (80064fc <_vfiprintf_r+0x248>)
 8006316:	429d      	cmp	r5, r3
 8006318:	bf08      	it	eq
 800631a:	68f5      	ldreq	r5, [r6, #12]
 800631c:	e7da      	b.n	80062d4 <_vfiprintf_r+0x20>
 800631e:	89ab      	ldrh	r3, [r5, #12]
 8006320:	0598      	lsls	r0, r3, #22
 8006322:	d4ed      	bmi.n	8006300 <_vfiprintf_r+0x4c>
 8006324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006326:	f000 fb80 	bl	8006a2a <__retarget_lock_release_recursive>
 800632a:	e7e9      	b.n	8006300 <_vfiprintf_r+0x4c>
 800632c:	2300      	movs	r3, #0
 800632e:	9309      	str	r3, [sp, #36]	; 0x24
 8006330:	2320      	movs	r3, #32
 8006332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006336:	2330      	movs	r3, #48	; 0x30
 8006338:	f04f 0901 	mov.w	r9, #1
 800633c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006340:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006500 <_vfiprintf_r+0x24c>
 8006344:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006348:	4623      	mov	r3, r4
 800634a:	469a      	mov	sl, r3
 800634c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006350:	b10a      	cbz	r2, 8006356 <_vfiprintf_r+0xa2>
 8006352:	2a25      	cmp	r2, #37	; 0x25
 8006354:	d1f9      	bne.n	800634a <_vfiprintf_r+0x96>
 8006356:	ebba 0b04 	subs.w	fp, sl, r4
 800635a:	d00b      	beq.n	8006374 <_vfiprintf_r+0xc0>
 800635c:	465b      	mov	r3, fp
 800635e:	4622      	mov	r2, r4
 8006360:	4629      	mov	r1, r5
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff ff94 	bl	8006290 <__sfputs_r>
 8006368:	3001      	adds	r0, #1
 800636a:	f000 80aa 	beq.w	80064c2 <_vfiprintf_r+0x20e>
 800636e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006370:	445a      	add	r2, fp
 8006372:	9209      	str	r2, [sp, #36]	; 0x24
 8006374:	f89a 3000 	ldrb.w	r3, [sl]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 80a2 	beq.w	80064c2 <_vfiprintf_r+0x20e>
 800637e:	2300      	movs	r3, #0
 8006380:	f04f 32ff 	mov.w	r2, #4294967295
 8006384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006388:	f10a 0a01 	add.w	sl, sl, #1
 800638c:	9304      	str	r3, [sp, #16]
 800638e:	9307      	str	r3, [sp, #28]
 8006390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006394:	931a      	str	r3, [sp, #104]	; 0x68
 8006396:	4654      	mov	r4, sl
 8006398:	2205      	movs	r2, #5
 800639a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800639e:	4858      	ldr	r0, [pc, #352]	; (8006500 <_vfiprintf_r+0x24c>)
 80063a0:	f7ff f8d0 	bl	8005544 <memchr>
 80063a4:	9a04      	ldr	r2, [sp, #16]
 80063a6:	b9d8      	cbnz	r0, 80063e0 <_vfiprintf_r+0x12c>
 80063a8:	06d1      	lsls	r1, r2, #27
 80063aa:	bf44      	itt	mi
 80063ac:	2320      	movmi	r3, #32
 80063ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063b2:	0713      	lsls	r3, r2, #28
 80063b4:	bf44      	itt	mi
 80063b6:	232b      	movmi	r3, #43	; 0x2b
 80063b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063bc:	f89a 3000 	ldrb.w	r3, [sl]
 80063c0:	2b2a      	cmp	r3, #42	; 0x2a
 80063c2:	d015      	beq.n	80063f0 <_vfiprintf_r+0x13c>
 80063c4:	4654      	mov	r4, sl
 80063c6:	2000      	movs	r0, #0
 80063c8:	f04f 0c0a 	mov.w	ip, #10
 80063cc:	9a07      	ldr	r2, [sp, #28]
 80063ce:	4621      	mov	r1, r4
 80063d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063d4:	3b30      	subs	r3, #48	; 0x30
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	d94e      	bls.n	8006478 <_vfiprintf_r+0x1c4>
 80063da:	b1b0      	cbz	r0, 800640a <_vfiprintf_r+0x156>
 80063dc:	9207      	str	r2, [sp, #28]
 80063de:	e014      	b.n	800640a <_vfiprintf_r+0x156>
 80063e0:	eba0 0308 	sub.w	r3, r0, r8
 80063e4:	fa09 f303 	lsl.w	r3, r9, r3
 80063e8:	4313      	orrs	r3, r2
 80063ea:	46a2      	mov	sl, r4
 80063ec:	9304      	str	r3, [sp, #16]
 80063ee:	e7d2      	b.n	8006396 <_vfiprintf_r+0xe2>
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	1d19      	adds	r1, r3, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	9103      	str	r1, [sp, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bfbb      	ittet	lt
 80063fc:	425b      	neglt	r3, r3
 80063fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006402:	9307      	strge	r3, [sp, #28]
 8006404:	9307      	strlt	r3, [sp, #28]
 8006406:	bfb8      	it	lt
 8006408:	9204      	strlt	r2, [sp, #16]
 800640a:	7823      	ldrb	r3, [r4, #0]
 800640c:	2b2e      	cmp	r3, #46	; 0x2e
 800640e:	d10c      	bne.n	800642a <_vfiprintf_r+0x176>
 8006410:	7863      	ldrb	r3, [r4, #1]
 8006412:	2b2a      	cmp	r3, #42	; 0x2a
 8006414:	d135      	bne.n	8006482 <_vfiprintf_r+0x1ce>
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	3402      	adds	r4, #2
 800641a:	1d1a      	adds	r2, r3, #4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	9203      	str	r2, [sp, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	bfb8      	it	lt
 8006424:	f04f 33ff 	movlt.w	r3, #4294967295
 8006428:	9305      	str	r3, [sp, #20]
 800642a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006504 <_vfiprintf_r+0x250>
 800642e:	2203      	movs	r2, #3
 8006430:	4650      	mov	r0, sl
 8006432:	7821      	ldrb	r1, [r4, #0]
 8006434:	f7ff f886 	bl	8005544 <memchr>
 8006438:	b140      	cbz	r0, 800644c <_vfiprintf_r+0x198>
 800643a:	2340      	movs	r3, #64	; 0x40
 800643c:	eba0 000a 	sub.w	r0, r0, sl
 8006440:	fa03 f000 	lsl.w	r0, r3, r0
 8006444:	9b04      	ldr	r3, [sp, #16]
 8006446:	3401      	adds	r4, #1
 8006448:	4303      	orrs	r3, r0
 800644a:	9304      	str	r3, [sp, #16]
 800644c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006450:	2206      	movs	r2, #6
 8006452:	482d      	ldr	r0, [pc, #180]	; (8006508 <_vfiprintf_r+0x254>)
 8006454:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006458:	f7ff f874 	bl	8005544 <memchr>
 800645c:	2800      	cmp	r0, #0
 800645e:	d03f      	beq.n	80064e0 <_vfiprintf_r+0x22c>
 8006460:	4b2a      	ldr	r3, [pc, #168]	; (800650c <_vfiprintf_r+0x258>)
 8006462:	bb1b      	cbnz	r3, 80064ac <_vfiprintf_r+0x1f8>
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	3307      	adds	r3, #7
 8006468:	f023 0307 	bic.w	r3, r3, #7
 800646c:	3308      	adds	r3, #8
 800646e:	9303      	str	r3, [sp, #12]
 8006470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006472:	443b      	add	r3, r7
 8006474:	9309      	str	r3, [sp, #36]	; 0x24
 8006476:	e767      	b.n	8006348 <_vfiprintf_r+0x94>
 8006478:	460c      	mov	r4, r1
 800647a:	2001      	movs	r0, #1
 800647c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006480:	e7a5      	b.n	80063ce <_vfiprintf_r+0x11a>
 8006482:	2300      	movs	r3, #0
 8006484:	f04f 0c0a 	mov.w	ip, #10
 8006488:	4619      	mov	r1, r3
 800648a:	3401      	adds	r4, #1
 800648c:	9305      	str	r3, [sp, #20]
 800648e:	4620      	mov	r0, r4
 8006490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006494:	3a30      	subs	r2, #48	; 0x30
 8006496:	2a09      	cmp	r2, #9
 8006498:	d903      	bls.n	80064a2 <_vfiprintf_r+0x1ee>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0c5      	beq.n	800642a <_vfiprintf_r+0x176>
 800649e:	9105      	str	r1, [sp, #20]
 80064a0:	e7c3      	b.n	800642a <_vfiprintf_r+0x176>
 80064a2:	4604      	mov	r4, r0
 80064a4:	2301      	movs	r3, #1
 80064a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80064aa:	e7f0      	b.n	800648e <_vfiprintf_r+0x1da>
 80064ac:	ab03      	add	r3, sp, #12
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	462a      	mov	r2, r5
 80064b2:	4630      	mov	r0, r6
 80064b4:	4b16      	ldr	r3, [pc, #88]	; (8006510 <_vfiprintf_r+0x25c>)
 80064b6:	a904      	add	r1, sp, #16
 80064b8:	f7fd fdda 	bl	8004070 <_printf_float>
 80064bc:	4607      	mov	r7, r0
 80064be:	1c78      	adds	r0, r7, #1
 80064c0:	d1d6      	bne.n	8006470 <_vfiprintf_r+0x1bc>
 80064c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064c4:	07d9      	lsls	r1, r3, #31
 80064c6:	d405      	bmi.n	80064d4 <_vfiprintf_r+0x220>
 80064c8:	89ab      	ldrh	r3, [r5, #12]
 80064ca:	059a      	lsls	r2, r3, #22
 80064cc:	d402      	bmi.n	80064d4 <_vfiprintf_r+0x220>
 80064ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064d0:	f000 faab 	bl	8006a2a <__retarget_lock_release_recursive>
 80064d4:	89ab      	ldrh	r3, [r5, #12]
 80064d6:	065b      	lsls	r3, r3, #25
 80064d8:	f53f af12 	bmi.w	8006300 <_vfiprintf_r+0x4c>
 80064dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064de:	e711      	b.n	8006304 <_vfiprintf_r+0x50>
 80064e0:	ab03      	add	r3, sp, #12
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	462a      	mov	r2, r5
 80064e6:	4630      	mov	r0, r6
 80064e8:	4b09      	ldr	r3, [pc, #36]	; (8006510 <_vfiprintf_r+0x25c>)
 80064ea:	a904      	add	r1, sp, #16
 80064ec:	f7fe f85c 	bl	80045a8 <_printf_i>
 80064f0:	e7e4      	b.n	80064bc <_vfiprintf_r+0x208>
 80064f2:	bf00      	nop
 80064f4:	080070ec 	.word	0x080070ec
 80064f8:	0800710c 	.word	0x0800710c
 80064fc:	080070cc 	.word	0x080070cc
 8006500:	08006f74 	.word	0x08006f74
 8006504:	08006f7a 	.word	0x08006f7a
 8006508:	08006f7e 	.word	0x08006f7e
 800650c:	08004071 	.word	0x08004071
 8006510:	08006291 	.word	0x08006291

08006514 <__swbuf_r>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	460e      	mov	r6, r1
 8006518:	4614      	mov	r4, r2
 800651a:	4605      	mov	r5, r0
 800651c:	b118      	cbz	r0, 8006526 <__swbuf_r+0x12>
 800651e:	6983      	ldr	r3, [r0, #24]
 8006520:	b90b      	cbnz	r3, 8006526 <__swbuf_r+0x12>
 8006522:	f000 f9e3 	bl	80068ec <__sinit>
 8006526:	4b21      	ldr	r3, [pc, #132]	; (80065ac <__swbuf_r+0x98>)
 8006528:	429c      	cmp	r4, r3
 800652a:	d12b      	bne.n	8006584 <__swbuf_r+0x70>
 800652c:	686c      	ldr	r4, [r5, #4]
 800652e:	69a3      	ldr	r3, [r4, #24]
 8006530:	60a3      	str	r3, [r4, #8]
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	071a      	lsls	r2, r3, #28
 8006536:	d52f      	bpl.n	8006598 <__swbuf_r+0x84>
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	b36b      	cbz	r3, 8006598 <__swbuf_r+0x84>
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	6820      	ldr	r0, [r4, #0]
 8006540:	b2f6      	uxtb	r6, r6
 8006542:	1ac0      	subs	r0, r0, r3
 8006544:	6963      	ldr	r3, [r4, #20]
 8006546:	4637      	mov	r7, r6
 8006548:	4283      	cmp	r3, r0
 800654a:	dc04      	bgt.n	8006556 <__swbuf_r+0x42>
 800654c:	4621      	mov	r1, r4
 800654e:	4628      	mov	r0, r5
 8006550:	f000 f938 	bl	80067c4 <_fflush_r>
 8006554:	bb30      	cbnz	r0, 80065a4 <__swbuf_r+0x90>
 8006556:	68a3      	ldr	r3, [r4, #8]
 8006558:	3001      	adds	r0, #1
 800655a:	3b01      	subs	r3, #1
 800655c:	60a3      	str	r3, [r4, #8]
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	6022      	str	r2, [r4, #0]
 8006564:	701e      	strb	r6, [r3, #0]
 8006566:	6963      	ldr	r3, [r4, #20]
 8006568:	4283      	cmp	r3, r0
 800656a:	d004      	beq.n	8006576 <__swbuf_r+0x62>
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	07db      	lsls	r3, r3, #31
 8006570:	d506      	bpl.n	8006580 <__swbuf_r+0x6c>
 8006572:	2e0a      	cmp	r6, #10
 8006574:	d104      	bne.n	8006580 <__swbuf_r+0x6c>
 8006576:	4621      	mov	r1, r4
 8006578:	4628      	mov	r0, r5
 800657a:	f000 f923 	bl	80067c4 <_fflush_r>
 800657e:	b988      	cbnz	r0, 80065a4 <__swbuf_r+0x90>
 8006580:	4638      	mov	r0, r7
 8006582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <__swbuf_r+0x9c>)
 8006586:	429c      	cmp	r4, r3
 8006588:	d101      	bne.n	800658e <__swbuf_r+0x7a>
 800658a:	68ac      	ldr	r4, [r5, #8]
 800658c:	e7cf      	b.n	800652e <__swbuf_r+0x1a>
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <__swbuf_r+0xa0>)
 8006590:	429c      	cmp	r4, r3
 8006592:	bf08      	it	eq
 8006594:	68ec      	ldreq	r4, [r5, #12]
 8006596:	e7ca      	b.n	800652e <__swbuf_r+0x1a>
 8006598:	4621      	mov	r1, r4
 800659a:	4628      	mov	r0, r5
 800659c:	f000 f81a 	bl	80065d4 <__swsetup_r>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d0cb      	beq.n	800653c <__swbuf_r+0x28>
 80065a4:	f04f 37ff 	mov.w	r7, #4294967295
 80065a8:	e7ea      	b.n	8006580 <__swbuf_r+0x6c>
 80065aa:	bf00      	nop
 80065ac:	080070ec 	.word	0x080070ec
 80065b0:	0800710c 	.word	0x0800710c
 80065b4:	080070cc 	.word	0x080070cc

080065b8 <__ascii_wctomb>:
 80065b8:	4603      	mov	r3, r0
 80065ba:	4608      	mov	r0, r1
 80065bc:	b141      	cbz	r1, 80065d0 <__ascii_wctomb+0x18>
 80065be:	2aff      	cmp	r2, #255	; 0xff
 80065c0:	d904      	bls.n	80065cc <__ascii_wctomb+0x14>
 80065c2:	228a      	movs	r2, #138	; 0x8a
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	4770      	bx	lr
 80065cc:	2001      	movs	r0, #1
 80065ce:	700a      	strb	r2, [r1, #0]
 80065d0:	4770      	bx	lr
	...

080065d4 <__swsetup_r>:
 80065d4:	4b32      	ldr	r3, [pc, #200]	; (80066a0 <__swsetup_r+0xcc>)
 80065d6:	b570      	push	{r4, r5, r6, lr}
 80065d8:	681d      	ldr	r5, [r3, #0]
 80065da:	4606      	mov	r6, r0
 80065dc:	460c      	mov	r4, r1
 80065de:	b125      	cbz	r5, 80065ea <__swsetup_r+0x16>
 80065e0:	69ab      	ldr	r3, [r5, #24]
 80065e2:	b913      	cbnz	r3, 80065ea <__swsetup_r+0x16>
 80065e4:	4628      	mov	r0, r5
 80065e6:	f000 f981 	bl	80068ec <__sinit>
 80065ea:	4b2e      	ldr	r3, [pc, #184]	; (80066a4 <__swsetup_r+0xd0>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d10f      	bne.n	8006610 <__swsetup_r+0x3c>
 80065f0:	686c      	ldr	r4, [r5, #4]
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065f8:	0719      	lsls	r1, r3, #28
 80065fa:	d42c      	bmi.n	8006656 <__swsetup_r+0x82>
 80065fc:	06dd      	lsls	r5, r3, #27
 80065fe:	d411      	bmi.n	8006624 <__swsetup_r+0x50>
 8006600:	2309      	movs	r3, #9
 8006602:	6033      	str	r3, [r6, #0]
 8006604:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	e03e      	b.n	800668e <__swsetup_r+0xba>
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <__swsetup_r+0xd4>)
 8006612:	429c      	cmp	r4, r3
 8006614:	d101      	bne.n	800661a <__swsetup_r+0x46>
 8006616:	68ac      	ldr	r4, [r5, #8]
 8006618:	e7eb      	b.n	80065f2 <__swsetup_r+0x1e>
 800661a:	4b24      	ldr	r3, [pc, #144]	; (80066ac <__swsetup_r+0xd8>)
 800661c:	429c      	cmp	r4, r3
 800661e:	bf08      	it	eq
 8006620:	68ec      	ldreq	r4, [r5, #12]
 8006622:	e7e6      	b.n	80065f2 <__swsetup_r+0x1e>
 8006624:	0758      	lsls	r0, r3, #29
 8006626:	d512      	bpl.n	800664e <__swsetup_r+0x7a>
 8006628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800662a:	b141      	cbz	r1, 800663e <__swsetup_r+0x6a>
 800662c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006630:	4299      	cmp	r1, r3
 8006632:	d002      	beq.n	800663a <__swsetup_r+0x66>
 8006634:	4630      	mov	r0, r6
 8006636:	f7ff fb37 	bl	8005ca8 <_free_r>
 800663a:	2300      	movs	r3, #0
 800663c:	6363      	str	r3, [r4, #52]	; 0x34
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	2300      	movs	r3, #0
 8006648:	6063      	str	r3, [r4, #4]
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	f043 0308 	orr.w	r3, r3, #8
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	b94b      	cbnz	r3, 800666e <__swsetup_r+0x9a>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006664:	d003      	beq.n	800666e <__swsetup_r+0x9a>
 8006666:	4621      	mov	r1, r4
 8006668:	4630      	mov	r0, r6
 800666a:	f000 fa05 	bl	8006a78 <__smakebuf_r>
 800666e:	89a0      	ldrh	r0, [r4, #12]
 8006670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006674:	f010 0301 	ands.w	r3, r0, #1
 8006678:	d00a      	beq.n	8006690 <__swsetup_r+0xbc>
 800667a:	2300      	movs	r3, #0
 800667c:	60a3      	str	r3, [r4, #8]
 800667e:	6963      	ldr	r3, [r4, #20]
 8006680:	425b      	negs	r3, r3
 8006682:	61a3      	str	r3, [r4, #24]
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	b943      	cbnz	r3, 800669a <__swsetup_r+0xc6>
 8006688:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800668c:	d1ba      	bne.n	8006604 <__swsetup_r+0x30>
 800668e:	bd70      	pop	{r4, r5, r6, pc}
 8006690:	0781      	lsls	r1, r0, #30
 8006692:	bf58      	it	pl
 8006694:	6963      	ldrpl	r3, [r4, #20]
 8006696:	60a3      	str	r3, [r4, #8]
 8006698:	e7f4      	b.n	8006684 <__swsetup_r+0xb0>
 800669a:	2000      	movs	r0, #0
 800669c:	e7f7      	b.n	800668e <__swsetup_r+0xba>
 800669e:	bf00      	nop
 80066a0:	2000000c 	.word	0x2000000c
 80066a4:	080070ec 	.word	0x080070ec
 80066a8:	0800710c 	.word	0x0800710c
 80066ac:	080070cc 	.word	0x080070cc

080066b0 <abort>:
 80066b0:	2006      	movs	r0, #6
 80066b2:	b508      	push	{r3, lr}
 80066b4:	f000 fa50 	bl	8006b58 <raise>
 80066b8:	2001      	movs	r0, #1
 80066ba:	f7fb f9b8 	bl	8001a2e <_exit>
	...

080066c0 <__sflush_r>:
 80066c0:	898a      	ldrh	r2, [r1, #12]
 80066c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c4:	4605      	mov	r5, r0
 80066c6:	0710      	lsls	r0, r2, #28
 80066c8:	460c      	mov	r4, r1
 80066ca:	d457      	bmi.n	800677c <__sflush_r+0xbc>
 80066cc:	684b      	ldr	r3, [r1, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	dc04      	bgt.n	80066dc <__sflush_r+0x1c>
 80066d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	dc01      	bgt.n	80066dc <__sflush_r+0x1c>
 80066d8:	2000      	movs	r0, #0
 80066da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066de:	2e00      	cmp	r6, #0
 80066e0:	d0fa      	beq.n	80066d8 <__sflush_r+0x18>
 80066e2:	2300      	movs	r3, #0
 80066e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066e8:	682f      	ldr	r7, [r5, #0]
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	d032      	beq.n	8006754 <__sflush_r+0x94>
 80066ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	075a      	lsls	r2, r3, #29
 80066f4:	d505      	bpl.n	8006702 <__sflush_r+0x42>
 80066f6:	6863      	ldr	r3, [r4, #4]
 80066f8:	1ac0      	subs	r0, r0, r3
 80066fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066fc:	b10b      	cbz	r3, 8006702 <__sflush_r+0x42>
 80066fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006700:	1ac0      	subs	r0, r0, r3
 8006702:	2300      	movs	r3, #0
 8006704:	4602      	mov	r2, r0
 8006706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006708:	4628      	mov	r0, r5
 800670a:	6a21      	ldr	r1, [r4, #32]
 800670c:	47b0      	blx	r6
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	d106      	bne.n	8006722 <__sflush_r+0x62>
 8006714:	6829      	ldr	r1, [r5, #0]
 8006716:	291d      	cmp	r1, #29
 8006718:	d82c      	bhi.n	8006774 <__sflush_r+0xb4>
 800671a:	4a29      	ldr	r2, [pc, #164]	; (80067c0 <__sflush_r+0x100>)
 800671c:	40ca      	lsrs	r2, r1
 800671e:	07d6      	lsls	r6, r2, #31
 8006720:	d528      	bpl.n	8006774 <__sflush_r+0xb4>
 8006722:	2200      	movs	r2, #0
 8006724:	6062      	str	r2, [r4, #4]
 8006726:	6922      	ldr	r2, [r4, #16]
 8006728:	04d9      	lsls	r1, r3, #19
 800672a:	6022      	str	r2, [r4, #0]
 800672c:	d504      	bpl.n	8006738 <__sflush_r+0x78>
 800672e:	1c42      	adds	r2, r0, #1
 8006730:	d101      	bne.n	8006736 <__sflush_r+0x76>
 8006732:	682b      	ldr	r3, [r5, #0]
 8006734:	b903      	cbnz	r3, 8006738 <__sflush_r+0x78>
 8006736:	6560      	str	r0, [r4, #84]	; 0x54
 8006738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800673a:	602f      	str	r7, [r5, #0]
 800673c:	2900      	cmp	r1, #0
 800673e:	d0cb      	beq.n	80066d8 <__sflush_r+0x18>
 8006740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006744:	4299      	cmp	r1, r3
 8006746:	d002      	beq.n	800674e <__sflush_r+0x8e>
 8006748:	4628      	mov	r0, r5
 800674a:	f7ff faad 	bl	8005ca8 <_free_r>
 800674e:	2000      	movs	r0, #0
 8006750:	6360      	str	r0, [r4, #52]	; 0x34
 8006752:	e7c2      	b.n	80066da <__sflush_r+0x1a>
 8006754:	6a21      	ldr	r1, [r4, #32]
 8006756:	2301      	movs	r3, #1
 8006758:	4628      	mov	r0, r5
 800675a:	47b0      	blx	r6
 800675c:	1c41      	adds	r1, r0, #1
 800675e:	d1c7      	bne.n	80066f0 <__sflush_r+0x30>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0c4      	beq.n	80066f0 <__sflush_r+0x30>
 8006766:	2b1d      	cmp	r3, #29
 8006768:	d001      	beq.n	800676e <__sflush_r+0xae>
 800676a:	2b16      	cmp	r3, #22
 800676c:	d101      	bne.n	8006772 <__sflush_r+0xb2>
 800676e:	602f      	str	r7, [r5, #0]
 8006770:	e7b2      	b.n	80066d8 <__sflush_r+0x18>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006778:	81a3      	strh	r3, [r4, #12]
 800677a:	e7ae      	b.n	80066da <__sflush_r+0x1a>
 800677c:	690f      	ldr	r7, [r1, #16]
 800677e:	2f00      	cmp	r7, #0
 8006780:	d0aa      	beq.n	80066d8 <__sflush_r+0x18>
 8006782:	0793      	lsls	r3, r2, #30
 8006784:	bf18      	it	ne
 8006786:	2300      	movne	r3, #0
 8006788:	680e      	ldr	r6, [r1, #0]
 800678a:	bf08      	it	eq
 800678c:	694b      	ldreq	r3, [r1, #20]
 800678e:	1bf6      	subs	r6, r6, r7
 8006790:	600f      	str	r7, [r1, #0]
 8006792:	608b      	str	r3, [r1, #8]
 8006794:	2e00      	cmp	r6, #0
 8006796:	dd9f      	ble.n	80066d8 <__sflush_r+0x18>
 8006798:	4633      	mov	r3, r6
 800679a:	463a      	mov	r2, r7
 800679c:	4628      	mov	r0, r5
 800679e:	6a21      	ldr	r1, [r4, #32]
 80067a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80067a4:	47e0      	blx	ip
 80067a6:	2800      	cmp	r0, #0
 80067a8:	dc06      	bgt.n	80067b8 <__sflush_r+0xf8>
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	f04f 30ff 	mov.w	r0, #4294967295
 80067b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	e790      	b.n	80066da <__sflush_r+0x1a>
 80067b8:	4407      	add	r7, r0
 80067ba:	1a36      	subs	r6, r6, r0
 80067bc:	e7ea      	b.n	8006794 <__sflush_r+0xd4>
 80067be:	bf00      	nop
 80067c0:	20400001 	.word	0x20400001

080067c4 <_fflush_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	690b      	ldr	r3, [r1, #16]
 80067c8:	4605      	mov	r5, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	b913      	cbnz	r3, 80067d4 <_fflush_r+0x10>
 80067ce:	2500      	movs	r5, #0
 80067d0:	4628      	mov	r0, r5
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	b118      	cbz	r0, 80067de <_fflush_r+0x1a>
 80067d6:	6983      	ldr	r3, [r0, #24]
 80067d8:	b90b      	cbnz	r3, 80067de <_fflush_r+0x1a>
 80067da:	f000 f887 	bl	80068ec <__sinit>
 80067de:	4b14      	ldr	r3, [pc, #80]	; (8006830 <_fflush_r+0x6c>)
 80067e0:	429c      	cmp	r4, r3
 80067e2:	d11b      	bne.n	800681c <_fflush_r+0x58>
 80067e4:	686c      	ldr	r4, [r5, #4]
 80067e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0ef      	beq.n	80067ce <_fflush_r+0xa>
 80067ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067f0:	07d0      	lsls	r0, r2, #31
 80067f2:	d404      	bmi.n	80067fe <_fflush_r+0x3a>
 80067f4:	0599      	lsls	r1, r3, #22
 80067f6:	d402      	bmi.n	80067fe <_fflush_r+0x3a>
 80067f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067fa:	f000 f915 	bl	8006a28 <__retarget_lock_acquire_recursive>
 80067fe:	4628      	mov	r0, r5
 8006800:	4621      	mov	r1, r4
 8006802:	f7ff ff5d 	bl	80066c0 <__sflush_r>
 8006806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006808:	4605      	mov	r5, r0
 800680a:	07da      	lsls	r2, r3, #31
 800680c:	d4e0      	bmi.n	80067d0 <_fflush_r+0xc>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	059b      	lsls	r3, r3, #22
 8006812:	d4dd      	bmi.n	80067d0 <_fflush_r+0xc>
 8006814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006816:	f000 f908 	bl	8006a2a <__retarget_lock_release_recursive>
 800681a:	e7d9      	b.n	80067d0 <_fflush_r+0xc>
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <_fflush_r+0x70>)
 800681e:	429c      	cmp	r4, r3
 8006820:	d101      	bne.n	8006826 <_fflush_r+0x62>
 8006822:	68ac      	ldr	r4, [r5, #8]
 8006824:	e7df      	b.n	80067e6 <_fflush_r+0x22>
 8006826:	4b04      	ldr	r3, [pc, #16]	; (8006838 <_fflush_r+0x74>)
 8006828:	429c      	cmp	r4, r3
 800682a:	bf08      	it	eq
 800682c:	68ec      	ldreq	r4, [r5, #12]
 800682e:	e7da      	b.n	80067e6 <_fflush_r+0x22>
 8006830:	080070ec 	.word	0x080070ec
 8006834:	0800710c 	.word	0x0800710c
 8006838:	080070cc 	.word	0x080070cc

0800683c <std>:
 800683c:	2300      	movs	r3, #0
 800683e:	b510      	push	{r4, lr}
 8006840:	4604      	mov	r4, r0
 8006842:	e9c0 3300 	strd	r3, r3, [r0]
 8006846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800684a:	6083      	str	r3, [r0, #8]
 800684c:	8181      	strh	r1, [r0, #12]
 800684e:	6643      	str	r3, [r0, #100]	; 0x64
 8006850:	81c2      	strh	r2, [r0, #14]
 8006852:	6183      	str	r3, [r0, #24]
 8006854:	4619      	mov	r1, r3
 8006856:	2208      	movs	r2, #8
 8006858:	305c      	adds	r0, #92	; 0x5c
 800685a:	f7fd fb63 	bl	8003f24 <memset>
 800685e:	4b05      	ldr	r3, [pc, #20]	; (8006874 <std+0x38>)
 8006860:	6224      	str	r4, [r4, #32]
 8006862:	6263      	str	r3, [r4, #36]	; 0x24
 8006864:	4b04      	ldr	r3, [pc, #16]	; (8006878 <std+0x3c>)
 8006866:	62a3      	str	r3, [r4, #40]	; 0x28
 8006868:	4b04      	ldr	r3, [pc, #16]	; (800687c <std+0x40>)
 800686a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800686c:	4b04      	ldr	r3, [pc, #16]	; (8006880 <std+0x44>)
 800686e:	6323      	str	r3, [r4, #48]	; 0x30
 8006870:	bd10      	pop	{r4, pc}
 8006872:	bf00      	nop
 8006874:	08006b91 	.word	0x08006b91
 8006878:	08006bb3 	.word	0x08006bb3
 800687c:	08006beb 	.word	0x08006beb
 8006880:	08006c0f 	.word	0x08006c0f

08006884 <_cleanup_r>:
 8006884:	4901      	ldr	r1, [pc, #4]	; (800688c <_cleanup_r+0x8>)
 8006886:	f000 b8af 	b.w	80069e8 <_fwalk_reent>
 800688a:	bf00      	nop
 800688c:	080067c5 	.word	0x080067c5

08006890 <__sfmoreglue>:
 8006890:	2268      	movs	r2, #104	; 0x68
 8006892:	b570      	push	{r4, r5, r6, lr}
 8006894:	1e4d      	subs	r5, r1, #1
 8006896:	4355      	muls	r5, r2
 8006898:	460e      	mov	r6, r1
 800689a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800689e:	f7ff fa6b 	bl	8005d78 <_malloc_r>
 80068a2:	4604      	mov	r4, r0
 80068a4:	b140      	cbz	r0, 80068b8 <__sfmoreglue+0x28>
 80068a6:	2100      	movs	r1, #0
 80068a8:	e9c0 1600 	strd	r1, r6, [r0]
 80068ac:	300c      	adds	r0, #12
 80068ae:	60a0      	str	r0, [r4, #8]
 80068b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068b4:	f7fd fb36 	bl	8003f24 <memset>
 80068b8:	4620      	mov	r0, r4
 80068ba:	bd70      	pop	{r4, r5, r6, pc}

080068bc <__sfp_lock_acquire>:
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <__sfp_lock_acquire+0x8>)
 80068be:	f000 b8b3 	b.w	8006a28 <__retarget_lock_acquire_recursive>
 80068c2:	bf00      	nop
 80068c4:	20000339 	.word	0x20000339

080068c8 <__sfp_lock_release>:
 80068c8:	4801      	ldr	r0, [pc, #4]	; (80068d0 <__sfp_lock_release+0x8>)
 80068ca:	f000 b8ae 	b.w	8006a2a <__retarget_lock_release_recursive>
 80068ce:	bf00      	nop
 80068d0:	20000339 	.word	0x20000339

080068d4 <__sinit_lock_acquire>:
 80068d4:	4801      	ldr	r0, [pc, #4]	; (80068dc <__sinit_lock_acquire+0x8>)
 80068d6:	f000 b8a7 	b.w	8006a28 <__retarget_lock_acquire_recursive>
 80068da:	bf00      	nop
 80068dc:	2000033a 	.word	0x2000033a

080068e0 <__sinit_lock_release>:
 80068e0:	4801      	ldr	r0, [pc, #4]	; (80068e8 <__sinit_lock_release+0x8>)
 80068e2:	f000 b8a2 	b.w	8006a2a <__retarget_lock_release_recursive>
 80068e6:	bf00      	nop
 80068e8:	2000033a 	.word	0x2000033a

080068ec <__sinit>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	4604      	mov	r4, r0
 80068f0:	f7ff fff0 	bl	80068d4 <__sinit_lock_acquire>
 80068f4:	69a3      	ldr	r3, [r4, #24]
 80068f6:	b11b      	cbz	r3, 8006900 <__sinit+0x14>
 80068f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068fc:	f7ff bff0 	b.w	80068e0 <__sinit_lock_release>
 8006900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006904:	6523      	str	r3, [r4, #80]	; 0x50
 8006906:	4b13      	ldr	r3, [pc, #76]	; (8006954 <__sinit+0x68>)
 8006908:	4a13      	ldr	r2, [pc, #76]	; (8006958 <__sinit+0x6c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	62a2      	str	r2, [r4, #40]	; 0x28
 800690e:	42a3      	cmp	r3, r4
 8006910:	bf08      	it	eq
 8006912:	2301      	moveq	r3, #1
 8006914:	4620      	mov	r0, r4
 8006916:	bf08      	it	eq
 8006918:	61a3      	streq	r3, [r4, #24]
 800691a:	f000 f81f 	bl	800695c <__sfp>
 800691e:	6060      	str	r0, [r4, #4]
 8006920:	4620      	mov	r0, r4
 8006922:	f000 f81b 	bl	800695c <__sfp>
 8006926:	60a0      	str	r0, [r4, #8]
 8006928:	4620      	mov	r0, r4
 800692a:	f000 f817 	bl	800695c <__sfp>
 800692e:	2200      	movs	r2, #0
 8006930:	2104      	movs	r1, #4
 8006932:	60e0      	str	r0, [r4, #12]
 8006934:	6860      	ldr	r0, [r4, #4]
 8006936:	f7ff ff81 	bl	800683c <std>
 800693a:	2201      	movs	r2, #1
 800693c:	2109      	movs	r1, #9
 800693e:	68a0      	ldr	r0, [r4, #8]
 8006940:	f7ff ff7c 	bl	800683c <std>
 8006944:	2202      	movs	r2, #2
 8006946:	2112      	movs	r1, #18
 8006948:	68e0      	ldr	r0, [r4, #12]
 800694a:	f7ff ff77 	bl	800683c <std>
 800694e:	2301      	movs	r3, #1
 8006950:	61a3      	str	r3, [r4, #24]
 8006952:	e7d1      	b.n	80068f8 <__sinit+0xc>
 8006954:	08006d54 	.word	0x08006d54
 8006958:	08006885 	.word	0x08006885

0800695c <__sfp>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	4607      	mov	r7, r0
 8006960:	f7ff ffac 	bl	80068bc <__sfp_lock_acquire>
 8006964:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <__sfp+0x84>)
 8006966:	681e      	ldr	r6, [r3, #0]
 8006968:	69b3      	ldr	r3, [r6, #24]
 800696a:	b913      	cbnz	r3, 8006972 <__sfp+0x16>
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff ffbd 	bl	80068ec <__sinit>
 8006972:	3648      	adds	r6, #72	; 0x48
 8006974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006978:	3b01      	subs	r3, #1
 800697a:	d503      	bpl.n	8006984 <__sfp+0x28>
 800697c:	6833      	ldr	r3, [r6, #0]
 800697e:	b30b      	cbz	r3, 80069c4 <__sfp+0x68>
 8006980:	6836      	ldr	r6, [r6, #0]
 8006982:	e7f7      	b.n	8006974 <__sfp+0x18>
 8006984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006988:	b9d5      	cbnz	r5, 80069c0 <__sfp+0x64>
 800698a:	4b16      	ldr	r3, [pc, #88]	; (80069e4 <__sfp+0x88>)
 800698c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006990:	60e3      	str	r3, [r4, #12]
 8006992:	6665      	str	r5, [r4, #100]	; 0x64
 8006994:	f000 f847 	bl	8006a26 <__retarget_lock_init_recursive>
 8006998:	f7ff ff96 	bl	80068c8 <__sfp_lock_release>
 800699c:	2208      	movs	r2, #8
 800699e:	4629      	mov	r1, r5
 80069a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069a8:	6025      	str	r5, [r4, #0]
 80069aa:	61a5      	str	r5, [r4, #24]
 80069ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069b0:	f7fd fab8 	bl	8003f24 <memset>
 80069b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069bc:	4620      	mov	r0, r4
 80069be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c0:	3468      	adds	r4, #104	; 0x68
 80069c2:	e7d9      	b.n	8006978 <__sfp+0x1c>
 80069c4:	2104      	movs	r1, #4
 80069c6:	4638      	mov	r0, r7
 80069c8:	f7ff ff62 	bl	8006890 <__sfmoreglue>
 80069cc:	4604      	mov	r4, r0
 80069ce:	6030      	str	r0, [r6, #0]
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d1d5      	bne.n	8006980 <__sfp+0x24>
 80069d4:	f7ff ff78 	bl	80068c8 <__sfp_lock_release>
 80069d8:	230c      	movs	r3, #12
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	e7ee      	b.n	80069bc <__sfp+0x60>
 80069de:	bf00      	nop
 80069e0:	08006d54 	.word	0x08006d54
 80069e4:	ffff0001 	.word	0xffff0001

080069e8 <_fwalk_reent>:
 80069e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ec:	4606      	mov	r6, r0
 80069ee:	4688      	mov	r8, r1
 80069f0:	2700      	movs	r7, #0
 80069f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069fa:	f1b9 0901 	subs.w	r9, r9, #1
 80069fe:	d505      	bpl.n	8006a0c <_fwalk_reent+0x24>
 8006a00:	6824      	ldr	r4, [r4, #0]
 8006a02:	2c00      	cmp	r4, #0
 8006a04:	d1f7      	bne.n	80069f6 <_fwalk_reent+0xe>
 8006a06:	4638      	mov	r0, r7
 8006a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0c:	89ab      	ldrh	r3, [r5, #12]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d907      	bls.n	8006a22 <_fwalk_reent+0x3a>
 8006a12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a16:	3301      	adds	r3, #1
 8006a18:	d003      	beq.n	8006a22 <_fwalk_reent+0x3a>
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	47c0      	blx	r8
 8006a20:	4307      	orrs	r7, r0
 8006a22:	3568      	adds	r5, #104	; 0x68
 8006a24:	e7e9      	b.n	80069fa <_fwalk_reent+0x12>

08006a26 <__retarget_lock_init_recursive>:
 8006a26:	4770      	bx	lr

08006a28 <__retarget_lock_acquire_recursive>:
 8006a28:	4770      	bx	lr

08006a2a <__retarget_lock_release_recursive>:
 8006a2a:	4770      	bx	lr

08006a2c <__swhatbuf_r>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	460e      	mov	r6, r1
 8006a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a34:	4614      	mov	r4, r2
 8006a36:	2900      	cmp	r1, #0
 8006a38:	461d      	mov	r5, r3
 8006a3a:	b096      	sub	sp, #88	; 0x58
 8006a3c:	da08      	bge.n	8006a50 <__swhatbuf_r+0x24>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a44:	602a      	str	r2, [r5, #0]
 8006a46:	061a      	lsls	r2, r3, #24
 8006a48:	d410      	bmi.n	8006a6c <__swhatbuf_r+0x40>
 8006a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a4e:	e00e      	b.n	8006a6e <__swhatbuf_r+0x42>
 8006a50:	466a      	mov	r2, sp
 8006a52:	f000 f903 	bl	8006c5c <_fstat_r>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	dbf1      	blt.n	8006a3e <__swhatbuf_r+0x12>
 8006a5a:	9a01      	ldr	r2, [sp, #4]
 8006a5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a64:	425a      	negs	r2, r3
 8006a66:	415a      	adcs	r2, r3
 8006a68:	602a      	str	r2, [r5, #0]
 8006a6a:	e7ee      	b.n	8006a4a <__swhatbuf_r+0x1e>
 8006a6c:	2340      	movs	r3, #64	; 0x40
 8006a6e:	2000      	movs	r0, #0
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	b016      	add	sp, #88	; 0x58
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a78 <__smakebuf_r>:
 8006a78:	898b      	ldrh	r3, [r1, #12]
 8006a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a7c:	079d      	lsls	r5, r3, #30
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460c      	mov	r4, r1
 8006a82:	d507      	bpl.n	8006a94 <__smakebuf_r+0x1c>
 8006a84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	6163      	str	r3, [r4, #20]
 8006a90:	b002      	add	sp, #8
 8006a92:	bd70      	pop	{r4, r5, r6, pc}
 8006a94:	466a      	mov	r2, sp
 8006a96:	ab01      	add	r3, sp, #4
 8006a98:	f7ff ffc8 	bl	8006a2c <__swhatbuf_r>
 8006a9c:	9900      	ldr	r1, [sp, #0]
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f7ff f969 	bl	8005d78 <_malloc_r>
 8006aa6:	b948      	cbnz	r0, 8006abc <__smakebuf_r+0x44>
 8006aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aac:	059a      	lsls	r2, r3, #22
 8006aae:	d4ef      	bmi.n	8006a90 <__smakebuf_r+0x18>
 8006ab0:	f023 0303 	bic.w	r3, r3, #3
 8006ab4:	f043 0302 	orr.w	r3, r3, #2
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	e7e3      	b.n	8006a84 <__smakebuf_r+0xc>
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <__smakebuf_r+0x7c>)
 8006abe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	6020      	str	r0, [r4, #0]
 8006ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	9b00      	ldr	r3, [sp, #0]
 8006acc:	6120      	str	r0, [r4, #16]
 8006ace:	6163      	str	r3, [r4, #20]
 8006ad0:	9b01      	ldr	r3, [sp, #4]
 8006ad2:	b15b      	cbz	r3, 8006aec <__smakebuf_r+0x74>
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ada:	f000 f8d1 	bl	8006c80 <_isatty_r>
 8006ade:	b128      	cbz	r0, 8006aec <__smakebuf_r+0x74>
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	f023 0303 	bic.w	r3, r3, #3
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	81a3      	strh	r3, [r4, #12]
 8006aec:	89a0      	ldrh	r0, [r4, #12]
 8006aee:	4305      	orrs	r5, r0
 8006af0:	81a5      	strh	r5, [r4, #12]
 8006af2:	e7cd      	b.n	8006a90 <__smakebuf_r+0x18>
 8006af4:	08006885 	.word	0x08006885

08006af8 <_malloc_usable_size_r>:
 8006af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006afc:	1f18      	subs	r0, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bfbc      	itt	lt
 8006b02:	580b      	ldrlt	r3, [r1, r0]
 8006b04:	18c0      	addlt	r0, r0, r3
 8006b06:	4770      	bx	lr

08006b08 <_raise_r>:
 8006b08:	291f      	cmp	r1, #31
 8006b0a:	b538      	push	{r3, r4, r5, lr}
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	460d      	mov	r5, r1
 8006b10:	d904      	bls.n	8006b1c <_raise_r+0x14>
 8006b12:	2316      	movs	r3, #22
 8006b14:	6003      	str	r3, [r0, #0]
 8006b16:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b1e:	b112      	cbz	r2, 8006b26 <_raise_r+0x1e>
 8006b20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b24:	b94b      	cbnz	r3, 8006b3a <_raise_r+0x32>
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 f830 	bl	8006b8c <_getpid_r>
 8006b2c:	462a      	mov	r2, r5
 8006b2e:	4601      	mov	r1, r0
 8006b30:	4620      	mov	r0, r4
 8006b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b36:	f000 b817 	b.w	8006b68 <_kill_r>
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d00a      	beq.n	8006b54 <_raise_r+0x4c>
 8006b3e:	1c59      	adds	r1, r3, #1
 8006b40:	d103      	bne.n	8006b4a <_raise_r+0x42>
 8006b42:	2316      	movs	r3, #22
 8006b44:	6003      	str	r3, [r0, #0]
 8006b46:	2001      	movs	r0, #1
 8006b48:	e7e7      	b.n	8006b1a <_raise_r+0x12>
 8006b4a:	2400      	movs	r4, #0
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b52:	4798      	blx	r3
 8006b54:	2000      	movs	r0, #0
 8006b56:	e7e0      	b.n	8006b1a <_raise_r+0x12>

08006b58 <raise>:
 8006b58:	4b02      	ldr	r3, [pc, #8]	; (8006b64 <raise+0xc>)
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	f7ff bfd3 	b.w	8006b08 <_raise_r>
 8006b62:	bf00      	nop
 8006b64:	2000000c 	.word	0x2000000c

08006b68 <_kill_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	4d06      	ldr	r5, [pc, #24]	; (8006b88 <_kill_r+0x20>)
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	4611      	mov	r1, r2
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	f7fa ff4a 	bl	8001a0e <_kill>
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	d102      	bne.n	8006b84 <_kill_r+0x1c>
 8006b7e:	682b      	ldr	r3, [r5, #0]
 8006b80:	b103      	cbz	r3, 8006b84 <_kill_r+0x1c>
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	bf00      	nop
 8006b88:	20000334 	.word	0x20000334

08006b8c <_getpid_r>:
 8006b8c:	f7fa bf38 	b.w	8001a00 <_getpid>

08006b90 <__sread>:
 8006b90:	b510      	push	{r4, lr}
 8006b92:	460c      	mov	r4, r1
 8006b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b98:	f000 f894 	bl	8006cc4 <_read_r>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	bfab      	itete	ge
 8006ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ba4:	181b      	addge	r3, r3, r0
 8006ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006baa:	bfac      	ite	ge
 8006bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bae:	81a3      	strhlt	r3, [r4, #12]
 8006bb0:	bd10      	pop	{r4, pc}

08006bb2 <__swrite>:
 8006bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb6:	461f      	mov	r7, r3
 8006bb8:	898b      	ldrh	r3, [r1, #12]
 8006bba:	4605      	mov	r5, r0
 8006bbc:	05db      	lsls	r3, r3, #23
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	d505      	bpl.n	8006bd0 <__swrite+0x1e>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bcc:	f000 f868 	bl	8006ca0 <_lseek_r>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	4632      	mov	r2, r6
 8006bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	4628      	mov	r0, r5
 8006bdc:	463b      	mov	r3, r7
 8006bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006be6:	f000 b817 	b.w	8006c18 <_write_r>

08006bea <__sseek>:
 8006bea:	b510      	push	{r4, lr}
 8006bec:	460c      	mov	r4, r1
 8006bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf2:	f000 f855 	bl	8006ca0 <_lseek_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	bf15      	itete	ne
 8006bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c06:	81a3      	strheq	r3, [r4, #12]
 8006c08:	bf18      	it	ne
 8006c0a:	81a3      	strhne	r3, [r4, #12]
 8006c0c:	bd10      	pop	{r4, pc}

08006c0e <__sclose>:
 8006c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c12:	f000 b813 	b.w	8006c3c <_close_r>
	...

08006c18 <_write_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	4611      	mov	r1, r2
 8006c20:	2200      	movs	r2, #0
 8006c22:	4d05      	ldr	r5, [pc, #20]	; (8006c38 <_write_r+0x20>)
 8006c24:	602a      	str	r2, [r5, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	f7fa ff28 	bl	8001a7c <_write>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d102      	bne.n	8006c36 <_write_r+0x1e>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	b103      	cbz	r3, 8006c36 <_write_r+0x1e>
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	20000334 	.word	0x20000334

08006c3c <_close_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	2300      	movs	r3, #0
 8006c40:	4d05      	ldr	r5, [pc, #20]	; (8006c58 <_close_r+0x1c>)
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	f7fa ff34 	bl	8001ab4 <_close>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_close_r+0x1a>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_close_r+0x1a>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	20000334 	.word	0x20000334

08006c5c <_fstat_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4d06      	ldr	r5, [pc, #24]	; (8006c7c <_fstat_r+0x20>)
 8006c62:	4604      	mov	r4, r0
 8006c64:	4608      	mov	r0, r1
 8006c66:	4611      	mov	r1, r2
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	f7fa ff2e 	bl	8001aca <_fstat>
 8006c6e:	1c43      	adds	r3, r0, #1
 8006c70:	d102      	bne.n	8006c78 <_fstat_r+0x1c>
 8006c72:	682b      	ldr	r3, [r5, #0]
 8006c74:	b103      	cbz	r3, 8006c78 <_fstat_r+0x1c>
 8006c76:	6023      	str	r3, [r4, #0]
 8006c78:	bd38      	pop	{r3, r4, r5, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000334 	.word	0x20000334

08006c80 <_isatty_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	2300      	movs	r3, #0
 8006c84:	4d05      	ldr	r5, [pc, #20]	; (8006c9c <_isatty_r+0x1c>)
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	602b      	str	r3, [r5, #0]
 8006c8c:	f7fa ff2c 	bl	8001ae8 <_isatty>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_isatty_r+0x1a>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_isatty_r+0x1a>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	20000334 	.word	0x20000334

08006ca0 <_lseek_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	2200      	movs	r2, #0
 8006caa:	4d05      	ldr	r5, [pc, #20]	; (8006cc0 <_lseek_r+0x20>)
 8006cac:	602a      	str	r2, [r5, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f7fa ff24 	bl	8001afc <_lseek>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d102      	bne.n	8006cbe <_lseek_r+0x1e>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b103      	cbz	r3, 8006cbe <_lseek_r+0x1e>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	20000334 	.word	0x20000334

08006cc4 <_read_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	4608      	mov	r0, r1
 8006cca:	4611      	mov	r1, r2
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4d05      	ldr	r5, [pc, #20]	; (8006ce4 <_read_r+0x20>)
 8006cd0:	602a      	str	r2, [r5, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f7fa feb5 	bl	8001a42 <_read>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_read_r+0x1e>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_read_r+0x1e>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	20000334 	.word	0x20000334

08006ce8 <_init>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	bf00      	nop
 8006cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cee:	bc08      	pop	{r3}
 8006cf0:	469e      	mov	lr, r3
 8006cf2:	4770      	bx	lr

08006cf4 <_fini>:
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	bf00      	nop
 8006cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfa:	bc08      	pop	{r3}
 8006cfc:	469e      	mov	lr, r3
 8006cfe:	4770      	bx	lr
